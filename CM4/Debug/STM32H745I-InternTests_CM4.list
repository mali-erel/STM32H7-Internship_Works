
STM32H745I-InternTests_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001584  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0810181c  0810181c  0001181c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08101834  08101834  00011834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08101838  08101838  00011838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  10000000  0810183c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000098  10000010  0810184c  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  100000a8  0810184c  000200a8  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000728e  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001414  00000000  00000000  000272ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000728  00000000  00000000  000286e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000680  00000000  00000000  00028e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00037195  00000000  00000000  00029490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000969a  00000000  00000000  00060625  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0016e79b  00000000  00000000  00069cbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001d845a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001b80  00000000  00000000  001d84ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000010 	.word	0x10000010
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08101804 	.word	0x08101804

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000014 	.word	0x10000014
 81002d4:	08101804 	.word	0x08101804

081002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002d8:	b480      	push	{r7}
 81002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002dc:	4b09      	ldr	r3, [pc, #36]	; (8100304 <SystemInit+0x2c>)
 81002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81002e2:	4a08      	ldr	r2, [pc, #32]	; (8100304 <SystemInit+0x2c>)
 81002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002ec:	4b05      	ldr	r3, [pc, #20]	; (8100304 <SystemInit+0x2c>)
 81002ee:	691b      	ldr	r3, [r3, #16]
 81002f0:	4a04      	ldr	r2, [pc, #16]	; (8100304 <SystemInit+0x2c>)
 81002f2:	f043 0310 	orr.w	r3, r3, #16
 81002f6:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81002f8:	bf00      	nop
 81002fa:	46bd      	mov	sp, r7
 81002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100300:	4770      	bx	lr
 8100302:	bf00      	nop
 8100304:	e000ed00 	.word	0xe000ed00

08100308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100308:	b580      	push	{r7, lr}
 810030a:	b082      	sub	sp, #8
 810030c:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810030e:	4b1b      	ldr	r3, [pc, #108]	; (810037c <main+0x74>)
 8100310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100314:	4a19      	ldr	r2, [pc, #100]	; (810037c <main+0x74>)
 8100316:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810031a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810031e:	4b17      	ldr	r3, [pc, #92]	; (810037c <main+0x74>)
 8100320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100328:	607b      	str	r3, [r7, #4]
 810032a:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810032c:	2001      	movs	r0, #1
 810032e:	f001 f831 	bl	8101394 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100332:	f001 f8bb 	bl	81014ac <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100336:	2201      	movs	r2, #1
 8100338:	2102      	movs	r1, #2
 810033a:	2000      	movs	r0, #0
 810033c:	f001 f83c 	bl	81013b8 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100340:	4b0f      	ldr	r3, [pc, #60]	; (8100380 <main+0x78>)
 8100342:	681b      	ldr	r3, [r3, #0]
 8100344:	091b      	lsrs	r3, r3, #4
 8100346:	f003 030f 	and.w	r3, r3, #15
 810034a:	2b07      	cmp	r3, #7
 810034c:	d108      	bne.n	8100360 <main+0x58>
 810034e:	4b0d      	ldr	r3, [pc, #52]	; (8100384 <main+0x7c>)
 8100350:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100354:	4a0b      	ldr	r2, [pc, #44]	; (8100384 <main+0x7c>)
 8100356:	f043 0301 	orr.w	r3, r3, #1
 810035a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810035e:	e007      	b.n	8100370 <main+0x68>
 8100360:	4b08      	ldr	r3, [pc, #32]	; (8100384 <main+0x7c>)
 8100362:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100366:	4a07      	ldr	r2, [pc, #28]	; (8100384 <main+0x7c>)
 8100368:	f043 0301 	orr.w	r3, r3, #1
 810036c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100370:	f000 f8ce 	bl	8100510 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 8100374:	f000 f808 	bl	8100388 <MX_DMA_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8100378:	e7fe      	b.n	8100378 <main+0x70>
 810037a:	bf00      	nop
 810037c:	58024400 	.word	0x58024400
 8100380:	e000ed00 	.word	0xe000ed00
 8100384:	58026400 	.word	0x58026400

08100388 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 8100388:	b580      	push	{r7, lr}
 810038a:	b082      	sub	sp, #8
 810038c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 810038e:	4b23      	ldr	r3, [pc, #140]	; (810041c <MX_DMA_Init+0x94>)
 8100390:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100394:	4a21      	ldr	r2, [pc, #132]	; (810041c <MX_DMA_Init+0x94>)
 8100396:	f043 0302 	orr.w	r3, r3, #2
 810039a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810039e:	4b1f      	ldr	r3, [pc, #124]	; (810041c <MX_DMA_Init+0x94>)
 81003a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81003a4:	f003 0302 	and.w	r3, r3, #2
 81003a8:	607b      	str	r3, [r7, #4]
 81003aa:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 81003ac:	4b1c      	ldr	r3, [pc, #112]	; (8100420 <MX_DMA_Init+0x98>)
 81003ae:	4a1d      	ldr	r2, [pc, #116]	; (8100424 <MX_DMA_Init+0x9c>)
 81003b0:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Request = DMA_REQUEST_MEM2MEM;
 81003b2:	4b1b      	ldr	r3, [pc, #108]	; (8100420 <MX_DMA_Init+0x98>)
 81003b4:	2200      	movs	r2, #0
 81003b6:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 81003b8:	4b19      	ldr	r3, [pc, #100]	; (8100420 <MX_DMA_Init+0x98>)
 81003ba:	2280      	movs	r2, #128	; 0x80
 81003bc:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 81003be:	4b18      	ldr	r3, [pc, #96]	; (8100420 <MX_DMA_Init+0x98>)
 81003c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 81003c4:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 81003c6:	4b16      	ldr	r3, [pc, #88]	; (8100420 <MX_DMA_Init+0x98>)
 81003c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81003cc:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 81003ce:	4b14      	ldr	r3, [pc, #80]	; (8100420 <MX_DMA_Init+0x98>)
 81003d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 81003d4:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 81003d6:	4b12      	ldr	r3, [pc, #72]	; (8100420 <MX_DMA_Init+0x98>)
 81003d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 81003dc:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 81003de:	4b10      	ldr	r3, [pc, #64]	; (8100420 <MX_DMA_Init+0x98>)
 81003e0:	2200      	movs	r2, #0
 81003e2:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_HIGH;
 81003e4:	4b0e      	ldr	r3, [pc, #56]	; (8100420 <MX_DMA_Init+0x98>)
 81003e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 81003ea:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 81003ec:	4b0c      	ldr	r3, [pc, #48]	; (8100420 <MX_DMA_Init+0x98>)
 81003ee:	2204      	movs	r2, #4
 81003f0:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 81003f2:	4b0b      	ldr	r3, [pc, #44]	; (8100420 <MX_DMA_Init+0x98>)
 81003f4:	2203      	movs	r2, #3
 81003f6:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 81003f8:	4b09      	ldr	r3, [pc, #36]	; (8100420 <MX_DMA_Init+0x98>)
 81003fa:	2200      	movs	r2, #0
 81003fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 81003fe:	4b08      	ldr	r3, [pc, #32]	; (8100420 <MX_DMA_Init+0x98>)
 8100400:	2200      	movs	r2, #0
 8100402:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8100404:	4806      	ldr	r0, [pc, #24]	; (8100420 <MX_DMA_Init+0x98>)
 8100406:	f000 fa2f 	bl	8100868 <HAL_DMA_Init>
 810040a:	4603      	mov	r3, r0
 810040c:	2b00      	cmp	r3, #0
 810040e:	d001      	beq.n	8100414 <MX_DMA_Init+0x8c>
  {
    Error_Handler( );
 8100410:	f000 f80a 	bl	8100428 <Error_Handler>
  }

}
 8100414:	bf00      	nop
 8100416:	3708      	adds	r7, #8
 8100418:	46bd      	mov	sp, r7
 810041a:	bd80      	pop	{r7, pc}
 810041c:	58024400 	.word	0x58024400
 8100420:	1000002c 	.word	0x1000002c
 8100424:	40020410 	.word	0x40020410

08100428 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100428:	b480      	push	{r7}
 810042a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 810042c:	b672      	cpsid	i
}
 810042e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8100430:	e7fe      	b.n	8100430 <Error_Handler+0x8>
	...

08100434 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100434:	b480      	push	{r7}
 8100436:	b083      	sub	sp, #12
 8100438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810043a:	4b0a      	ldr	r3, [pc, #40]	; (8100464 <HAL_MspInit+0x30>)
 810043c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100440:	4a08      	ldr	r2, [pc, #32]	; (8100464 <HAL_MspInit+0x30>)
 8100442:	f043 0302 	orr.w	r3, r3, #2
 8100446:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810044a:	4b06      	ldr	r3, [pc, #24]	; (8100464 <HAL_MspInit+0x30>)
 810044c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100450:	f003 0302 	and.w	r3, r3, #2
 8100454:	607b      	str	r3, [r7, #4]
 8100456:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100458:	bf00      	nop
 810045a:	370c      	adds	r7, #12
 810045c:	46bd      	mov	sp, r7
 810045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100462:	4770      	bx	lr
 8100464:	58024400 	.word	0x58024400

08100468 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100468:	b480      	push	{r7}
 810046a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 810046c:	e7fe      	b.n	810046c <NMI_Handler+0x4>

0810046e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810046e:	b480      	push	{r7}
 8100470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100472:	e7fe      	b.n	8100472 <HardFault_Handler+0x4>

08100474 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100474:	b480      	push	{r7}
 8100476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100478:	e7fe      	b.n	8100478 <MemManage_Handler+0x4>

0810047a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810047a:	b480      	push	{r7}
 810047c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810047e:	e7fe      	b.n	810047e <BusFault_Handler+0x4>

08100480 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100480:	b480      	push	{r7}
 8100482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100484:	e7fe      	b.n	8100484 <UsageFault_Handler+0x4>

08100486 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8100486:	b480      	push	{r7}
 8100488:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810048a:	bf00      	nop
 810048c:	46bd      	mov	sp, r7
 810048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100492:	4770      	bx	lr

08100494 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100494:	b480      	push	{r7}
 8100496:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8100498:	bf00      	nop
 810049a:	46bd      	mov	sp, r7
 810049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81004a0:	4770      	bx	lr

081004a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81004a2:	b480      	push	{r7}
 81004a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81004a6:	bf00      	nop
 81004a8:	46bd      	mov	sp, r7
 81004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81004ae:	4770      	bx	lr

081004b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81004b0:	b580      	push	{r7, lr}
 81004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81004b4:	f000 f8c0 	bl	8100638 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81004b8:	bf00      	nop
 81004ba:	bd80      	pop	{r7, pc}

081004bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81004bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 81004f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81004c0:	f7ff ff0a 	bl	81002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81004c4:	480c      	ldr	r0, [pc, #48]	; (81004f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81004c6:	490d      	ldr	r1, [pc, #52]	; (81004fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81004c8:	4a0d      	ldr	r2, [pc, #52]	; (8100500 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81004ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81004cc:	e002      	b.n	81004d4 <LoopCopyDataInit>

081004ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81004ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81004d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81004d2:	3304      	adds	r3, #4

081004d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81004d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81004d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81004d8:	d3f9      	bcc.n	81004ce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81004da:	4a0a      	ldr	r2, [pc, #40]	; (8100504 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81004dc:	4c0a      	ldr	r4, [pc, #40]	; (8100508 <LoopFillZerobss+0x22>)
  movs r3, #0
 81004de:	2300      	movs	r3, #0
  b LoopFillZerobss
 81004e0:	e001      	b.n	81004e6 <LoopFillZerobss>

081004e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81004e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81004e4:	3204      	adds	r2, #4

081004e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81004e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81004e8:	d3fb      	bcc.n	81004e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81004ea:	f001 f967 	bl	81017bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81004ee:	f7ff ff0b 	bl	8100308 <main>
  bx  lr
 81004f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81004f4:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81004f8:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81004fc:	10000010 	.word	0x10000010
  ldr r2, =_sidata
 8100500:	0810183c 	.word	0x0810183c
  ldr r2, =_sbss
 8100504:	10000010 	.word	0x10000010
  ldr r4, =_ebss
 8100508:	100000a8 	.word	0x100000a8

0810050c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 810050c:	e7fe      	b.n	810050c <ADC3_IRQHandler>
	...

08100510 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100510:	b580      	push	{r7, lr}
 8100512:	b082      	sub	sp, #8
 8100514:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8100516:	4b28      	ldr	r3, [pc, #160]	; (81005b8 <HAL_Init+0xa8>)
 8100518:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810051c:	4a26      	ldr	r2, [pc, #152]	; (81005b8 <HAL_Init+0xa8>)
 810051e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8100522:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100526:	4b24      	ldr	r3, [pc, #144]	; (81005b8 <HAL_Init+0xa8>)
 8100528:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810052c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8100530:	603b      	str	r3, [r7, #0]
 8100532:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100534:	4b21      	ldr	r3, [pc, #132]	; (81005bc <HAL_Init+0xac>)
 8100536:	681b      	ldr	r3, [r3, #0]
 8100538:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 810053c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8100540:	4a1e      	ldr	r2, [pc, #120]	; (81005bc <HAL_Init+0xac>)
 8100542:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8100546:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8100548:	4b1c      	ldr	r3, [pc, #112]	; (81005bc <HAL_Init+0xac>)
 810054a:	681b      	ldr	r3, [r3, #0]
 810054c:	4a1b      	ldr	r2, [pc, #108]	; (81005bc <HAL_Init+0xac>)
 810054e:	f043 0301 	orr.w	r3, r3, #1
 8100552:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100554:	2003      	movs	r0, #3
 8100556:	f000 f941 	bl	81007dc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810055a:	f000 ffb5 	bl	81014c8 <HAL_RCC_GetSysClockFreq>
 810055e:	4602      	mov	r2, r0
 8100560:	4b15      	ldr	r3, [pc, #84]	; (81005b8 <HAL_Init+0xa8>)
 8100562:	699b      	ldr	r3, [r3, #24]
 8100564:	0a1b      	lsrs	r3, r3, #8
 8100566:	f003 030f 	and.w	r3, r3, #15
 810056a:	4915      	ldr	r1, [pc, #84]	; (81005c0 <HAL_Init+0xb0>)
 810056c:	5ccb      	ldrb	r3, [r1, r3]
 810056e:	f003 031f 	and.w	r3, r3, #31
 8100572:	fa22 f303 	lsr.w	r3, r2, r3
 8100576:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100578:	4b0f      	ldr	r3, [pc, #60]	; (81005b8 <HAL_Init+0xa8>)
 810057a:	699b      	ldr	r3, [r3, #24]
 810057c:	f003 030f 	and.w	r3, r3, #15
 8100580:	4a0f      	ldr	r2, [pc, #60]	; (81005c0 <HAL_Init+0xb0>)
 8100582:	5cd3      	ldrb	r3, [r2, r3]
 8100584:	f003 031f 	and.w	r3, r3, #31
 8100588:	687a      	ldr	r2, [r7, #4]
 810058a:	fa22 f303 	lsr.w	r3, r2, r3
 810058e:	4a0d      	ldr	r2, [pc, #52]	; (81005c4 <HAL_Init+0xb4>)
 8100590:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8100592:	4b0c      	ldr	r3, [pc, #48]	; (81005c4 <HAL_Init+0xb4>)
 8100594:	681b      	ldr	r3, [r3, #0]
 8100596:	4a0c      	ldr	r2, [pc, #48]	; (81005c8 <HAL_Init+0xb8>)
 8100598:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810059a:	2000      	movs	r0, #0
 810059c:	f000 f816 	bl	81005cc <HAL_InitTick>
 81005a0:	4603      	mov	r3, r0
 81005a2:	2b00      	cmp	r3, #0
 81005a4:	d001      	beq.n	81005aa <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81005a6:	2301      	movs	r3, #1
 81005a8:	e002      	b.n	81005b0 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81005aa:	f7ff ff43 	bl	8100434 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81005ae:	2300      	movs	r3, #0
}
 81005b0:	4618      	mov	r0, r3
 81005b2:	3708      	adds	r7, #8
 81005b4:	46bd      	mov	sp, r7
 81005b6:	bd80      	pop	{r7, pc}
 81005b8:	58024400 	.word	0x58024400
 81005bc:	40024400 	.word	0x40024400
 81005c0:	0810181c 	.word	0x0810181c
 81005c4:	10000004 	.word	0x10000004
 81005c8:	10000000 	.word	0x10000000

081005cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81005cc:	b580      	push	{r7, lr}
 81005ce:	b082      	sub	sp, #8
 81005d0:	af00      	add	r7, sp, #0
 81005d2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81005d4:	4b15      	ldr	r3, [pc, #84]	; (810062c <HAL_InitTick+0x60>)
 81005d6:	781b      	ldrb	r3, [r3, #0]
 81005d8:	2b00      	cmp	r3, #0
 81005da:	d101      	bne.n	81005e0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 81005dc:	2301      	movs	r3, #1
 81005de:	e021      	b.n	8100624 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 81005e0:	4b13      	ldr	r3, [pc, #76]	; (8100630 <HAL_InitTick+0x64>)
 81005e2:	681a      	ldr	r2, [r3, #0]
 81005e4:	4b11      	ldr	r3, [pc, #68]	; (810062c <HAL_InitTick+0x60>)
 81005e6:	781b      	ldrb	r3, [r3, #0]
 81005e8:	4619      	mov	r1, r3
 81005ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81005ee:	fbb3 f3f1 	udiv	r3, r3, r1
 81005f2:	fbb2 f3f3 	udiv	r3, r2, r3
 81005f6:	4618      	mov	r0, r3
 81005f8:	f000 f915 	bl	8100826 <HAL_SYSTICK_Config>
 81005fc:	4603      	mov	r3, r0
 81005fe:	2b00      	cmp	r3, #0
 8100600:	d001      	beq.n	8100606 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8100602:	2301      	movs	r3, #1
 8100604:	e00e      	b.n	8100624 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100606:	687b      	ldr	r3, [r7, #4]
 8100608:	2b0f      	cmp	r3, #15
 810060a:	d80a      	bhi.n	8100622 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 810060c:	2200      	movs	r2, #0
 810060e:	6879      	ldr	r1, [r7, #4]
 8100610:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8100614:	f000 f8ed 	bl	81007f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8100618:	4a06      	ldr	r2, [pc, #24]	; (8100634 <HAL_InitTick+0x68>)
 810061a:	687b      	ldr	r3, [r7, #4]
 810061c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 810061e:	2300      	movs	r3, #0
 8100620:	e000      	b.n	8100624 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8100622:	2301      	movs	r3, #1
}
 8100624:	4618      	mov	r0, r3
 8100626:	3708      	adds	r7, #8
 8100628:	46bd      	mov	sp, r7
 810062a:	bd80      	pop	{r7, pc}
 810062c:	1000000c 	.word	0x1000000c
 8100630:	10000000 	.word	0x10000000
 8100634:	10000008 	.word	0x10000008

08100638 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100638:	b480      	push	{r7}
 810063a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 810063c:	4b06      	ldr	r3, [pc, #24]	; (8100658 <HAL_IncTick+0x20>)
 810063e:	781b      	ldrb	r3, [r3, #0]
 8100640:	461a      	mov	r2, r3
 8100642:	4b06      	ldr	r3, [pc, #24]	; (810065c <HAL_IncTick+0x24>)
 8100644:	681b      	ldr	r3, [r3, #0]
 8100646:	4413      	add	r3, r2
 8100648:	4a04      	ldr	r2, [pc, #16]	; (810065c <HAL_IncTick+0x24>)
 810064a:	6013      	str	r3, [r2, #0]
}
 810064c:	bf00      	nop
 810064e:	46bd      	mov	sp, r7
 8100650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100654:	4770      	bx	lr
 8100656:	bf00      	nop
 8100658:	1000000c 	.word	0x1000000c
 810065c:	100000a4 	.word	0x100000a4

08100660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8100660:	b480      	push	{r7}
 8100662:	af00      	add	r7, sp, #0
  return uwTick;
 8100664:	4b03      	ldr	r3, [pc, #12]	; (8100674 <HAL_GetTick+0x14>)
 8100666:	681b      	ldr	r3, [r3, #0]
}
 8100668:	4618      	mov	r0, r3
 810066a:	46bd      	mov	sp, r7
 810066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100670:	4770      	bx	lr
 8100672:	bf00      	nop
 8100674:	100000a4 	.word	0x100000a4

08100678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100678:	b480      	push	{r7}
 810067a:	b085      	sub	sp, #20
 810067c:	af00      	add	r7, sp, #0
 810067e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8100680:	687b      	ldr	r3, [r7, #4]
 8100682:	f003 0307 	and.w	r3, r3, #7
 8100686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100688:	4b0c      	ldr	r3, [pc, #48]	; (81006bc <__NVIC_SetPriorityGrouping+0x44>)
 810068a:	68db      	ldr	r3, [r3, #12]
 810068c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810068e:	68ba      	ldr	r2, [r7, #8]
 8100690:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8100694:	4013      	ands	r3, r2
 8100696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100698:	68fb      	ldr	r3, [r7, #12]
 810069a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 810069c:	68bb      	ldr	r3, [r7, #8]
 810069e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81006a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 81006a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81006a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81006aa:	4a04      	ldr	r2, [pc, #16]	; (81006bc <__NVIC_SetPriorityGrouping+0x44>)
 81006ac:	68bb      	ldr	r3, [r7, #8]
 81006ae:	60d3      	str	r3, [r2, #12]
}
 81006b0:	bf00      	nop
 81006b2:	3714      	adds	r7, #20
 81006b4:	46bd      	mov	sp, r7
 81006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006ba:	4770      	bx	lr
 81006bc:	e000ed00 	.word	0xe000ed00

081006c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81006c0:	b480      	push	{r7}
 81006c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81006c4:	4b04      	ldr	r3, [pc, #16]	; (81006d8 <__NVIC_GetPriorityGrouping+0x18>)
 81006c6:	68db      	ldr	r3, [r3, #12]
 81006c8:	0a1b      	lsrs	r3, r3, #8
 81006ca:	f003 0307 	and.w	r3, r3, #7
}
 81006ce:	4618      	mov	r0, r3
 81006d0:	46bd      	mov	sp, r7
 81006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006d6:	4770      	bx	lr
 81006d8:	e000ed00 	.word	0xe000ed00

081006dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81006dc:	b480      	push	{r7}
 81006de:	b083      	sub	sp, #12
 81006e0:	af00      	add	r7, sp, #0
 81006e2:	4603      	mov	r3, r0
 81006e4:	6039      	str	r1, [r7, #0]
 81006e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81006e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81006ec:	2b00      	cmp	r3, #0
 81006ee:	db0a      	blt.n	8100706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81006f0:	683b      	ldr	r3, [r7, #0]
 81006f2:	b2da      	uxtb	r2, r3
 81006f4:	490c      	ldr	r1, [pc, #48]	; (8100728 <__NVIC_SetPriority+0x4c>)
 81006f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81006fa:	0112      	lsls	r2, r2, #4
 81006fc:	b2d2      	uxtb	r2, r2
 81006fe:	440b      	add	r3, r1
 8100700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8100704:	e00a      	b.n	810071c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100706:	683b      	ldr	r3, [r7, #0]
 8100708:	b2da      	uxtb	r2, r3
 810070a:	4908      	ldr	r1, [pc, #32]	; (810072c <__NVIC_SetPriority+0x50>)
 810070c:	88fb      	ldrh	r3, [r7, #6]
 810070e:	f003 030f 	and.w	r3, r3, #15
 8100712:	3b04      	subs	r3, #4
 8100714:	0112      	lsls	r2, r2, #4
 8100716:	b2d2      	uxtb	r2, r2
 8100718:	440b      	add	r3, r1
 810071a:	761a      	strb	r2, [r3, #24]
}
 810071c:	bf00      	nop
 810071e:	370c      	adds	r7, #12
 8100720:	46bd      	mov	sp, r7
 8100722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100726:	4770      	bx	lr
 8100728:	e000e100 	.word	0xe000e100
 810072c:	e000ed00 	.word	0xe000ed00

08100730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100730:	b480      	push	{r7}
 8100732:	b089      	sub	sp, #36	; 0x24
 8100734:	af00      	add	r7, sp, #0
 8100736:	60f8      	str	r0, [r7, #12]
 8100738:	60b9      	str	r1, [r7, #8]
 810073a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 810073c:	68fb      	ldr	r3, [r7, #12]
 810073e:	f003 0307 	and.w	r3, r3, #7
 8100742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100744:	69fb      	ldr	r3, [r7, #28]
 8100746:	f1c3 0307 	rsb	r3, r3, #7
 810074a:	2b04      	cmp	r3, #4
 810074c:	bf28      	it	cs
 810074e:	2304      	movcs	r3, #4
 8100750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8100752:	69fb      	ldr	r3, [r7, #28]
 8100754:	3304      	adds	r3, #4
 8100756:	2b06      	cmp	r3, #6
 8100758:	d902      	bls.n	8100760 <NVIC_EncodePriority+0x30>
 810075a:	69fb      	ldr	r3, [r7, #28]
 810075c:	3b03      	subs	r3, #3
 810075e:	e000      	b.n	8100762 <NVIC_EncodePriority+0x32>
 8100760:	2300      	movs	r3, #0
 8100762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100764:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8100768:	69bb      	ldr	r3, [r7, #24]
 810076a:	fa02 f303 	lsl.w	r3, r2, r3
 810076e:	43da      	mvns	r2, r3
 8100770:	68bb      	ldr	r3, [r7, #8]
 8100772:	401a      	ands	r2, r3
 8100774:	697b      	ldr	r3, [r7, #20]
 8100776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100778:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 810077c:	697b      	ldr	r3, [r7, #20]
 810077e:	fa01 f303 	lsl.w	r3, r1, r3
 8100782:	43d9      	mvns	r1, r3
 8100784:	687b      	ldr	r3, [r7, #4]
 8100786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100788:	4313      	orrs	r3, r2
         );
}
 810078a:	4618      	mov	r0, r3
 810078c:	3724      	adds	r7, #36	; 0x24
 810078e:	46bd      	mov	sp, r7
 8100790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100794:	4770      	bx	lr
	...

08100798 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8100798:	b580      	push	{r7, lr}
 810079a:	b082      	sub	sp, #8
 810079c:	af00      	add	r7, sp, #0
 810079e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 81007a0:	687b      	ldr	r3, [r7, #4]
 81007a2:	3b01      	subs	r3, #1
 81007a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81007a8:	d301      	bcc.n	81007ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 81007aa:	2301      	movs	r3, #1
 81007ac:	e00f      	b.n	81007ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81007ae:	4a0a      	ldr	r2, [pc, #40]	; (81007d8 <SysTick_Config+0x40>)
 81007b0:	687b      	ldr	r3, [r7, #4]
 81007b2:	3b01      	subs	r3, #1
 81007b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 81007b6:	210f      	movs	r1, #15
 81007b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 81007bc:	f7ff ff8e 	bl	81006dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 81007c0:	4b05      	ldr	r3, [pc, #20]	; (81007d8 <SysTick_Config+0x40>)
 81007c2:	2200      	movs	r2, #0
 81007c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 81007c6:	4b04      	ldr	r3, [pc, #16]	; (81007d8 <SysTick_Config+0x40>)
 81007c8:	2207      	movs	r2, #7
 81007ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 81007cc:	2300      	movs	r3, #0
}
 81007ce:	4618      	mov	r0, r3
 81007d0:	3708      	adds	r7, #8
 81007d2:	46bd      	mov	sp, r7
 81007d4:	bd80      	pop	{r7, pc}
 81007d6:	bf00      	nop
 81007d8:	e000e010 	.word	0xe000e010

081007dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81007dc:	b580      	push	{r7, lr}
 81007de:	b082      	sub	sp, #8
 81007e0:	af00      	add	r7, sp, #0
 81007e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81007e4:	6878      	ldr	r0, [r7, #4]
 81007e6:	f7ff ff47 	bl	8100678 <__NVIC_SetPriorityGrouping>
}
 81007ea:	bf00      	nop
 81007ec:	3708      	adds	r7, #8
 81007ee:	46bd      	mov	sp, r7
 81007f0:	bd80      	pop	{r7, pc}

081007f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81007f2:	b580      	push	{r7, lr}
 81007f4:	b086      	sub	sp, #24
 81007f6:	af00      	add	r7, sp, #0
 81007f8:	4603      	mov	r3, r0
 81007fa:	60b9      	str	r1, [r7, #8]
 81007fc:	607a      	str	r2, [r7, #4]
 81007fe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8100800:	f7ff ff5e 	bl	81006c0 <__NVIC_GetPriorityGrouping>
 8100804:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8100806:	687a      	ldr	r2, [r7, #4]
 8100808:	68b9      	ldr	r1, [r7, #8]
 810080a:	6978      	ldr	r0, [r7, #20]
 810080c:	f7ff ff90 	bl	8100730 <NVIC_EncodePriority>
 8100810:	4602      	mov	r2, r0
 8100812:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100816:	4611      	mov	r1, r2
 8100818:	4618      	mov	r0, r3
 810081a:	f7ff ff5f 	bl	81006dc <__NVIC_SetPriority>
}
 810081e:	bf00      	nop
 8100820:	3718      	adds	r7, #24
 8100822:	46bd      	mov	sp, r7
 8100824:	bd80      	pop	{r7, pc}

08100826 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8100826:	b580      	push	{r7, lr}
 8100828:	b082      	sub	sp, #8
 810082a:	af00      	add	r7, sp, #0
 810082c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 810082e:	6878      	ldr	r0, [r7, #4]
 8100830:	f7ff ffb2 	bl	8100798 <SysTick_Config>
 8100834:	4603      	mov	r3, r0
}
 8100836:	4618      	mov	r0, r3
 8100838:	3708      	adds	r7, #8
 810083a:	46bd      	mov	sp, r7
 810083c:	bd80      	pop	{r7, pc}
	...

08100840 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8100840:	b480      	push	{r7}
 8100842:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8100844:	4b07      	ldr	r3, [pc, #28]	; (8100864 <HAL_GetCurrentCPUID+0x24>)
 8100846:	681b      	ldr	r3, [r3, #0]
 8100848:	091b      	lsrs	r3, r3, #4
 810084a:	f003 030f 	and.w	r3, r3, #15
 810084e:	2b07      	cmp	r3, #7
 8100850:	d101      	bne.n	8100856 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8100852:	2303      	movs	r3, #3
 8100854:	e000      	b.n	8100858 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8100856:	2301      	movs	r3, #1
  }
}
 8100858:	4618      	mov	r0, r3
 810085a:	46bd      	mov	sp, r7
 810085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100860:	4770      	bx	lr
 8100862:	bf00      	nop
 8100864:	e000ed00 	.word	0xe000ed00

08100868 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8100868:	b580      	push	{r7, lr}
 810086a:	b086      	sub	sp, #24
 810086c:	af00      	add	r7, sp, #0
 810086e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8100870:	f7ff fef6 	bl	8100660 <HAL_GetTick>
 8100874:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8100876:	687b      	ldr	r3, [r7, #4]
 8100878:	2b00      	cmp	r3, #0
 810087a:	d101      	bne.n	8100880 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 810087c:	2301      	movs	r3, #1
 810087e:	e314      	b.n	8100eaa <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8100880:	687b      	ldr	r3, [r7, #4]
 8100882:	681b      	ldr	r3, [r3, #0]
 8100884:	4a66      	ldr	r2, [pc, #408]	; (8100a20 <HAL_DMA_Init+0x1b8>)
 8100886:	4293      	cmp	r3, r2
 8100888:	d04a      	beq.n	8100920 <HAL_DMA_Init+0xb8>
 810088a:	687b      	ldr	r3, [r7, #4]
 810088c:	681b      	ldr	r3, [r3, #0]
 810088e:	4a65      	ldr	r2, [pc, #404]	; (8100a24 <HAL_DMA_Init+0x1bc>)
 8100890:	4293      	cmp	r3, r2
 8100892:	d045      	beq.n	8100920 <HAL_DMA_Init+0xb8>
 8100894:	687b      	ldr	r3, [r7, #4]
 8100896:	681b      	ldr	r3, [r3, #0]
 8100898:	4a63      	ldr	r2, [pc, #396]	; (8100a28 <HAL_DMA_Init+0x1c0>)
 810089a:	4293      	cmp	r3, r2
 810089c:	d040      	beq.n	8100920 <HAL_DMA_Init+0xb8>
 810089e:	687b      	ldr	r3, [r7, #4]
 81008a0:	681b      	ldr	r3, [r3, #0]
 81008a2:	4a62      	ldr	r2, [pc, #392]	; (8100a2c <HAL_DMA_Init+0x1c4>)
 81008a4:	4293      	cmp	r3, r2
 81008a6:	d03b      	beq.n	8100920 <HAL_DMA_Init+0xb8>
 81008a8:	687b      	ldr	r3, [r7, #4]
 81008aa:	681b      	ldr	r3, [r3, #0]
 81008ac:	4a60      	ldr	r2, [pc, #384]	; (8100a30 <HAL_DMA_Init+0x1c8>)
 81008ae:	4293      	cmp	r3, r2
 81008b0:	d036      	beq.n	8100920 <HAL_DMA_Init+0xb8>
 81008b2:	687b      	ldr	r3, [r7, #4]
 81008b4:	681b      	ldr	r3, [r3, #0]
 81008b6:	4a5f      	ldr	r2, [pc, #380]	; (8100a34 <HAL_DMA_Init+0x1cc>)
 81008b8:	4293      	cmp	r3, r2
 81008ba:	d031      	beq.n	8100920 <HAL_DMA_Init+0xb8>
 81008bc:	687b      	ldr	r3, [r7, #4]
 81008be:	681b      	ldr	r3, [r3, #0]
 81008c0:	4a5d      	ldr	r2, [pc, #372]	; (8100a38 <HAL_DMA_Init+0x1d0>)
 81008c2:	4293      	cmp	r3, r2
 81008c4:	d02c      	beq.n	8100920 <HAL_DMA_Init+0xb8>
 81008c6:	687b      	ldr	r3, [r7, #4]
 81008c8:	681b      	ldr	r3, [r3, #0]
 81008ca:	4a5c      	ldr	r2, [pc, #368]	; (8100a3c <HAL_DMA_Init+0x1d4>)
 81008cc:	4293      	cmp	r3, r2
 81008ce:	d027      	beq.n	8100920 <HAL_DMA_Init+0xb8>
 81008d0:	687b      	ldr	r3, [r7, #4]
 81008d2:	681b      	ldr	r3, [r3, #0]
 81008d4:	4a5a      	ldr	r2, [pc, #360]	; (8100a40 <HAL_DMA_Init+0x1d8>)
 81008d6:	4293      	cmp	r3, r2
 81008d8:	d022      	beq.n	8100920 <HAL_DMA_Init+0xb8>
 81008da:	687b      	ldr	r3, [r7, #4]
 81008dc:	681b      	ldr	r3, [r3, #0]
 81008de:	4a59      	ldr	r2, [pc, #356]	; (8100a44 <HAL_DMA_Init+0x1dc>)
 81008e0:	4293      	cmp	r3, r2
 81008e2:	d01d      	beq.n	8100920 <HAL_DMA_Init+0xb8>
 81008e4:	687b      	ldr	r3, [r7, #4]
 81008e6:	681b      	ldr	r3, [r3, #0]
 81008e8:	4a57      	ldr	r2, [pc, #348]	; (8100a48 <HAL_DMA_Init+0x1e0>)
 81008ea:	4293      	cmp	r3, r2
 81008ec:	d018      	beq.n	8100920 <HAL_DMA_Init+0xb8>
 81008ee:	687b      	ldr	r3, [r7, #4]
 81008f0:	681b      	ldr	r3, [r3, #0]
 81008f2:	4a56      	ldr	r2, [pc, #344]	; (8100a4c <HAL_DMA_Init+0x1e4>)
 81008f4:	4293      	cmp	r3, r2
 81008f6:	d013      	beq.n	8100920 <HAL_DMA_Init+0xb8>
 81008f8:	687b      	ldr	r3, [r7, #4]
 81008fa:	681b      	ldr	r3, [r3, #0]
 81008fc:	4a54      	ldr	r2, [pc, #336]	; (8100a50 <HAL_DMA_Init+0x1e8>)
 81008fe:	4293      	cmp	r3, r2
 8100900:	d00e      	beq.n	8100920 <HAL_DMA_Init+0xb8>
 8100902:	687b      	ldr	r3, [r7, #4]
 8100904:	681b      	ldr	r3, [r3, #0]
 8100906:	4a53      	ldr	r2, [pc, #332]	; (8100a54 <HAL_DMA_Init+0x1ec>)
 8100908:	4293      	cmp	r3, r2
 810090a:	d009      	beq.n	8100920 <HAL_DMA_Init+0xb8>
 810090c:	687b      	ldr	r3, [r7, #4]
 810090e:	681b      	ldr	r3, [r3, #0]
 8100910:	4a51      	ldr	r2, [pc, #324]	; (8100a58 <HAL_DMA_Init+0x1f0>)
 8100912:	4293      	cmp	r3, r2
 8100914:	d004      	beq.n	8100920 <HAL_DMA_Init+0xb8>
 8100916:	687b      	ldr	r3, [r7, #4]
 8100918:	681b      	ldr	r3, [r3, #0]
 810091a:	4a50      	ldr	r2, [pc, #320]	; (8100a5c <HAL_DMA_Init+0x1f4>)
 810091c:	4293      	cmp	r3, r2
 810091e:	d101      	bne.n	8100924 <HAL_DMA_Init+0xbc>
 8100920:	2301      	movs	r3, #1
 8100922:	e000      	b.n	8100926 <HAL_DMA_Init+0xbe>
 8100924:	2300      	movs	r3, #0
 8100926:	2b00      	cmp	r3, #0
 8100928:	f000 813b 	beq.w	8100ba2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 810092c:	687b      	ldr	r3, [r7, #4]
 810092e:	2202      	movs	r2, #2
 8100930:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8100934:	687b      	ldr	r3, [r7, #4]
 8100936:	2200      	movs	r2, #0
 8100938:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 810093c:	687b      	ldr	r3, [r7, #4]
 810093e:	681b      	ldr	r3, [r3, #0]
 8100940:	4a37      	ldr	r2, [pc, #220]	; (8100a20 <HAL_DMA_Init+0x1b8>)
 8100942:	4293      	cmp	r3, r2
 8100944:	d04a      	beq.n	81009dc <HAL_DMA_Init+0x174>
 8100946:	687b      	ldr	r3, [r7, #4]
 8100948:	681b      	ldr	r3, [r3, #0]
 810094a:	4a36      	ldr	r2, [pc, #216]	; (8100a24 <HAL_DMA_Init+0x1bc>)
 810094c:	4293      	cmp	r3, r2
 810094e:	d045      	beq.n	81009dc <HAL_DMA_Init+0x174>
 8100950:	687b      	ldr	r3, [r7, #4]
 8100952:	681b      	ldr	r3, [r3, #0]
 8100954:	4a34      	ldr	r2, [pc, #208]	; (8100a28 <HAL_DMA_Init+0x1c0>)
 8100956:	4293      	cmp	r3, r2
 8100958:	d040      	beq.n	81009dc <HAL_DMA_Init+0x174>
 810095a:	687b      	ldr	r3, [r7, #4]
 810095c:	681b      	ldr	r3, [r3, #0]
 810095e:	4a33      	ldr	r2, [pc, #204]	; (8100a2c <HAL_DMA_Init+0x1c4>)
 8100960:	4293      	cmp	r3, r2
 8100962:	d03b      	beq.n	81009dc <HAL_DMA_Init+0x174>
 8100964:	687b      	ldr	r3, [r7, #4]
 8100966:	681b      	ldr	r3, [r3, #0]
 8100968:	4a31      	ldr	r2, [pc, #196]	; (8100a30 <HAL_DMA_Init+0x1c8>)
 810096a:	4293      	cmp	r3, r2
 810096c:	d036      	beq.n	81009dc <HAL_DMA_Init+0x174>
 810096e:	687b      	ldr	r3, [r7, #4]
 8100970:	681b      	ldr	r3, [r3, #0]
 8100972:	4a30      	ldr	r2, [pc, #192]	; (8100a34 <HAL_DMA_Init+0x1cc>)
 8100974:	4293      	cmp	r3, r2
 8100976:	d031      	beq.n	81009dc <HAL_DMA_Init+0x174>
 8100978:	687b      	ldr	r3, [r7, #4]
 810097a:	681b      	ldr	r3, [r3, #0]
 810097c:	4a2e      	ldr	r2, [pc, #184]	; (8100a38 <HAL_DMA_Init+0x1d0>)
 810097e:	4293      	cmp	r3, r2
 8100980:	d02c      	beq.n	81009dc <HAL_DMA_Init+0x174>
 8100982:	687b      	ldr	r3, [r7, #4]
 8100984:	681b      	ldr	r3, [r3, #0]
 8100986:	4a2d      	ldr	r2, [pc, #180]	; (8100a3c <HAL_DMA_Init+0x1d4>)
 8100988:	4293      	cmp	r3, r2
 810098a:	d027      	beq.n	81009dc <HAL_DMA_Init+0x174>
 810098c:	687b      	ldr	r3, [r7, #4]
 810098e:	681b      	ldr	r3, [r3, #0]
 8100990:	4a2b      	ldr	r2, [pc, #172]	; (8100a40 <HAL_DMA_Init+0x1d8>)
 8100992:	4293      	cmp	r3, r2
 8100994:	d022      	beq.n	81009dc <HAL_DMA_Init+0x174>
 8100996:	687b      	ldr	r3, [r7, #4]
 8100998:	681b      	ldr	r3, [r3, #0]
 810099a:	4a2a      	ldr	r2, [pc, #168]	; (8100a44 <HAL_DMA_Init+0x1dc>)
 810099c:	4293      	cmp	r3, r2
 810099e:	d01d      	beq.n	81009dc <HAL_DMA_Init+0x174>
 81009a0:	687b      	ldr	r3, [r7, #4]
 81009a2:	681b      	ldr	r3, [r3, #0]
 81009a4:	4a28      	ldr	r2, [pc, #160]	; (8100a48 <HAL_DMA_Init+0x1e0>)
 81009a6:	4293      	cmp	r3, r2
 81009a8:	d018      	beq.n	81009dc <HAL_DMA_Init+0x174>
 81009aa:	687b      	ldr	r3, [r7, #4]
 81009ac:	681b      	ldr	r3, [r3, #0]
 81009ae:	4a27      	ldr	r2, [pc, #156]	; (8100a4c <HAL_DMA_Init+0x1e4>)
 81009b0:	4293      	cmp	r3, r2
 81009b2:	d013      	beq.n	81009dc <HAL_DMA_Init+0x174>
 81009b4:	687b      	ldr	r3, [r7, #4]
 81009b6:	681b      	ldr	r3, [r3, #0]
 81009b8:	4a25      	ldr	r2, [pc, #148]	; (8100a50 <HAL_DMA_Init+0x1e8>)
 81009ba:	4293      	cmp	r3, r2
 81009bc:	d00e      	beq.n	81009dc <HAL_DMA_Init+0x174>
 81009be:	687b      	ldr	r3, [r7, #4]
 81009c0:	681b      	ldr	r3, [r3, #0]
 81009c2:	4a24      	ldr	r2, [pc, #144]	; (8100a54 <HAL_DMA_Init+0x1ec>)
 81009c4:	4293      	cmp	r3, r2
 81009c6:	d009      	beq.n	81009dc <HAL_DMA_Init+0x174>
 81009c8:	687b      	ldr	r3, [r7, #4]
 81009ca:	681b      	ldr	r3, [r3, #0]
 81009cc:	4a22      	ldr	r2, [pc, #136]	; (8100a58 <HAL_DMA_Init+0x1f0>)
 81009ce:	4293      	cmp	r3, r2
 81009d0:	d004      	beq.n	81009dc <HAL_DMA_Init+0x174>
 81009d2:	687b      	ldr	r3, [r7, #4]
 81009d4:	681b      	ldr	r3, [r3, #0]
 81009d6:	4a21      	ldr	r2, [pc, #132]	; (8100a5c <HAL_DMA_Init+0x1f4>)
 81009d8:	4293      	cmp	r3, r2
 81009da:	d108      	bne.n	81009ee <HAL_DMA_Init+0x186>
 81009dc:	687b      	ldr	r3, [r7, #4]
 81009de:	681b      	ldr	r3, [r3, #0]
 81009e0:	681a      	ldr	r2, [r3, #0]
 81009e2:	687b      	ldr	r3, [r7, #4]
 81009e4:	681b      	ldr	r3, [r3, #0]
 81009e6:	f022 0201 	bic.w	r2, r2, #1
 81009ea:	601a      	str	r2, [r3, #0]
 81009ec:	e007      	b.n	81009fe <HAL_DMA_Init+0x196>
 81009ee:	687b      	ldr	r3, [r7, #4]
 81009f0:	681b      	ldr	r3, [r3, #0]
 81009f2:	681a      	ldr	r2, [r3, #0]
 81009f4:	687b      	ldr	r3, [r7, #4]
 81009f6:	681b      	ldr	r3, [r3, #0]
 81009f8:	f022 0201 	bic.w	r2, r2, #1
 81009fc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 81009fe:	e02f      	b.n	8100a60 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8100a00:	f7ff fe2e 	bl	8100660 <HAL_GetTick>
 8100a04:	4602      	mov	r2, r0
 8100a06:	693b      	ldr	r3, [r7, #16]
 8100a08:	1ad3      	subs	r3, r2, r3
 8100a0a:	2b05      	cmp	r3, #5
 8100a0c:	d928      	bls.n	8100a60 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8100a0e:	687b      	ldr	r3, [r7, #4]
 8100a10:	2220      	movs	r2, #32
 8100a12:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8100a14:	687b      	ldr	r3, [r7, #4]
 8100a16:	2203      	movs	r2, #3
 8100a18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8100a1c:	2301      	movs	r3, #1
 8100a1e:	e244      	b.n	8100eaa <HAL_DMA_Init+0x642>
 8100a20:	40020010 	.word	0x40020010
 8100a24:	40020028 	.word	0x40020028
 8100a28:	40020040 	.word	0x40020040
 8100a2c:	40020058 	.word	0x40020058
 8100a30:	40020070 	.word	0x40020070
 8100a34:	40020088 	.word	0x40020088
 8100a38:	400200a0 	.word	0x400200a0
 8100a3c:	400200b8 	.word	0x400200b8
 8100a40:	40020410 	.word	0x40020410
 8100a44:	40020428 	.word	0x40020428
 8100a48:	40020440 	.word	0x40020440
 8100a4c:	40020458 	.word	0x40020458
 8100a50:	40020470 	.word	0x40020470
 8100a54:	40020488 	.word	0x40020488
 8100a58:	400204a0 	.word	0x400204a0
 8100a5c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8100a60:	687b      	ldr	r3, [r7, #4]
 8100a62:	681b      	ldr	r3, [r3, #0]
 8100a64:	681b      	ldr	r3, [r3, #0]
 8100a66:	f003 0301 	and.w	r3, r3, #1
 8100a6a:	2b00      	cmp	r3, #0
 8100a6c:	d1c8      	bne.n	8100a00 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8100a6e:	687b      	ldr	r3, [r7, #4]
 8100a70:	681b      	ldr	r3, [r3, #0]
 8100a72:	681b      	ldr	r3, [r3, #0]
 8100a74:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8100a76:	697a      	ldr	r2, [r7, #20]
 8100a78:	4b84      	ldr	r3, [pc, #528]	; (8100c8c <HAL_DMA_Init+0x424>)
 8100a7a:	4013      	ands	r3, r2
 8100a7c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8100a7e:	687b      	ldr	r3, [r7, #4]
 8100a80:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8100a82:	687b      	ldr	r3, [r7, #4]
 8100a84:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8100a86:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8100a88:	687b      	ldr	r3, [r7, #4]
 8100a8a:	691b      	ldr	r3, [r3, #16]
 8100a8c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8100a8e:	687b      	ldr	r3, [r7, #4]
 8100a90:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8100a92:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8100a94:	687b      	ldr	r3, [r7, #4]
 8100a96:	699b      	ldr	r3, [r3, #24]
 8100a98:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8100a9a:	687b      	ldr	r3, [r7, #4]
 8100a9c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8100a9e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8100aa0:	687b      	ldr	r3, [r7, #4]
 8100aa2:	6a1b      	ldr	r3, [r3, #32]
 8100aa4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8100aa6:	697a      	ldr	r2, [r7, #20]
 8100aa8:	4313      	orrs	r3, r2
 8100aaa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8100aac:	687b      	ldr	r3, [r7, #4]
 8100aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8100ab0:	2b04      	cmp	r3, #4
 8100ab2:	d107      	bne.n	8100ac4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8100ab4:	687b      	ldr	r3, [r7, #4]
 8100ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8100ab8:	687b      	ldr	r3, [r7, #4]
 8100aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100abc:	4313      	orrs	r3, r2
 8100abe:	697a      	ldr	r2, [r7, #20]
 8100ac0:	4313      	orrs	r3, r2
 8100ac2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8100ac4:	4b72      	ldr	r3, [pc, #456]	; (8100c90 <HAL_DMA_Init+0x428>)
 8100ac6:	681b      	ldr	r3, [r3, #0]
 8100ac8:	0c1b      	lsrs	r3, r3, #16
 8100aca:	041b      	lsls	r3, r3, #16
 8100acc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8100ad0:	d328      	bcc.n	8100b24 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8100ad2:	687b      	ldr	r3, [r7, #4]
 8100ad4:	685b      	ldr	r3, [r3, #4]
 8100ad6:	2b28      	cmp	r3, #40	; 0x28
 8100ad8:	d903      	bls.n	8100ae2 <HAL_DMA_Init+0x27a>
 8100ada:	687b      	ldr	r3, [r7, #4]
 8100adc:	685b      	ldr	r3, [r3, #4]
 8100ade:	2b2e      	cmp	r3, #46	; 0x2e
 8100ae0:	d917      	bls.n	8100b12 <HAL_DMA_Init+0x2aa>
 8100ae2:	687b      	ldr	r3, [r7, #4]
 8100ae4:	685b      	ldr	r3, [r3, #4]
 8100ae6:	2b3e      	cmp	r3, #62	; 0x3e
 8100ae8:	d903      	bls.n	8100af2 <HAL_DMA_Init+0x28a>
 8100aea:	687b      	ldr	r3, [r7, #4]
 8100aec:	685b      	ldr	r3, [r3, #4]
 8100aee:	2b42      	cmp	r3, #66	; 0x42
 8100af0:	d90f      	bls.n	8100b12 <HAL_DMA_Init+0x2aa>
 8100af2:	687b      	ldr	r3, [r7, #4]
 8100af4:	685b      	ldr	r3, [r3, #4]
 8100af6:	2b46      	cmp	r3, #70	; 0x46
 8100af8:	d903      	bls.n	8100b02 <HAL_DMA_Init+0x29a>
 8100afa:	687b      	ldr	r3, [r7, #4]
 8100afc:	685b      	ldr	r3, [r3, #4]
 8100afe:	2b48      	cmp	r3, #72	; 0x48
 8100b00:	d907      	bls.n	8100b12 <HAL_DMA_Init+0x2aa>
 8100b02:	687b      	ldr	r3, [r7, #4]
 8100b04:	685b      	ldr	r3, [r3, #4]
 8100b06:	2b4e      	cmp	r3, #78	; 0x4e
 8100b08:	d905      	bls.n	8100b16 <HAL_DMA_Init+0x2ae>
 8100b0a:	687b      	ldr	r3, [r7, #4]
 8100b0c:	685b      	ldr	r3, [r3, #4]
 8100b0e:	2b52      	cmp	r3, #82	; 0x52
 8100b10:	d801      	bhi.n	8100b16 <HAL_DMA_Init+0x2ae>
 8100b12:	2301      	movs	r3, #1
 8100b14:	e000      	b.n	8100b18 <HAL_DMA_Init+0x2b0>
 8100b16:	2300      	movs	r3, #0
 8100b18:	2b00      	cmp	r3, #0
 8100b1a:	d003      	beq.n	8100b24 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8100b1c:	697b      	ldr	r3, [r7, #20]
 8100b1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100b22:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8100b24:	687b      	ldr	r3, [r7, #4]
 8100b26:	681b      	ldr	r3, [r3, #0]
 8100b28:	697a      	ldr	r2, [r7, #20]
 8100b2a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8100b2c:	687b      	ldr	r3, [r7, #4]
 8100b2e:	681b      	ldr	r3, [r3, #0]
 8100b30:	695b      	ldr	r3, [r3, #20]
 8100b32:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8100b34:	697b      	ldr	r3, [r7, #20]
 8100b36:	f023 0307 	bic.w	r3, r3, #7
 8100b3a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8100b3c:	687b      	ldr	r3, [r7, #4]
 8100b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8100b40:	697a      	ldr	r2, [r7, #20]
 8100b42:	4313      	orrs	r3, r2
 8100b44:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8100b46:	687b      	ldr	r3, [r7, #4]
 8100b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8100b4a:	2b04      	cmp	r3, #4
 8100b4c:	d117      	bne.n	8100b7e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8100b4e:	687b      	ldr	r3, [r7, #4]
 8100b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8100b52:	697a      	ldr	r2, [r7, #20]
 8100b54:	4313      	orrs	r3, r2
 8100b56:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8100b58:	687b      	ldr	r3, [r7, #4]
 8100b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8100b5c:	2b00      	cmp	r3, #0
 8100b5e:	d00e      	beq.n	8100b7e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8100b60:	6878      	ldr	r0, [r7, #4]
 8100b62:	f000 fa8d 	bl	8101080 <DMA_CheckFifoParam>
 8100b66:	4603      	mov	r3, r0
 8100b68:	2b00      	cmp	r3, #0
 8100b6a:	d008      	beq.n	8100b7e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8100b6c:	687b      	ldr	r3, [r7, #4]
 8100b6e:	2240      	movs	r2, #64	; 0x40
 8100b70:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8100b72:	687b      	ldr	r3, [r7, #4]
 8100b74:	2201      	movs	r2, #1
 8100b76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8100b7a:	2301      	movs	r3, #1
 8100b7c:	e195      	b.n	8100eaa <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8100b7e:	687b      	ldr	r3, [r7, #4]
 8100b80:	681b      	ldr	r3, [r3, #0]
 8100b82:	697a      	ldr	r2, [r7, #20]
 8100b84:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8100b86:	6878      	ldr	r0, [r7, #4]
 8100b88:	f000 f9c8 	bl	8100f1c <DMA_CalcBaseAndBitshift>
 8100b8c:	4603      	mov	r3, r0
 8100b8e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8100b90:	687b      	ldr	r3, [r7, #4]
 8100b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8100b94:	f003 031f 	and.w	r3, r3, #31
 8100b98:	223f      	movs	r2, #63	; 0x3f
 8100b9a:	409a      	lsls	r2, r3
 8100b9c:	68bb      	ldr	r3, [r7, #8]
 8100b9e:	609a      	str	r2, [r3, #8]
 8100ba0:	e0cb      	b.n	8100d3a <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8100ba2:	687b      	ldr	r3, [r7, #4]
 8100ba4:	681b      	ldr	r3, [r3, #0]
 8100ba6:	4a3b      	ldr	r2, [pc, #236]	; (8100c94 <HAL_DMA_Init+0x42c>)
 8100ba8:	4293      	cmp	r3, r2
 8100baa:	d022      	beq.n	8100bf2 <HAL_DMA_Init+0x38a>
 8100bac:	687b      	ldr	r3, [r7, #4]
 8100bae:	681b      	ldr	r3, [r3, #0]
 8100bb0:	4a39      	ldr	r2, [pc, #228]	; (8100c98 <HAL_DMA_Init+0x430>)
 8100bb2:	4293      	cmp	r3, r2
 8100bb4:	d01d      	beq.n	8100bf2 <HAL_DMA_Init+0x38a>
 8100bb6:	687b      	ldr	r3, [r7, #4]
 8100bb8:	681b      	ldr	r3, [r3, #0]
 8100bba:	4a38      	ldr	r2, [pc, #224]	; (8100c9c <HAL_DMA_Init+0x434>)
 8100bbc:	4293      	cmp	r3, r2
 8100bbe:	d018      	beq.n	8100bf2 <HAL_DMA_Init+0x38a>
 8100bc0:	687b      	ldr	r3, [r7, #4]
 8100bc2:	681b      	ldr	r3, [r3, #0]
 8100bc4:	4a36      	ldr	r2, [pc, #216]	; (8100ca0 <HAL_DMA_Init+0x438>)
 8100bc6:	4293      	cmp	r3, r2
 8100bc8:	d013      	beq.n	8100bf2 <HAL_DMA_Init+0x38a>
 8100bca:	687b      	ldr	r3, [r7, #4]
 8100bcc:	681b      	ldr	r3, [r3, #0]
 8100bce:	4a35      	ldr	r2, [pc, #212]	; (8100ca4 <HAL_DMA_Init+0x43c>)
 8100bd0:	4293      	cmp	r3, r2
 8100bd2:	d00e      	beq.n	8100bf2 <HAL_DMA_Init+0x38a>
 8100bd4:	687b      	ldr	r3, [r7, #4]
 8100bd6:	681b      	ldr	r3, [r3, #0]
 8100bd8:	4a33      	ldr	r2, [pc, #204]	; (8100ca8 <HAL_DMA_Init+0x440>)
 8100bda:	4293      	cmp	r3, r2
 8100bdc:	d009      	beq.n	8100bf2 <HAL_DMA_Init+0x38a>
 8100bde:	687b      	ldr	r3, [r7, #4]
 8100be0:	681b      	ldr	r3, [r3, #0]
 8100be2:	4a32      	ldr	r2, [pc, #200]	; (8100cac <HAL_DMA_Init+0x444>)
 8100be4:	4293      	cmp	r3, r2
 8100be6:	d004      	beq.n	8100bf2 <HAL_DMA_Init+0x38a>
 8100be8:	687b      	ldr	r3, [r7, #4]
 8100bea:	681b      	ldr	r3, [r3, #0]
 8100bec:	4a30      	ldr	r2, [pc, #192]	; (8100cb0 <HAL_DMA_Init+0x448>)
 8100bee:	4293      	cmp	r3, r2
 8100bf0:	d101      	bne.n	8100bf6 <HAL_DMA_Init+0x38e>
 8100bf2:	2301      	movs	r3, #1
 8100bf4:	e000      	b.n	8100bf8 <HAL_DMA_Init+0x390>
 8100bf6:	2300      	movs	r3, #0
 8100bf8:	2b00      	cmp	r3, #0
 8100bfa:	f000 8095 	beq.w	8100d28 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8100bfe:	687b      	ldr	r3, [r7, #4]
 8100c00:	681b      	ldr	r3, [r3, #0]
 8100c02:	4a24      	ldr	r2, [pc, #144]	; (8100c94 <HAL_DMA_Init+0x42c>)
 8100c04:	4293      	cmp	r3, r2
 8100c06:	d021      	beq.n	8100c4c <HAL_DMA_Init+0x3e4>
 8100c08:	687b      	ldr	r3, [r7, #4]
 8100c0a:	681b      	ldr	r3, [r3, #0]
 8100c0c:	4a22      	ldr	r2, [pc, #136]	; (8100c98 <HAL_DMA_Init+0x430>)
 8100c0e:	4293      	cmp	r3, r2
 8100c10:	d01c      	beq.n	8100c4c <HAL_DMA_Init+0x3e4>
 8100c12:	687b      	ldr	r3, [r7, #4]
 8100c14:	681b      	ldr	r3, [r3, #0]
 8100c16:	4a21      	ldr	r2, [pc, #132]	; (8100c9c <HAL_DMA_Init+0x434>)
 8100c18:	4293      	cmp	r3, r2
 8100c1a:	d017      	beq.n	8100c4c <HAL_DMA_Init+0x3e4>
 8100c1c:	687b      	ldr	r3, [r7, #4]
 8100c1e:	681b      	ldr	r3, [r3, #0]
 8100c20:	4a1f      	ldr	r2, [pc, #124]	; (8100ca0 <HAL_DMA_Init+0x438>)
 8100c22:	4293      	cmp	r3, r2
 8100c24:	d012      	beq.n	8100c4c <HAL_DMA_Init+0x3e4>
 8100c26:	687b      	ldr	r3, [r7, #4]
 8100c28:	681b      	ldr	r3, [r3, #0]
 8100c2a:	4a1e      	ldr	r2, [pc, #120]	; (8100ca4 <HAL_DMA_Init+0x43c>)
 8100c2c:	4293      	cmp	r3, r2
 8100c2e:	d00d      	beq.n	8100c4c <HAL_DMA_Init+0x3e4>
 8100c30:	687b      	ldr	r3, [r7, #4]
 8100c32:	681b      	ldr	r3, [r3, #0]
 8100c34:	4a1c      	ldr	r2, [pc, #112]	; (8100ca8 <HAL_DMA_Init+0x440>)
 8100c36:	4293      	cmp	r3, r2
 8100c38:	d008      	beq.n	8100c4c <HAL_DMA_Init+0x3e4>
 8100c3a:	687b      	ldr	r3, [r7, #4]
 8100c3c:	681b      	ldr	r3, [r3, #0]
 8100c3e:	4a1b      	ldr	r2, [pc, #108]	; (8100cac <HAL_DMA_Init+0x444>)
 8100c40:	4293      	cmp	r3, r2
 8100c42:	d003      	beq.n	8100c4c <HAL_DMA_Init+0x3e4>
 8100c44:	687b      	ldr	r3, [r7, #4]
 8100c46:	681b      	ldr	r3, [r3, #0]
 8100c48:	4a19      	ldr	r2, [pc, #100]	; (8100cb0 <HAL_DMA_Init+0x448>)
 8100c4a:	4293      	cmp	r3, r2
 8100c4c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8100c4e:	687b      	ldr	r3, [r7, #4]
 8100c50:	2202      	movs	r2, #2
 8100c52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8100c56:	687b      	ldr	r3, [r7, #4]
 8100c58:	2200      	movs	r2, #0
 8100c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8100c5e:	687b      	ldr	r3, [r7, #4]
 8100c60:	681b      	ldr	r3, [r3, #0]
 8100c62:	681b      	ldr	r3, [r3, #0]
 8100c64:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8100c66:	697b      	ldr	r3, [r7, #20]
 8100c68:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8100c6c:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8100c70:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8100c72:	687b      	ldr	r3, [r7, #4]
 8100c74:	689b      	ldr	r3, [r3, #8]
 8100c76:	2b40      	cmp	r3, #64	; 0x40
 8100c78:	d01c      	beq.n	8100cb4 <HAL_DMA_Init+0x44c>
 8100c7a:	687b      	ldr	r3, [r7, #4]
 8100c7c:	689b      	ldr	r3, [r3, #8]
 8100c7e:	2b80      	cmp	r3, #128	; 0x80
 8100c80:	d102      	bne.n	8100c88 <HAL_DMA_Init+0x420>
 8100c82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8100c86:	e016      	b.n	8100cb6 <HAL_DMA_Init+0x44e>
 8100c88:	2300      	movs	r3, #0
 8100c8a:	e014      	b.n	8100cb6 <HAL_DMA_Init+0x44e>
 8100c8c:	fe10803f 	.word	0xfe10803f
 8100c90:	5c001000 	.word	0x5c001000
 8100c94:	58025408 	.word	0x58025408
 8100c98:	5802541c 	.word	0x5802541c
 8100c9c:	58025430 	.word	0x58025430
 8100ca0:	58025444 	.word	0x58025444
 8100ca4:	58025458 	.word	0x58025458
 8100ca8:	5802546c 	.word	0x5802546c
 8100cac:	58025480 	.word	0x58025480
 8100cb0:	58025494 	.word	0x58025494
 8100cb4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8100cb6:	687a      	ldr	r2, [r7, #4]
 8100cb8:	68d2      	ldr	r2, [r2, #12]
 8100cba:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8100cbc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8100cbe:	687b      	ldr	r3, [r7, #4]
 8100cc0:	691b      	ldr	r3, [r3, #16]
 8100cc2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8100cc4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8100cc6:	687b      	ldr	r3, [r7, #4]
 8100cc8:	695b      	ldr	r3, [r3, #20]
 8100cca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8100ccc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8100cce:	687b      	ldr	r3, [r7, #4]
 8100cd0:	699b      	ldr	r3, [r3, #24]
 8100cd2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8100cd4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8100cd6:	687b      	ldr	r3, [r7, #4]
 8100cd8:	69db      	ldr	r3, [r3, #28]
 8100cda:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8100cdc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8100cde:	687b      	ldr	r3, [r7, #4]
 8100ce0:	6a1b      	ldr	r3, [r3, #32]
 8100ce2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8100ce4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8100ce6:	697a      	ldr	r2, [r7, #20]
 8100ce8:	4313      	orrs	r3, r2
 8100cea:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8100cec:	687b      	ldr	r3, [r7, #4]
 8100cee:	681b      	ldr	r3, [r3, #0]
 8100cf0:	697a      	ldr	r2, [r7, #20]
 8100cf2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8100cf4:	687b      	ldr	r3, [r7, #4]
 8100cf6:	681b      	ldr	r3, [r3, #0]
 8100cf8:	461a      	mov	r2, r3
 8100cfa:	4b6e      	ldr	r3, [pc, #440]	; (8100eb4 <HAL_DMA_Init+0x64c>)
 8100cfc:	4413      	add	r3, r2
 8100cfe:	4a6e      	ldr	r2, [pc, #440]	; (8100eb8 <HAL_DMA_Init+0x650>)
 8100d00:	fba2 2303 	umull	r2, r3, r2, r3
 8100d04:	091b      	lsrs	r3, r3, #4
 8100d06:	009a      	lsls	r2, r3, #2
 8100d08:	687b      	ldr	r3, [r7, #4]
 8100d0a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8100d0c:	6878      	ldr	r0, [r7, #4]
 8100d0e:	f000 f905 	bl	8100f1c <DMA_CalcBaseAndBitshift>
 8100d12:	4603      	mov	r3, r0
 8100d14:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8100d16:	687b      	ldr	r3, [r7, #4]
 8100d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8100d1a:	f003 031f 	and.w	r3, r3, #31
 8100d1e:	2201      	movs	r2, #1
 8100d20:	409a      	lsls	r2, r3
 8100d22:	68fb      	ldr	r3, [r7, #12]
 8100d24:	605a      	str	r2, [r3, #4]
 8100d26:	e008      	b.n	8100d3a <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8100d28:	687b      	ldr	r3, [r7, #4]
 8100d2a:	2240      	movs	r2, #64	; 0x40
 8100d2c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8100d2e:	687b      	ldr	r3, [r7, #4]
 8100d30:	2203      	movs	r2, #3
 8100d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8100d36:	2301      	movs	r3, #1
 8100d38:	e0b7      	b.n	8100eaa <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8100d3a:	687b      	ldr	r3, [r7, #4]
 8100d3c:	681b      	ldr	r3, [r3, #0]
 8100d3e:	4a5f      	ldr	r2, [pc, #380]	; (8100ebc <HAL_DMA_Init+0x654>)
 8100d40:	4293      	cmp	r3, r2
 8100d42:	d072      	beq.n	8100e2a <HAL_DMA_Init+0x5c2>
 8100d44:	687b      	ldr	r3, [r7, #4]
 8100d46:	681b      	ldr	r3, [r3, #0]
 8100d48:	4a5d      	ldr	r2, [pc, #372]	; (8100ec0 <HAL_DMA_Init+0x658>)
 8100d4a:	4293      	cmp	r3, r2
 8100d4c:	d06d      	beq.n	8100e2a <HAL_DMA_Init+0x5c2>
 8100d4e:	687b      	ldr	r3, [r7, #4]
 8100d50:	681b      	ldr	r3, [r3, #0]
 8100d52:	4a5c      	ldr	r2, [pc, #368]	; (8100ec4 <HAL_DMA_Init+0x65c>)
 8100d54:	4293      	cmp	r3, r2
 8100d56:	d068      	beq.n	8100e2a <HAL_DMA_Init+0x5c2>
 8100d58:	687b      	ldr	r3, [r7, #4]
 8100d5a:	681b      	ldr	r3, [r3, #0]
 8100d5c:	4a5a      	ldr	r2, [pc, #360]	; (8100ec8 <HAL_DMA_Init+0x660>)
 8100d5e:	4293      	cmp	r3, r2
 8100d60:	d063      	beq.n	8100e2a <HAL_DMA_Init+0x5c2>
 8100d62:	687b      	ldr	r3, [r7, #4]
 8100d64:	681b      	ldr	r3, [r3, #0]
 8100d66:	4a59      	ldr	r2, [pc, #356]	; (8100ecc <HAL_DMA_Init+0x664>)
 8100d68:	4293      	cmp	r3, r2
 8100d6a:	d05e      	beq.n	8100e2a <HAL_DMA_Init+0x5c2>
 8100d6c:	687b      	ldr	r3, [r7, #4]
 8100d6e:	681b      	ldr	r3, [r3, #0]
 8100d70:	4a57      	ldr	r2, [pc, #348]	; (8100ed0 <HAL_DMA_Init+0x668>)
 8100d72:	4293      	cmp	r3, r2
 8100d74:	d059      	beq.n	8100e2a <HAL_DMA_Init+0x5c2>
 8100d76:	687b      	ldr	r3, [r7, #4]
 8100d78:	681b      	ldr	r3, [r3, #0]
 8100d7a:	4a56      	ldr	r2, [pc, #344]	; (8100ed4 <HAL_DMA_Init+0x66c>)
 8100d7c:	4293      	cmp	r3, r2
 8100d7e:	d054      	beq.n	8100e2a <HAL_DMA_Init+0x5c2>
 8100d80:	687b      	ldr	r3, [r7, #4]
 8100d82:	681b      	ldr	r3, [r3, #0]
 8100d84:	4a54      	ldr	r2, [pc, #336]	; (8100ed8 <HAL_DMA_Init+0x670>)
 8100d86:	4293      	cmp	r3, r2
 8100d88:	d04f      	beq.n	8100e2a <HAL_DMA_Init+0x5c2>
 8100d8a:	687b      	ldr	r3, [r7, #4]
 8100d8c:	681b      	ldr	r3, [r3, #0]
 8100d8e:	4a53      	ldr	r2, [pc, #332]	; (8100edc <HAL_DMA_Init+0x674>)
 8100d90:	4293      	cmp	r3, r2
 8100d92:	d04a      	beq.n	8100e2a <HAL_DMA_Init+0x5c2>
 8100d94:	687b      	ldr	r3, [r7, #4]
 8100d96:	681b      	ldr	r3, [r3, #0]
 8100d98:	4a51      	ldr	r2, [pc, #324]	; (8100ee0 <HAL_DMA_Init+0x678>)
 8100d9a:	4293      	cmp	r3, r2
 8100d9c:	d045      	beq.n	8100e2a <HAL_DMA_Init+0x5c2>
 8100d9e:	687b      	ldr	r3, [r7, #4]
 8100da0:	681b      	ldr	r3, [r3, #0]
 8100da2:	4a50      	ldr	r2, [pc, #320]	; (8100ee4 <HAL_DMA_Init+0x67c>)
 8100da4:	4293      	cmp	r3, r2
 8100da6:	d040      	beq.n	8100e2a <HAL_DMA_Init+0x5c2>
 8100da8:	687b      	ldr	r3, [r7, #4]
 8100daa:	681b      	ldr	r3, [r3, #0]
 8100dac:	4a4e      	ldr	r2, [pc, #312]	; (8100ee8 <HAL_DMA_Init+0x680>)
 8100dae:	4293      	cmp	r3, r2
 8100db0:	d03b      	beq.n	8100e2a <HAL_DMA_Init+0x5c2>
 8100db2:	687b      	ldr	r3, [r7, #4]
 8100db4:	681b      	ldr	r3, [r3, #0]
 8100db6:	4a4d      	ldr	r2, [pc, #308]	; (8100eec <HAL_DMA_Init+0x684>)
 8100db8:	4293      	cmp	r3, r2
 8100dba:	d036      	beq.n	8100e2a <HAL_DMA_Init+0x5c2>
 8100dbc:	687b      	ldr	r3, [r7, #4]
 8100dbe:	681b      	ldr	r3, [r3, #0]
 8100dc0:	4a4b      	ldr	r2, [pc, #300]	; (8100ef0 <HAL_DMA_Init+0x688>)
 8100dc2:	4293      	cmp	r3, r2
 8100dc4:	d031      	beq.n	8100e2a <HAL_DMA_Init+0x5c2>
 8100dc6:	687b      	ldr	r3, [r7, #4]
 8100dc8:	681b      	ldr	r3, [r3, #0]
 8100dca:	4a4a      	ldr	r2, [pc, #296]	; (8100ef4 <HAL_DMA_Init+0x68c>)
 8100dcc:	4293      	cmp	r3, r2
 8100dce:	d02c      	beq.n	8100e2a <HAL_DMA_Init+0x5c2>
 8100dd0:	687b      	ldr	r3, [r7, #4]
 8100dd2:	681b      	ldr	r3, [r3, #0]
 8100dd4:	4a48      	ldr	r2, [pc, #288]	; (8100ef8 <HAL_DMA_Init+0x690>)
 8100dd6:	4293      	cmp	r3, r2
 8100dd8:	d027      	beq.n	8100e2a <HAL_DMA_Init+0x5c2>
 8100dda:	687b      	ldr	r3, [r7, #4]
 8100ddc:	681b      	ldr	r3, [r3, #0]
 8100dde:	4a47      	ldr	r2, [pc, #284]	; (8100efc <HAL_DMA_Init+0x694>)
 8100de0:	4293      	cmp	r3, r2
 8100de2:	d022      	beq.n	8100e2a <HAL_DMA_Init+0x5c2>
 8100de4:	687b      	ldr	r3, [r7, #4]
 8100de6:	681b      	ldr	r3, [r3, #0]
 8100de8:	4a45      	ldr	r2, [pc, #276]	; (8100f00 <HAL_DMA_Init+0x698>)
 8100dea:	4293      	cmp	r3, r2
 8100dec:	d01d      	beq.n	8100e2a <HAL_DMA_Init+0x5c2>
 8100dee:	687b      	ldr	r3, [r7, #4]
 8100df0:	681b      	ldr	r3, [r3, #0]
 8100df2:	4a44      	ldr	r2, [pc, #272]	; (8100f04 <HAL_DMA_Init+0x69c>)
 8100df4:	4293      	cmp	r3, r2
 8100df6:	d018      	beq.n	8100e2a <HAL_DMA_Init+0x5c2>
 8100df8:	687b      	ldr	r3, [r7, #4]
 8100dfa:	681b      	ldr	r3, [r3, #0]
 8100dfc:	4a42      	ldr	r2, [pc, #264]	; (8100f08 <HAL_DMA_Init+0x6a0>)
 8100dfe:	4293      	cmp	r3, r2
 8100e00:	d013      	beq.n	8100e2a <HAL_DMA_Init+0x5c2>
 8100e02:	687b      	ldr	r3, [r7, #4]
 8100e04:	681b      	ldr	r3, [r3, #0]
 8100e06:	4a41      	ldr	r2, [pc, #260]	; (8100f0c <HAL_DMA_Init+0x6a4>)
 8100e08:	4293      	cmp	r3, r2
 8100e0a:	d00e      	beq.n	8100e2a <HAL_DMA_Init+0x5c2>
 8100e0c:	687b      	ldr	r3, [r7, #4]
 8100e0e:	681b      	ldr	r3, [r3, #0]
 8100e10:	4a3f      	ldr	r2, [pc, #252]	; (8100f10 <HAL_DMA_Init+0x6a8>)
 8100e12:	4293      	cmp	r3, r2
 8100e14:	d009      	beq.n	8100e2a <HAL_DMA_Init+0x5c2>
 8100e16:	687b      	ldr	r3, [r7, #4]
 8100e18:	681b      	ldr	r3, [r3, #0]
 8100e1a:	4a3e      	ldr	r2, [pc, #248]	; (8100f14 <HAL_DMA_Init+0x6ac>)
 8100e1c:	4293      	cmp	r3, r2
 8100e1e:	d004      	beq.n	8100e2a <HAL_DMA_Init+0x5c2>
 8100e20:	687b      	ldr	r3, [r7, #4]
 8100e22:	681b      	ldr	r3, [r3, #0]
 8100e24:	4a3c      	ldr	r2, [pc, #240]	; (8100f18 <HAL_DMA_Init+0x6b0>)
 8100e26:	4293      	cmp	r3, r2
 8100e28:	d101      	bne.n	8100e2e <HAL_DMA_Init+0x5c6>
 8100e2a:	2301      	movs	r3, #1
 8100e2c:	e000      	b.n	8100e30 <HAL_DMA_Init+0x5c8>
 8100e2e:	2300      	movs	r3, #0
 8100e30:	2b00      	cmp	r3, #0
 8100e32:	d032      	beq.n	8100e9a <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8100e34:	6878      	ldr	r0, [r7, #4]
 8100e36:	f000 f99f 	bl	8101178 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8100e3a:	687b      	ldr	r3, [r7, #4]
 8100e3c:	689b      	ldr	r3, [r3, #8]
 8100e3e:	2b80      	cmp	r3, #128	; 0x80
 8100e40:	d102      	bne.n	8100e48 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8100e42:	687b      	ldr	r3, [r7, #4]
 8100e44:	2200      	movs	r2, #0
 8100e46:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8100e48:	687b      	ldr	r3, [r7, #4]
 8100e4a:	685a      	ldr	r2, [r3, #4]
 8100e4c:	687b      	ldr	r3, [r7, #4]
 8100e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8100e50:	b2d2      	uxtb	r2, r2
 8100e52:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8100e54:	687b      	ldr	r3, [r7, #4]
 8100e56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8100e58:	687a      	ldr	r2, [r7, #4]
 8100e5a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8100e5c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8100e5e:	687b      	ldr	r3, [r7, #4]
 8100e60:	685b      	ldr	r3, [r3, #4]
 8100e62:	2b00      	cmp	r3, #0
 8100e64:	d010      	beq.n	8100e88 <HAL_DMA_Init+0x620>
 8100e66:	687b      	ldr	r3, [r7, #4]
 8100e68:	685b      	ldr	r3, [r3, #4]
 8100e6a:	2b08      	cmp	r3, #8
 8100e6c:	d80c      	bhi.n	8100e88 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8100e6e:	6878      	ldr	r0, [r7, #4]
 8100e70:	f000 fa1c 	bl	81012ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8100e74:	687b      	ldr	r3, [r7, #4]
 8100e76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8100e78:	2200      	movs	r2, #0
 8100e7a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8100e7c:	687b      	ldr	r3, [r7, #4]
 8100e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8100e80:	687a      	ldr	r2, [r7, #4]
 8100e82:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8100e84:	605a      	str	r2, [r3, #4]
 8100e86:	e008      	b.n	8100e9a <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8100e88:	687b      	ldr	r3, [r7, #4]
 8100e8a:	2200      	movs	r2, #0
 8100e8c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8100e8e:	687b      	ldr	r3, [r7, #4]
 8100e90:	2200      	movs	r2, #0
 8100e92:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8100e94:	687b      	ldr	r3, [r7, #4]
 8100e96:	2200      	movs	r2, #0
 8100e98:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8100e9a:	687b      	ldr	r3, [r7, #4]
 8100e9c:	2200      	movs	r2, #0
 8100e9e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8100ea0:	687b      	ldr	r3, [r7, #4]
 8100ea2:	2201      	movs	r2, #1
 8100ea4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8100ea8:	2300      	movs	r3, #0
}
 8100eaa:	4618      	mov	r0, r3
 8100eac:	3718      	adds	r7, #24
 8100eae:	46bd      	mov	sp, r7
 8100eb0:	bd80      	pop	{r7, pc}
 8100eb2:	bf00      	nop
 8100eb4:	a7fdabf8 	.word	0xa7fdabf8
 8100eb8:	cccccccd 	.word	0xcccccccd
 8100ebc:	40020010 	.word	0x40020010
 8100ec0:	40020028 	.word	0x40020028
 8100ec4:	40020040 	.word	0x40020040
 8100ec8:	40020058 	.word	0x40020058
 8100ecc:	40020070 	.word	0x40020070
 8100ed0:	40020088 	.word	0x40020088
 8100ed4:	400200a0 	.word	0x400200a0
 8100ed8:	400200b8 	.word	0x400200b8
 8100edc:	40020410 	.word	0x40020410
 8100ee0:	40020428 	.word	0x40020428
 8100ee4:	40020440 	.word	0x40020440
 8100ee8:	40020458 	.word	0x40020458
 8100eec:	40020470 	.word	0x40020470
 8100ef0:	40020488 	.word	0x40020488
 8100ef4:	400204a0 	.word	0x400204a0
 8100ef8:	400204b8 	.word	0x400204b8
 8100efc:	58025408 	.word	0x58025408
 8100f00:	5802541c 	.word	0x5802541c
 8100f04:	58025430 	.word	0x58025430
 8100f08:	58025444 	.word	0x58025444
 8100f0c:	58025458 	.word	0x58025458
 8100f10:	5802546c 	.word	0x5802546c
 8100f14:	58025480 	.word	0x58025480
 8100f18:	58025494 	.word	0x58025494

08100f1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8100f1c:	b480      	push	{r7}
 8100f1e:	b085      	sub	sp, #20
 8100f20:	af00      	add	r7, sp, #0
 8100f22:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8100f24:	687b      	ldr	r3, [r7, #4]
 8100f26:	681b      	ldr	r3, [r3, #0]
 8100f28:	4a43      	ldr	r2, [pc, #268]	; (8101038 <DMA_CalcBaseAndBitshift+0x11c>)
 8100f2a:	4293      	cmp	r3, r2
 8100f2c:	d04a      	beq.n	8100fc4 <DMA_CalcBaseAndBitshift+0xa8>
 8100f2e:	687b      	ldr	r3, [r7, #4]
 8100f30:	681b      	ldr	r3, [r3, #0]
 8100f32:	4a42      	ldr	r2, [pc, #264]	; (810103c <DMA_CalcBaseAndBitshift+0x120>)
 8100f34:	4293      	cmp	r3, r2
 8100f36:	d045      	beq.n	8100fc4 <DMA_CalcBaseAndBitshift+0xa8>
 8100f38:	687b      	ldr	r3, [r7, #4]
 8100f3a:	681b      	ldr	r3, [r3, #0]
 8100f3c:	4a40      	ldr	r2, [pc, #256]	; (8101040 <DMA_CalcBaseAndBitshift+0x124>)
 8100f3e:	4293      	cmp	r3, r2
 8100f40:	d040      	beq.n	8100fc4 <DMA_CalcBaseAndBitshift+0xa8>
 8100f42:	687b      	ldr	r3, [r7, #4]
 8100f44:	681b      	ldr	r3, [r3, #0]
 8100f46:	4a3f      	ldr	r2, [pc, #252]	; (8101044 <DMA_CalcBaseAndBitshift+0x128>)
 8100f48:	4293      	cmp	r3, r2
 8100f4a:	d03b      	beq.n	8100fc4 <DMA_CalcBaseAndBitshift+0xa8>
 8100f4c:	687b      	ldr	r3, [r7, #4]
 8100f4e:	681b      	ldr	r3, [r3, #0]
 8100f50:	4a3d      	ldr	r2, [pc, #244]	; (8101048 <DMA_CalcBaseAndBitshift+0x12c>)
 8100f52:	4293      	cmp	r3, r2
 8100f54:	d036      	beq.n	8100fc4 <DMA_CalcBaseAndBitshift+0xa8>
 8100f56:	687b      	ldr	r3, [r7, #4]
 8100f58:	681b      	ldr	r3, [r3, #0]
 8100f5a:	4a3c      	ldr	r2, [pc, #240]	; (810104c <DMA_CalcBaseAndBitshift+0x130>)
 8100f5c:	4293      	cmp	r3, r2
 8100f5e:	d031      	beq.n	8100fc4 <DMA_CalcBaseAndBitshift+0xa8>
 8100f60:	687b      	ldr	r3, [r7, #4]
 8100f62:	681b      	ldr	r3, [r3, #0]
 8100f64:	4a3a      	ldr	r2, [pc, #232]	; (8101050 <DMA_CalcBaseAndBitshift+0x134>)
 8100f66:	4293      	cmp	r3, r2
 8100f68:	d02c      	beq.n	8100fc4 <DMA_CalcBaseAndBitshift+0xa8>
 8100f6a:	687b      	ldr	r3, [r7, #4]
 8100f6c:	681b      	ldr	r3, [r3, #0]
 8100f6e:	4a39      	ldr	r2, [pc, #228]	; (8101054 <DMA_CalcBaseAndBitshift+0x138>)
 8100f70:	4293      	cmp	r3, r2
 8100f72:	d027      	beq.n	8100fc4 <DMA_CalcBaseAndBitshift+0xa8>
 8100f74:	687b      	ldr	r3, [r7, #4]
 8100f76:	681b      	ldr	r3, [r3, #0]
 8100f78:	4a37      	ldr	r2, [pc, #220]	; (8101058 <DMA_CalcBaseAndBitshift+0x13c>)
 8100f7a:	4293      	cmp	r3, r2
 8100f7c:	d022      	beq.n	8100fc4 <DMA_CalcBaseAndBitshift+0xa8>
 8100f7e:	687b      	ldr	r3, [r7, #4]
 8100f80:	681b      	ldr	r3, [r3, #0]
 8100f82:	4a36      	ldr	r2, [pc, #216]	; (810105c <DMA_CalcBaseAndBitshift+0x140>)
 8100f84:	4293      	cmp	r3, r2
 8100f86:	d01d      	beq.n	8100fc4 <DMA_CalcBaseAndBitshift+0xa8>
 8100f88:	687b      	ldr	r3, [r7, #4]
 8100f8a:	681b      	ldr	r3, [r3, #0]
 8100f8c:	4a34      	ldr	r2, [pc, #208]	; (8101060 <DMA_CalcBaseAndBitshift+0x144>)
 8100f8e:	4293      	cmp	r3, r2
 8100f90:	d018      	beq.n	8100fc4 <DMA_CalcBaseAndBitshift+0xa8>
 8100f92:	687b      	ldr	r3, [r7, #4]
 8100f94:	681b      	ldr	r3, [r3, #0]
 8100f96:	4a33      	ldr	r2, [pc, #204]	; (8101064 <DMA_CalcBaseAndBitshift+0x148>)
 8100f98:	4293      	cmp	r3, r2
 8100f9a:	d013      	beq.n	8100fc4 <DMA_CalcBaseAndBitshift+0xa8>
 8100f9c:	687b      	ldr	r3, [r7, #4]
 8100f9e:	681b      	ldr	r3, [r3, #0]
 8100fa0:	4a31      	ldr	r2, [pc, #196]	; (8101068 <DMA_CalcBaseAndBitshift+0x14c>)
 8100fa2:	4293      	cmp	r3, r2
 8100fa4:	d00e      	beq.n	8100fc4 <DMA_CalcBaseAndBitshift+0xa8>
 8100fa6:	687b      	ldr	r3, [r7, #4]
 8100fa8:	681b      	ldr	r3, [r3, #0]
 8100faa:	4a30      	ldr	r2, [pc, #192]	; (810106c <DMA_CalcBaseAndBitshift+0x150>)
 8100fac:	4293      	cmp	r3, r2
 8100fae:	d009      	beq.n	8100fc4 <DMA_CalcBaseAndBitshift+0xa8>
 8100fb0:	687b      	ldr	r3, [r7, #4]
 8100fb2:	681b      	ldr	r3, [r3, #0]
 8100fb4:	4a2e      	ldr	r2, [pc, #184]	; (8101070 <DMA_CalcBaseAndBitshift+0x154>)
 8100fb6:	4293      	cmp	r3, r2
 8100fb8:	d004      	beq.n	8100fc4 <DMA_CalcBaseAndBitshift+0xa8>
 8100fba:	687b      	ldr	r3, [r7, #4]
 8100fbc:	681b      	ldr	r3, [r3, #0]
 8100fbe:	4a2d      	ldr	r2, [pc, #180]	; (8101074 <DMA_CalcBaseAndBitshift+0x158>)
 8100fc0:	4293      	cmp	r3, r2
 8100fc2:	d101      	bne.n	8100fc8 <DMA_CalcBaseAndBitshift+0xac>
 8100fc4:	2301      	movs	r3, #1
 8100fc6:	e000      	b.n	8100fca <DMA_CalcBaseAndBitshift+0xae>
 8100fc8:	2300      	movs	r3, #0
 8100fca:	2b00      	cmp	r3, #0
 8100fcc:	d026      	beq.n	810101c <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8100fce:	687b      	ldr	r3, [r7, #4]
 8100fd0:	681b      	ldr	r3, [r3, #0]
 8100fd2:	b2db      	uxtb	r3, r3
 8100fd4:	3b10      	subs	r3, #16
 8100fd6:	4a28      	ldr	r2, [pc, #160]	; (8101078 <DMA_CalcBaseAndBitshift+0x15c>)
 8100fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8100fdc:	091b      	lsrs	r3, r3, #4
 8100fde:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8100fe0:	68fb      	ldr	r3, [r7, #12]
 8100fe2:	f003 0307 	and.w	r3, r3, #7
 8100fe6:	4a25      	ldr	r2, [pc, #148]	; (810107c <DMA_CalcBaseAndBitshift+0x160>)
 8100fe8:	5cd3      	ldrb	r3, [r2, r3]
 8100fea:	461a      	mov	r2, r3
 8100fec:	687b      	ldr	r3, [r7, #4]
 8100fee:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8100ff0:	68fb      	ldr	r3, [r7, #12]
 8100ff2:	2b03      	cmp	r3, #3
 8100ff4:	d909      	bls.n	810100a <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8100ff6:	687b      	ldr	r3, [r7, #4]
 8100ff8:	681b      	ldr	r3, [r3, #0]
 8100ffa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8100ffe:	f023 0303 	bic.w	r3, r3, #3
 8101002:	1d1a      	adds	r2, r3, #4
 8101004:	687b      	ldr	r3, [r7, #4]
 8101006:	659a      	str	r2, [r3, #88]	; 0x58
 8101008:	e00e      	b.n	8101028 <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 810100a:	687b      	ldr	r3, [r7, #4]
 810100c:	681b      	ldr	r3, [r3, #0]
 810100e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8101012:	f023 0303 	bic.w	r3, r3, #3
 8101016:	687a      	ldr	r2, [r7, #4]
 8101018:	6593      	str	r3, [r2, #88]	; 0x58
 810101a:	e005      	b.n	8101028 <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 810101c:	687b      	ldr	r3, [r7, #4]
 810101e:	681b      	ldr	r3, [r3, #0]
 8101020:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8101024:	687b      	ldr	r3, [r7, #4]
 8101026:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8101028:	687b      	ldr	r3, [r7, #4]
 810102a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 810102c:	4618      	mov	r0, r3
 810102e:	3714      	adds	r7, #20
 8101030:	46bd      	mov	sp, r7
 8101032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101036:	4770      	bx	lr
 8101038:	40020010 	.word	0x40020010
 810103c:	40020028 	.word	0x40020028
 8101040:	40020040 	.word	0x40020040
 8101044:	40020058 	.word	0x40020058
 8101048:	40020070 	.word	0x40020070
 810104c:	40020088 	.word	0x40020088
 8101050:	400200a0 	.word	0x400200a0
 8101054:	400200b8 	.word	0x400200b8
 8101058:	40020410 	.word	0x40020410
 810105c:	40020428 	.word	0x40020428
 8101060:	40020440 	.word	0x40020440
 8101064:	40020458 	.word	0x40020458
 8101068:	40020470 	.word	0x40020470
 810106c:	40020488 	.word	0x40020488
 8101070:	400204a0 	.word	0x400204a0
 8101074:	400204b8 	.word	0x400204b8
 8101078:	aaaaaaab 	.word	0xaaaaaaab
 810107c:	0810182c 	.word	0x0810182c

08101080 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8101080:	b480      	push	{r7}
 8101082:	b085      	sub	sp, #20
 8101084:	af00      	add	r7, sp, #0
 8101086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8101088:	2300      	movs	r3, #0
 810108a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 810108c:	687b      	ldr	r3, [r7, #4]
 810108e:	699b      	ldr	r3, [r3, #24]
 8101090:	2b00      	cmp	r3, #0
 8101092:	d120      	bne.n	81010d6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8101094:	687b      	ldr	r3, [r7, #4]
 8101096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101098:	2b03      	cmp	r3, #3
 810109a:	d858      	bhi.n	810114e <DMA_CheckFifoParam+0xce>
 810109c:	a201      	add	r2, pc, #4	; (adr r2, 81010a4 <DMA_CheckFifoParam+0x24>)
 810109e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81010a2:	bf00      	nop
 81010a4:	081010b5 	.word	0x081010b5
 81010a8:	081010c7 	.word	0x081010c7
 81010ac:	081010b5 	.word	0x081010b5
 81010b0:	0810114f 	.word	0x0810114f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 81010b4:	687b      	ldr	r3, [r7, #4]
 81010b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81010b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 81010bc:	2b00      	cmp	r3, #0
 81010be:	d048      	beq.n	8101152 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 81010c0:	2301      	movs	r3, #1
 81010c2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 81010c4:	e045      	b.n	8101152 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 81010c6:	687b      	ldr	r3, [r7, #4]
 81010c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81010ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 81010ce:	d142      	bne.n	8101156 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 81010d0:	2301      	movs	r3, #1
 81010d2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 81010d4:	e03f      	b.n	8101156 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 81010d6:	687b      	ldr	r3, [r7, #4]
 81010d8:	699b      	ldr	r3, [r3, #24]
 81010da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81010de:	d123      	bne.n	8101128 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 81010e0:	687b      	ldr	r3, [r7, #4]
 81010e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81010e4:	2b03      	cmp	r3, #3
 81010e6:	d838      	bhi.n	810115a <DMA_CheckFifoParam+0xda>
 81010e8:	a201      	add	r2, pc, #4	; (adr r2, 81010f0 <DMA_CheckFifoParam+0x70>)
 81010ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81010ee:	bf00      	nop
 81010f0:	08101101 	.word	0x08101101
 81010f4:	08101107 	.word	0x08101107
 81010f8:	08101101 	.word	0x08101101
 81010fc:	08101119 	.word	0x08101119
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8101100:	2301      	movs	r3, #1
 8101102:	73fb      	strb	r3, [r7, #15]
        break;
 8101104:	e030      	b.n	8101168 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8101106:	687b      	ldr	r3, [r7, #4]
 8101108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810110a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810110e:	2b00      	cmp	r3, #0
 8101110:	d025      	beq.n	810115e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8101112:	2301      	movs	r3, #1
 8101114:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8101116:	e022      	b.n	810115e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8101118:	687b      	ldr	r3, [r7, #4]
 810111a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810111c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8101120:	d11f      	bne.n	8101162 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8101122:	2301      	movs	r3, #1
 8101124:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8101126:	e01c      	b.n	8101162 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8101128:	687b      	ldr	r3, [r7, #4]
 810112a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810112c:	2b02      	cmp	r3, #2
 810112e:	d902      	bls.n	8101136 <DMA_CheckFifoParam+0xb6>
 8101130:	2b03      	cmp	r3, #3
 8101132:	d003      	beq.n	810113c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8101134:	e018      	b.n	8101168 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8101136:	2301      	movs	r3, #1
 8101138:	73fb      	strb	r3, [r7, #15]
        break;
 810113a:	e015      	b.n	8101168 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 810113c:	687b      	ldr	r3, [r7, #4]
 810113e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101140:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8101144:	2b00      	cmp	r3, #0
 8101146:	d00e      	beq.n	8101166 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8101148:	2301      	movs	r3, #1
 810114a:	73fb      	strb	r3, [r7, #15]
    break;
 810114c:	e00b      	b.n	8101166 <DMA_CheckFifoParam+0xe6>
        break;
 810114e:	bf00      	nop
 8101150:	e00a      	b.n	8101168 <DMA_CheckFifoParam+0xe8>
        break;
 8101152:	bf00      	nop
 8101154:	e008      	b.n	8101168 <DMA_CheckFifoParam+0xe8>
        break;
 8101156:	bf00      	nop
 8101158:	e006      	b.n	8101168 <DMA_CheckFifoParam+0xe8>
        break;
 810115a:	bf00      	nop
 810115c:	e004      	b.n	8101168 <DMA_CheckFifoParam+0xe8>
        break;
 810115e:	bf00      	nop
 8101160:	e002      	b.n	8101168 <DMA_CheckFifoParam+0xe8>
        break;
 8101162:	bf00      	nop
 8101164:	e000      	b.n	8101168 <DMA_CheckFifoParam+0xe8>
    break;
 8101166:	bf00      	nop
    }
  }

  return status;
 8101168:	7bfb      	ldrb	r3, [r7, #15]
}
 810116a:	4618      	mov	r0, r3
 810116c:	3714      	adds	r7, #20
 810116e:	46bd      	mov	sp, r7
 8101170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101174:	4770      	bx	lr
 8101176:	bf00      	nop

08101178 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8101178:	b480      	push	{r7}
 810117a:	b085      	sub	sp, #20
 810117c:	af00      	add	r7, sp, #0
 810117e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8101180:	687b      	ldr	r3, [r7, #4]
 8101182:	681b      	ldr	r3, [r3, #0]
 8101184:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8101186:	687b      	ldr	r3, [r7, #4]
 8101188:	681b      	ldr	r3, [r3, #0]
 810118a:	4a3a      	ldr	r2, [pc, #232]	; (8101274 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 810118c:	4293      	cmp	r3, r2
 810118e:	d022      	beq.n	81011d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8101190:	687b      	ldr	r3, [r7, #4]
 8101192:	681b      	ldr	r3, [r3, #0]
 8101194:	4a38      	ldr	r2, [pc, #224]	; (8101278 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8101196:	4293      	cmp	r3, r2
 8101198:	d01d      	beq.n	81011d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 810119a:	687b      	ldr	r3, [r7, #4]
 810119c:	681b      	ldr	r3, [r3, #0]
 810119e:	4a37      	ldr	r2, [pc, #220]	; (810127c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 81011a0:	4293      	cmp	r3, r2
 81011a2:	d018      	beq.n	81011d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81011a4:	687b      	ldr	r3, [r7, #4]
 81011a6:	681b      	ldr	r3, [r3, #0]
 81011a8:	4a35      	ldr	r2, [pc, #212]	; (8101280 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 81011aa:	4293      	cmp	r3, r2
 81011ac:	d013      	beq.n	81011d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81011ae:	687b      	ldr	r3, [r7, #4]
 81011b0:	681b      	ldr	r3, [r3, #0]
 81011b2:	4a34      	ldr	r2, [pc, #208]	; (8101284 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 81011b4:	4293      	cmp	r3, r2
 81011b6:	d00e      	beq.n	81011d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81011b8:	687b      	ldr	r3, [r7, #4]
 81011ba:	681b      	ldr	r3, [r3, #0]
 81011bc:	4a32      	ldr	r2, [pc, #200]	; (8101288 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 81011be:	4293      	cmp	r3, r2
 81011c0:	d009      	beq.n	81011d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81011c2:	687b      	ldr	r3, [r7, #4]
 81011c4:	681b      	ldr	r3, [r3, #0]
 81011c6:	4a31      	ldr	r2, [pc, #196]	; (810128c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 81011c8:	4293      	cmp	r3, r2
 81011ca:	d004      	beq.n	81011d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81011cc:	687b      	ldr	r3, [r7, #4]
 81011ce:	681b      	ldr	r3, [r3, #0]
 81011d0:	4a2f      	ldr	r2, [pc, #188]	; (8101290 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 81011d2:	4293      	cmp	r3, r2
 81011d4:	d101      	bne.n	81011da <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 81011d6:	2301      	movs	r3, #1
 81011d8:	e000      	b.n	81011dc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 81011da:	2300      	movs	r3, #0
 81011dc:	2b00      	cmp	r3, #0
 81011de:	d01c      	beq.n	810121a <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 81011e0:	687b      	ldr	r3, [r7, #4]
 81011e2:	681b      	ldr	r3, [r3, #0]
 81011e4:	b2db      	uxtb	r3, r3
 81011e6:	3b08      	subs	r3, #8
 81011e8:	4a2a      	ldr	r2, [pc, #168]	; (8101294 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 81011ea:	fba2 2303 	umull	r2, r3, r2, r3
 81011ee:	091b      	lsrs	r3, r3, #4
 81011f0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 81011f2:	68fb      	ldr	r3, [r7, #12]
 81011f4:	f103 53b0 	add.w	r3, r3, #369098752	; 0x16000000
 81011f8:	f503 4316 	add.w	r3, r3, #38400	; 0x9600
 81011fc:	009b      	lsls	r3, r3, #2
 81011fe:	461a      	mov	r2, r3
 8101200:	687b      	ldr	r3, [r7, #4]
 8101202:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8101204:	687b      	ldr	r3, [r7, #4]
 8101206:	4a24      	ldr	r2, [pc, #144]	; (8101298 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8101208:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 810120a:	68fb      	ldr	r3, [r7, #12]
 810120c:	f003 031f 	and.w	r3, r3, #31
 8101210:	2201      	movs	r2, #1
 8101212:	409a      	lsls	r2, r3
 8101214:	687b      	ldr	r3, [r7, #4]
 8101216:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8101218:	e026      	b.n	8101268 <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 810121a:	687b      	ldr	r3, [r7, #4]
 810121c:	681b      	ldr	r3, [r3, #0]
 810121e:	b2db      	uxtb	r3, r3
 8101220:	3b10      	subs	r3, #16
 8101222:	4a1e      	ldr	r2, [pc, #120]	; (810129c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8101224:	fba2 2303 	umull	r2, r3, r2, r3
 8101228:	091b      	lsrs	r3, r3, #4
 810122a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 810122c:	68bb      	ldr	r3, [r7, #8]
 810122e:	4a1c      	ldr	r2, [pc, #112]	; (81012a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8101230:	4293      	cmp	r3, r2
 8101232:	d806      	bhi.n	8101242 <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 8101234:	68bb      	ldr	r3, [r7, #8]
 8101236:	4a1b      	ldr	r2, [pc, #108]	; (81012a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8101238:	4293      	cmp	r3, r2
 810123a:	d902      	bls.n	8101242 <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 810123c:	68fb      	ldr	r3, [r7, #12]
 810123e:	3308      	adds	r3, #8
 8101240:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8101242:	68fb      	ldr	r3, [r7, #12]
 8101244:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8101248:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 810124c:	009b      	lsls	r3, r3, #2
 810124e:	461a      	mov	r2, r3
 8101250:	687b      	ldr	r3, [r7, #4]
 8101252:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8101254:	687b      	ldr	r3, [r7, #4]
 8101256:	4a14      	ldr	r2, [pc, #80]	; (81012a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8101258:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 810125a:	68fb      	ldr	r3, [r7, #12]
 810125c:	f003 031f 	and.w	r3, r3, #31
 8101260:	2201      	movs	r2, #1
 8101262:	409a      	lsls	r2, r3
 8101264:	687b      	ldr	r3, [r7, #4]
 8101266:	669a      	str	r2, [r3, #104]	; 0x68
}
 8101268:	bf00      	nop
 810126a:	3714      	adds	r7, #20
 810126c:	46bd      	mov	sp, r7
 810126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101272:	4770      	bx	lr
 8101274:	58025408 	.word	0x58025408
 8101278:	5802541c 	.word	0x5802541c
 810127c:	58025430 	.word	0x58025430
 8101280:	58025444 	.word	0x58025444
 8101284:	58025458 	.word	0x58025458
 8101288:	5802546c 	.word	0x5802546c
 810128c:	58025480 	.word	0x58025480
 8101290:	58025494 	.word	0x58025494
 8101294:	cccccccd 	.word	0xcccccccd
 8101298:	58025880 	.word	0x58025880
 810129c:	aaaaaaab 	.word	0xaaaaaaab
 81012a0:	400204b8 	.word	0x400204b8
 81012a4:	4002040f 	.word	0x4002040f
 81012a8:	40020880 	.word	0x40020880

081012ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 81012ac:	b480      	push	{r7}
 81012ae:	b085      	sub	sp, #20
 81012b0:	af00      	add	r7, sp, #0
 81012b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 81012b4:	687b      	ldr	r3, [r7, #4]
 81012b6:	685b      	ldr	r3, [r3, #4]
 81012b8:	b2db      	uxtb	r3, r3
 81012ba:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 81012bc:	68fb      	ldr	r3, [r7, #12]
 81012be:	2b00      	cmp	r3, #0
 81012c0:	d04a      	beq.n	8101358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 81012c2:	68fb      	ldr	r3, [r7, #12]
 81012c4:	2b08      	cmp	r3, #8
 81012c6:	d847      	bhi.n	8101358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 81012c8:	687b      	ldr	r3, [r7, #4]
 81012ca:	681b      	ldr	r3, [r3, #0]
 81012cc:	4a25      	ldr	r2, [pc, #148]	; (8101364 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 81012ce:	4293      	cmp	r3, r2
 81012d0:	d022      	beq.n	8101318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81012d2:	687b      	ldr	r3, [r7, #4]
 81012d4:	681b      	ldr	r3, [r3, #0]
 81012d6:	4a24      	ldr	r2, [pc, #144]	; (8101368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 81012d8:	4293      	cmp	r3, r2
 81012da:	d01d      	beq.n	8101318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81012dc:	687b      	ldr	r3, [r7, #4]
 81012de:	681b      	ldr	r3, [r3, #0]
 81012e0:	4a22      	ldr	r2, [pc, #136]	; (810136c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 81012e2:	4293      	cmp	r3, r2
 81012e4:	d018      	beq.n	8101318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81012e6:	687b      	ldr	r3, [r7, #4]
 81012e8:	681b      	ldr	r3, [r3, #0]
 81012ea:	4a21      	ldr	r2, [pc, #132]	; (8101370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 81012ec:	4293      	cmp	r3, r2
 81012ee:	d013      	beq.n	8101318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81012f0:	687b      	ldr	r3, [r7, #4]
 81012f2:	681b      	ldr	r3, [r3, #0]
 81012f4:	4a1f      	ldr	r2, [pc, #124]	; (8101374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 81012f6:	4293      	cmp	r3, r2
 81012f8:	d00e      	beq.n	8101318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 81012fa:	687b      	ldr	r3, [r7, #4]
 81012fc:	681b      	ldr	r3, [r3, #0]
 81012fe:	4a1e      	ldr	r2, [pc, #120]	; (8101378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8101300:	4293      	cmp	r3, r2
 8101302:	d009      	beq.n	8101318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8101304:	687b      	ldr	r3, [r7, #4]
 8101306:	681b      	ldr	r3, [r3, #0]
 8101308:	4a1c      	ldr	r2, [pc, #112]	; (810137c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 810130a:	4293      	cmp	r3, r2
 810130c:	d004      	beq.n	8101318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810130e:	687b      	ldr	r3, [r7, #4]
 8101310:	681b      	ldr	r3, [r3, #0]
 8101312:	4a1b      	ldr	r2, [pc, #108]	; (8101380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8101314:	4293      	cmp	r3, r2
 8101316:	d101      	bne.n	810131c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8101318:	2301      	movs	r3, #1
 810131a:	e000      	b.n	810131e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 810131c:	2300      	movs	r3, #0
 810131e:	2b00      	cmp	r3, #0
 8101320:	d00a      	beq.n	8101338 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8101322:	68fa      	ldr	r2, [r7, #12]
 8101324:	4b17      	ldr	r3, [pc, #92]	; (8101384 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8101326:	4413      	add	r3, r2
 8101328:	009b      	lsls	r3, r3, #2
 810132a:	461a      	mov	r2, r3
 810132c:	687b      	ldr	r3, [r7, #4]
 810132e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8101330:	687b      	ldr	r3, [r7, #4]
 8101332:	4a15      	ldr	r2, [pc, #84]	; (8101388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8101334:	671a      	str	r2, [r3, #112]	; 0x70
 8101336:	e009      	b.n	810134c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8101338:	68fa      	ldr	r2, [r7, #12]
 810133a:	4b14      	ldr	r3, [pc, #80]	; (810138c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 810133c:	4413      	add	r3, r2
 810133e:	009b      	lsls	r3, r3, #2
 8101340:	461a      	mov	r2, r3
 8101342:	687b      	ldr	r3, [r7, #4]
 8101344:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8101346:	687b      	ldr	r3, [r7, #4]
 8101348:	4a11      	ldr	r2, [pc, #68]	; (8101390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 810134a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 810134c:	68fb      	ldr	r3, [r7, #12]
 810134e:	3b01      	subs	r3, #1
 8101350:	2201      	movs	r2, #1
 8101352:	409a      	lsls	r2, r3
 8101354:	687b      	ldr	r3, [r7, #4]
 8101356:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8101358:	bf00      	nop
 810135a:	3714      	adds	r7, #20
 810135c:	46bd      	mov	sp, r7
 810135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101362:	4770      	bx	lr
 8101364:	58025408 	.word	0x58025408
 8101368:	5802541c 	.word	0x5802541c
 810136c:	58025430 	.word	0x58025430
 8101370:	58025444 	.word	0x58025444
 8101374:	58025458 	.word	0x58025458
 8101378:	5802546c 	.word	0x5802546c
 810137c:	58025480 	.word	0x58025480
 8101380:	58025494 	.word	0x58025494
 8101384:	1600963f 	.word	0x1600963f
 8101388:	58025940 	.word	0x58025940
 810138c:	1000823f 	.word	0x1000823f
 8101390:	40020940 	.word	0x40020940

08101394 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8101394:	b480      	push	{r7}
 8101396:	b083      	sub	sp, #12
 8101398:	af00      	add	r7, sp, #0
 810139a:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 810139c:	4b05      	ldr	r3, [pc, #20]	; (81013b4 <HAL_HSEM_ActivateNotification+0x20>)
 810139e:	681a      	ldr	r2, [r3, #0]
 81013a0:	4904      	ldr	r1, [pc, #16]	; (81013b4 <HAL_HSEM_ActivateNotification+0x20>)
 81013a2:	687b      	ldr	r3, [r7, #4]
 81013a4:	4313      	orrs	r3, r2
 81013a6:	600b      	str	r3, [r1, #0]
#endif
}
 81013a8:	bf00      	nop
 81013aa:	370c      	adds	r7, #12
 81013ac:	46bd      	mov	sp, r7
 81013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013b2:	4770      	bx	lr
 81013b4:	58026510 	.word	0x58026510

081013b8 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81013b8:	b580      	push	{r7, lr}
 81013ba:	b084      	sub	sp, #16
 81013bc:	af00      	add	r7, sp, #0
 81013be:	60f8      	str	r0, [r7, #12]
 81013c0:	460b      	mov	r3, r1
 81013c2:	607a      	str	r2, [r7, #4]
 81013c4:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81013c6:	4b37      	ldr	r3, [pc, #220]	; (81014a4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81013c8:	681b      	ldr	r3, [r3, #0]
 81013ca:	f023 0201 	bic.w	r2, r3, #1
 81013ce:	4935      	ldr	r1, [pc, #212]	; (81014a4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81013d0:	68fb      	ldr	r3, [r7, #12]
 81013d2:	4313      	orrs	r3, r2
 81013d4:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81013d6:	687b      	ldr	r3, [r7, #4]
 81013d8:	2b00      	cmp	r3, #0
 81013da:	d123      	bne.n	8101424 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81013dc:	f7ff fa30 	bl	8100840 <HAL_GetCurrentCPUID>
 81013e0:	4603      	mov	r3, r0
 81013e2:	2b03      	cmp	r3, #3
 81013e4:	d158      	bne.n	8101498 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81013e6:	4b2f      	ldr	r3, [pc, #188]	; (81014a4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81013e8:	691b      	ldr	r3, [r3, #16]
 81013ea:	4a2e      	ldr	r2, [pc, #184]	; (81014a4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81013ec:	f023 0301 	bic.w	r3, r3, #1
 81013f0:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81013f2:	4b2d      	ldr	r3, [pc, #180]	; (81014a8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81013f4:	691b      	ldr	r3, [r3, #16]
 81013f6:	4a2c      	ldr	r2, [pc, #176]	; (81014a8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81013f8:	f043 0304 	orr.w	r3, r3, #4
 81013fc:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 81013fe:	f3bf 8f4f 	dsb	sy
}
 8101402:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101404:	f3bf 8f6f 	isb	sy
}
 8101408:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810140a:	7afb      	ldrb	r3, [r7, #11]
 810140c:	2b01      	cmp	r3, #1
 810140e:	d101      	bne.n	8101414 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101410:	bf30      	wfi
 8101412:	e000      	b.n	8101416 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101414:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101416:	4b24      	ldr	r3, [pc, #144]	; (81014a8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101418:	691b      	ldr	r3, [r3, #16]
 810141a:	4a23      	ldr	r2, [pc, #140]	; (81014a8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810141c:	f023 0304 	bic.w	r3, r3, #4
 8101420:	6113      	str	r3, [r2, #16]
 8101422:	e03c      	b.n	810149e <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8101424:	687b      	ldr	r3, [r7, #4]
 8101426:	2b01      	cmp	r3, #1
 8101428:	d123      	bne.n	8101472 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810142a:	f7ff fa09 	bl	8100840 <HAL_GetCurrentCPUID>
 810142e:	4603      	mov	r3, r0
 8101430:	2b01      	cmp	r3, #1
 8101432:	d133      	bne.n	810149c <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8101434:	4b1b      	ldr	r3, [pc, #108]	; (81014a4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101436:	695b      	ldr	r3, [r3, #20]
 8101438:	4a1a      	ldr	r2, [pc, #104]	; (81014a4 <HAL_PWREx_EnterSTOPMode+0xec>)
 810143a:	f023 0302 	bic.w	r3, r3, #2
 810143e:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101440:	4b19      	ldr	r3, [pc, #100]	; (81014a8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101442:	691b      	ldr	r3, [r3, #16]
 8101444:	4a18      	ldr	r2, [pc, #96]	; (81014a8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101446:	f043 0304 	orr.w	r3, r3, #4
 810144a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 810144c:	f3bf 8f4f 	dsb	sy
}
 8101450:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101452:	f3bf 8f6f 	isb	sy
}
 8101456:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101458:	7afb      	ldrb	r3, [r7, #11]
 810145a:	2b01      	cmp	r3, #1
 810145c:	d101      	bne.n	8101462 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810145e:	bf30      	wfi
 8101460:	e000      	b.n	8101464 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101462:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101464:	4b10      	ldr	r3, [pc, #64]	; (81014a8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101466:	691b      	ldr	r3, [r3, #16]
 8101468:	4a0f      	ldr	r2, [pc, #60]	; (81014a8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810146a:	f023 0304 	bic.w	r3, r3, #4
 810146e:	6113      	str	r3, [r2, #16]
 8101470:	e015      	b.n	810149e <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8101472:	f7ff f9e5 	bl	8100840 <HAL_GetCurrentCPUID>
 8101476:	4603      	mov	r3, r0
 8101478:	2b03      	cmp	r3, #3
 810147a:	d106      	bne.n	810148a <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 810147c:	4b09      	ldr	r3, [pc, #36]	; (81014a4 <HAL_PWREx_EnterSTOPMode+0xec>)
 810147e:	691b      	ldr	r3, [r3, #16]
 8101480:	4a08      	ldr	r2, [pc, #32]	; (81014a4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101482:	f023 0304 	bic.w	r3, r3, #4
 8101486:	6113      	str	r3, [r2, #16]
 8101488:	e009      	b.n	810149e <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810148a:	4b06      	ldr	r3, [pc, #24]	; (81014a4 <HAL_PWREx_EnterSTOPMode+0xec>)
 810148c:	695b      	ldr	r3, [r3, #20]
 810148e:	4a05      	ldr	r2, [pc, #20]	; (81014a4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101490:	f023 0304 	bic.w	r3, r3, #4
 8101494:	6153      	str	r3, [r2, #20]
 8101496:	e002      	b.n	810149e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8101498:	bf00      	nop
 810149a:	e000      	b.n	810149e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810149c:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 810149e:	3710      	adds	r7, #16
 81014a0:	46bd      	mov	sp, r7
 81014a2:	bd80      	pop	{r7, pc}
 81014a4:	58024800 	.word	0x58024800
 81014a8:	e000ed00 	.word	0xe000ed00

081014ac <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81014ac:	b580      	push	{r7, lr}
 81014ae:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81014b0:	f7ff f9c6 	bl	8100840 <HAL_GetCurrentCPUID>
 81014b4:	4603      	mov	r3, r0
 81014b6:	2b03      	cmp	r3, #3
 81014b8:	d101      	bne.n	81014be <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81014ba:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81014bc:	e001      	b.n	81014c2 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81014be:	bf40      	sev
    __WFE ();
 81014c0:	bf20      	wfe
}
 81014c2:	bf00      	nop
 81014c4:	bd80      	pop	{r7, pc}
	...

081014c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81014c8:	b480      	push	{r7}
 81014ca:	b089      	sub	sp, #36	; 0x24
 81014cc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81014ce:	4bb3      	ldr	r3, [pc, #716]	; (810179c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81014d0:	691b      	ldr	r3, [r3, #16]
 81014d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81014d6:	2b18      	cmp	r3, #24
 81014d8:	f200 8155 	bhi.w	8101786 <HAL_RCC_GetSysClockFreq+0x2be>
 81014dc:	a201      	add	r2, pc, #4	; (adr r2, 81014e4 <HAL_RCC_GetSysClockFreq+0x1c>)
 81014de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81014e2:	bf00      	nop
 81014e4:	08101549 	.word	0x08101549
 81014e8:	08101787 	.word	0x08101787
 81014ec:	08101787 	.word	0x08101787
 81014f0:	08101787 	.word	0x08101787
 81014f4:	08101787 	.word	0x08101787
 81014f8:	08101787 	.word	0x08101787
 81014fc:	08101787 	.word	0x08101787
 8101500:	08101787 	.word	0x08101787
 8101504:	0810156f 	.word	0x0810156f
 8101508:	08101787 	.word	0x08101787
 810150c:	08101787 	.word	0x08101787
 8101510:	08101787 	.word	0x08101787
 8101514:	08101787 	.word	0x08101787
 8101518:	08101787 	.word	0x08101787
 810151c:	08101787 	.word	0x08101787
 8101520:	08101787 	.word	0x08101787
 8101524:	08101575 	.word	0x08101575
 8101528:	08101787 	.word	0x08101787
 810152c:	08101787 	.word	0x08101787
 8101530:	08101787 	.word	0x08101787
 8101534:	08101787 	.word	0x08101787
 8101538:	08101787 	.word	0x08101787
 810153c:	08101787 	.word	0x08101787
 8101540:	08101787 	.word	0x08101787
 8101544:	0810157b 	.word	0x0810157b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101548:	4b94      	ldr	r3, [pc, #592]	; (810179c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810154a:	681b      	ldr	r3, [r3, #0]
 810154c:	f003 0320 	and.w	r3, r3, #32
 8101550:	2b00      	cmp	r3, #0
 8101552:	d009      	beq.n	8101568 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8101554:	4b91      	ldr	r3, [pc, #580]	; (810179c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101556:	681b      	ldr	r3, [r3, #0]
 8101558:	08db      	lsrs	r3, r3, #3
 810155a:	f003 0303 	and.w	r3, r3, #3
 810155e:	4a90      	ldr	r2, [pc, #576]	; (81017a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101560:	fa22 f303 	lsr.w	r3, r2, r3
 8101564:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8101566:	e111      	b.n	810178c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8101568:	4b8d      	ldr	r3, [pc, #564]	; (81017a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810156a:	61bb      	str	r3, [r7, #24]
    break;
 810156c:	e10e      	b.n	810178c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 810156e:	4b8d      	ldr	r3, [pc, #564]	; (81017a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101570:	61bb      	str	r3, [r7, #24]
    break;
 8101572:	e10b      	b.n	810178c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8101574:	4b8c      	ldr	r3, [pc, #560]	; (81017a8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8101576:	61bb      	str	r3, [r7, #24]
    break;
 8101578:	e108      	b.n	810178c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810157a:	4b88      	ldr	r3, [pc, #544]	; (810179c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810157c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810157e:	f003 0303 	and.w	r3, r3, #3
 8101582:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8101584:	4b85      	ldr	r3, [pc, #532]	; (810179c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101588:	091b      	lsrs	r3, r3, #4
 810158a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810158e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8101590:	4b82      	ldr	r3, [pc, #520]	; (810179c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101594:	f003 0301 	and.w	r3, r3, #1
 8101598:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 810159a:	4b80      	ldr	r3, [pc, #512]	; (810179c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810159c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810159e:	08db      	lsrs	r3, r3, #3
 81015a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81015a4:	68fa      	ldr	r2, [r7, #12]
 81015a6:	fb02 f303 	mul.w	r3, r2, r3
 81015aa:	ee07 3a90 	vmov	s15, r3
 81015ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81015b2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 81015b6:	693b      	ldr	r3, [r7, #16]
 81015b8:	2b00      	cmp	r3, #0
 81015ba:	f000 80e1 	beq.w	8101780 <HAL_RCC_GetSysClockFreq+0x2b8>
 81015be:	697b      	ldr	r3, [r7, #20]
 81015c0:	2b02      	cmp	r3, #2
 81015c2:	f000 8083 	beq.w	81016cc <HAL_RCC_GetSysClockFreq+0x204>
 81015c6:	697b      	ldr	r3, [r7, #20]
 81015c8:	2b02      	cmp	r3, #2
 81015ca:	f200 80a1 	bhi.w	8101710 <HAL_RCC_GetSysClockFreq+0x248>
 81015ce:	697b      	ldr	r3, [r7, #20]
 81015d0:	2b00      	cmp	r3, #0
 81015d2:	d003      	beq.n	81015dc <HAL_RCC_GetSysClockFreq+0x114>
 81015d4:	697b      	ldr	r3, [r7, #20]
 81015d6:	2b01      	cmp	r3, #1
 81015d8:	d056      	beq.n	8101688 <HAL_RCC_GetSysClockFreq+0x1c0>
 81015da:	e099      	b.n	8101710 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81015dc:	4b6f      	ldr	r3, [pc, #444]	; (810179c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81015de:	681b      	ldr	r3, [r3, #0]
 81015e0:	f003 0320 	and.w	r3, r3, #32
 81015e4:	2b00      	cmp	r3, #0
 81015e6:	d02d      	beq.n	8101644 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81015e8:	4b6c      	ldr	r3, [pc, #432]	; (810179c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81015ea:	681b      	ldr	r3, [r3, #0]
 81015ec:	08db      	lsrs	r3, r3, #3
 81015ee:	f003 0303 	and.w	r3, r3, #3
 81015f2:	4a6b      	ldr	r2, [pc, #428]	; (81017a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81015f4:	fa22 f303 	lsr.w	r3, r2, r3
 81015f8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81015fa:	687b      	ldr	r3, [r7, #4]
 81015fc:	ee07 3a90 	vmov	s15, r3
 8101600:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101604:	693b      	ldr	r3, [r7, #16]
 8101606:	ee07 3a90 	vmov	s15, r3
 810160a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810160e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101612:	4b62      	ldr	r3, [pc, #392]	; (810179c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810161a:	ee07 3a90 	vmov	s15, r3
 810161e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101622:	ed97 6a02 	vldr	s12, [r7, #8]
 8101626:	eddf 5a61 	vldr	s11, [pc, #388]	; 81017ac <HAL_RCC_GetSysClockFreq+0x2e4>
 810162a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810162e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101632:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810163a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810163e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8101642:	e087      	b.n	8101754 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101644:	693b      	ldr	r3, [r7, #16]
 8101646:	ee07 3a90 	vmov	s15, r3
 810164a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810164e:	eddf 6a58 	vldr	s13, [pc, #352]	; 81017b0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8101652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101656:	4b51      	ldr	r3, [pc, #324]	; (810179c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810165a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810165e:	ee07 3a90 	vmov	s15, r3
 8101662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101666:	ed97 6a02 	vldr	s12, [r7, #8]
 810166a:	eddf 5a50 	vldr	s11, [pc, #320]	; 81017ac <HAL_RCC_GetSysClockFreq+0x2e4>
 810166e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101676:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810167a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810167e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101682:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101686:	e065      	b.n	8101754 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101688:	693b      	ldr	r3, [r7, #16]
 810168a:	ee07 3a90 	vmov	s15, r3
 810168e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101692:	eddf 6a48 	vldr	s13, [pc, #288]	; 81017b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8101696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810169a:	4b40      	ldr	r3, [pc, #256]	; (810179c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810169e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81016a2:	ee07 3a90 	vmov	s15, r3
 81016a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81016aa:	ed97 6a02 	vldr	s12, [r7, #8]
 81016ae:	eddf 5a3f 	vldr	s11, [pc, #252]	; 81017ac <HAL_RCC_GetSysClockFreq+0x2e4>
 81016b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81016b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81016ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81016be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81016c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81016c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81016ca:	e043      	b.n	8101754 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81016cc:	693b      	ldr	r3, [r7, #16]
 81016ce:	ee07 3a90 	vmov	s15, r3
 81016d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81016d6:	eddf 6a38 	vldr	s13, [pc, #224]	; 81017b8 <HAL_RCC_GetSysClockFreq+0x2f0>
 81016da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81016de:	4b2f      	ldr	r3, [pc, #188]	; (810179c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81016e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81016e6:	ee07 3a90 	vmov	s15, r3
 81016ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81016ee:	ed97 6a02 	vldr	s12, [r7, #8]
 81016f2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 81017ac <HAL_RCC_GetSysClockFreq+0x2e4>
 81016f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81016fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81016fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101706:	ee67 7a27 	vmul.f32	s15, s14, s15
 810170a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810170e:	e021      	b.n	8101754 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101710:	693b      	ldr	r3, [r7, #16]
 8101712:	ee07 3a90 	vmov	s15, r3
 8101716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810171a:	eddf 6a26 	vldr	s13, [pc, #152]	; 81017b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 810171e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101722:	4b1e      	ldr	r3, [pc, #120]	; (810179c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810172a:	ee07 3a90 	vmov	s15, r3
 810172e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101732:	ed97 6a02 	vldr	s12, [r7, #8]
 8101736:	eddf 5a1d 	vldr	s11, [pc, #116]	; 81017ac <HAL_RCC_GetSysClockFreq+0x2e4>
 810173a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810173e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101742:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810174a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810174e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101752:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8101754:	4b11      	ldr	r3, [pc, #68]	; (810179c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101758:	0a5b      	lsrs	r3, r3, #9
 810175a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810175e:	3301      	adds	r3, #1
 8101760:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8101762:	683b      	ldr	r3, [r7, #0]
 8101764:	ee07 3a90 	vmov	s15, r3
 8101768:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 810176c:	edd7 6a07 	vldr	s13, [r7, #28]
 8101770:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101774:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101778:	ee17 3a90 	vmov	r3, s15
 810177c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 810177e:	e005      	b.n	810178c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8101780:	2300      	movs	r3, #0
 8101782:	61bb      	str	r3, [r7, #24]
    break;
 8101784:	e002      	b.n	810178c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8101786:	4b07      	ldr	r3, [pc, #28]	; (81017a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101788:	61bb      	str	r3, [r7, #24]
    break;
 810178a:	bf00      	nop
  }

  return sysclockfreq;
 810178c:	69bb      	ldr	r3, [r7, #24]
}
 810178e:	4618      	mov	r0, r3
 8101790:	3724      	adds	r7, #36	; 0x24
 8101792:	46bd      	mov	sp, r7
 8101794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101798:	4770      	bx	lr
 810179a:	bf00      	nop
 810179c:	58024400 	.word	0x58024400
 81017a0:	03d09000 	.word	0x03d09000
 81017a4:	003d0900 	.word	0x003d0900
 81017a8:	017d7840 	.word	0x017d7840
 81017ac:	46000000 	.word	0x46000000
 81017b0:	4c742400 	.word	0x4c742400
 81017b4:	4a742400 	.word	0x4a742400
 81017b8:	4bbebc20 	.word	0x4bbebc20

081017bc <__libc_init_array>:
 81017bc:	b570      	push	{r4, r5, r6, lr}
 81017be:	4d0d      	ldr	r5, [pc, #52]	; (81017f4 <__libc_init_array+0x38>)
 81017c0:	4c0d      	ldr	r4, [pc, #52]	; (81017f8 <__libc_init_array+0x3c>)
 81017c2:	1b64      	subs	r4, r4, r5
 81017c4:	10a4      	asrs	r4, r4, #2
 81017c6:	2600      	movs	r6, #0
 81017c8:	42a6      	cmp	r6, r4
 81017ca:	d109      	bne.n	81017e0 <__libc_init_array+0x24>
 81017cc:	4d0b      	ldr	r5, [pc, #44]	; (81017fc <__libc_init_array+0x40>)
 81017ce:	4c0c      	ldr	r4, [pc, #48]	; (8101800 <__libc_init_array+0x44>)
 81017d0:	f000 f818 	bl	8101804 <_init>
 81017d4:	1b64      	subs	r4, r4, r5
 81017d6:	10a4      	asrs	r4, r4, #2
 81017d8:	2600      	movs	r6, #0
 81017da:	42a6      	cmp	r6, r4
 81017dc:	d105      	bne.n	81017ea <__libc_init_array+0x2e>
 81017de:	bd70      	pop	{r4, r5, r6, pc}
 81017e0:	f855 3b04 	ldr.w	r3, [r5], #4
 81017e4:	4798      	blx	r3
 81017e6:	3601      	adds	r6, #1
 81017e8:	e7ee      	b.n	81017c8 <__libc_init_array+0xc>
 81017ea:	f855 3b04 	ldr.w	r3, [r5], #4
 81017ee:	4798      	blx	r3
 81017f0:	3601      	adds	r6, #1
 81017f2:	e7f2      	b.n	81017da <__libc_init_array+0x1e>
 81017f4:	08101834 	.word	0x08101834
 81017f8:	08101834 	.word	0x08101834
 81017fc:	08101834 	.word	0x08101834
 8101800:	08101838 	.word	0x08101838

08101804 <_init>:
 8101804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8101806:	bf00      	nop
 8101808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810180a:	bc08      	pop	{r3}
 810180c:	469e      	mov	lr, r3
 810180e:	4770      	bx	lr

08101810 <_fini>:
 8101810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8101812:	bf00      	nop
 8101814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8101816:	bc08      	pop	{r3}
 8101818:	469e      	mov	lr, r3
 810181a:	4770      	bx	lr
