
STM32H745I-InternTests_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b210  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800b4b0  0800b4b0  0001b4b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b560  0800b560  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800b560  0800b560  0001b560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b568  0800b568  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b568  0800b568  0001b568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b56c  0800b56c  0001b56c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  0800b570  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  24000078  0800b5e8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240003f8  0800b5e8  000203f8  2**0
                  ALLOC
 11 .buffer       00000450  30000000  30000000  00030000  2**2
                  ALLOC
 12 .buffer2      00000040  38000000  38000000  00030000  2**2
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001af04  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002a49  00000000  00000000  0003afaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001388  00000000  00000000  0003d9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001290  00000000  00000000  0003ed80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003b41a  00000000  00000000  00040010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001a09f  00000000  00000000  0007b42a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0018c97c  00000000  00000000  000954c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00221e45  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000575c  00000000  00000000  00221e98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b498 	.word	0x0800b498

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	0800b498 	.word	0x0800b498

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <DMA2_Stream0_IRQHandler>:

	uint32_t RxBuf[12];

}RxB;
void DMA2_Stream0_IRQHandler(void)
{
 80007c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007c2:	b087      	sub	sp, #28
 80007c4:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

	  HAL_GPIO_TogglePin(GPIOI,GPIO_PIN_13);
 80007c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ca:	4825      	ldr	r0, [pc, #148]	; (8000860 <DMA2_Stream0_IRQHandler+0xa0>)
 80007cc:	f004 f9ed 	bl	8004baa <HAL_GPIO_TogglePin>


	  /* Get the RTC current Time*/
	  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80007d0:	2200      	movs	r2, #0
 80007d2:	4924      	ldr	r1, [pc, #144]	; (8000864 <DMA2_Stream0_IRQHandler+0xa4>)
 80007d4:	4824      	ldr	r0, [pc, #144]	; (8000868 <DMA2_Stream0_IRQHandler+0xa8>)
 80007d6:	f006 fe95 	bl	8007504 <HAL_RTC_GetTime>
	  /*Get tge RTC current Date*/
	  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 80007da:	2200      	movs	r2, #0
 80007dc:	4923      	ldr	r1, [pc, #140]	; (800086c <DMA2_Stream0_IRQHandler+0xac>)
 80007de:	4822      	ldr	r0, [pc, #136]	; (8000868 <DMA2_Stream0_IRQHandler+0xa8>)
 80007e0:	f006 ff74 	bl	80076cc <HAL_RTC_GetDate>

	  if(alarm){
 80007e4:	4b22      	ldr	r3, [pc, #136]	; (8000870 <DMA2_Stream0_IRQHandler+0xb0>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d007      	beq.n	80007fc <DMA2_Stream0_IRQHandler+0x3c>
		  sprintf((char*)totalBuffer,"FALSE ALARM!\r\n");
 80007ec:	4921      	ldr	r1, [pc, #132]	; (8000874 <DMA2_Stream0_IRQHandler+0xb4>)
 80007ee:	4822      	ldr	r0, [pc, #136]	; (8000878 <DMA2_Stream0_IRQHandler+0xb8>)
 80007f0:	f00a f9e4 	bl	800abbc <siprintf>
		  alarm = 0;
 80007f4:	4b1e      	ldr	r3, [pc, #120]	; (8000870 <DMA2_Stream0_IRQHandler+0xb0>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	701a      	strb	r2, [r3, #0]
 80007fa:	e01f      	b.n	800083c <DMA2_Stream0_IRQHandler+0x7c>
	  }else{
		  sprintf((char*)totalBuffer,"%02d-%02d-%02d %02d:%02d:%02d Turn : %d\r\n",gDate.Date,gDate.Month, 2000 + gDate.Year, gTime.Hours,gTime.Minutes,gTime.Seconds,(int)RxB.RxBuf[0]);
 80007fc:	4b1b      	ldr	r3, [pc, #108]	; (800086c <DMA2_Stream0_IRQHandler+0xac>)
 80007fe:	789b      	ldrb	r3, [r3, #2]
 8000800:	461d      	mov	r5, r3
 8000802:	4b1a      	ldr	r3, [pc, #104]	; (800086c <DMA2_Stream0_IRQHandler+0xac>)
 8000804:	785b      	ldrb	r3, [r3, #1]
 8000806:	461e      	mov	r6, r3
 8000808:	4b18      	ldr	r3, [pc, #96]	; (800086c <DMA2_Stream0_IRQHandler+0xac>)
 800080a:	78db      	ldrb	r3, [r3, #3]
 800080c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000810:	4a14      	ldr	r2, [pc, #80]	; (8000864 <DMA2_Stream0_IRQHandler+0xa4>)
 8000812:	7812      	ldrb	r2, [r2, #0]
 8000814:	4611      	mov	r1, r2
 8000816:	4a13      	ldr	r2, [pc, #76]	; (8000864 <DMA2_Stream0_IRQHandler+0xa4>)
 8000818:	7852      	ldrb	r2, [r2, #1]
 800081a:	4610      	mov	r0, r2
 800081c:	4a11      	ldr	r2, [pc, #68]	; (8000864 <DMA2_Stream0_IRQHandler+0xa4>)
 800081e:	7892      	ldrb	r2, [r2, #2]
 8000820:	4614      	mov	r4, r2
 8000822:	4a16      	ldr	r2, [pc, #88]	; (800087c <DMA2_Stream0_IRQHandler+0xbc>)
 8000824:	6812      	ldr	r2, [r2, #0]
 8000826:	9204      	str	r2, [sp, #16]
 8000828:	9403      	str	r4, [sp, #12]
 800082a:	9002      	str	r0, [sp, #8]
 800082c:	9101      	str	r1, [sp, #4]
 800082e:	9300      	str	r3, [sp, #0]
 8000830:	4633      	mov	r3, r6
 8000832:	462a      	mov	r2, r5
 8000834:	4912      	ldr	r1, [pc, #72]	; (8000880 <DMA2_Stream0_IRQHandler+0xc0>)
 8000836:	4810      	ldr	r0, [pc, #64]	; (8000878 <DMA2_Stream0_IRQHandler+0xb8>)
 8000838:	f00a f9c0 	bl	800abbc <siprintf>
		//  sprintf((char*)totalBuffer,"%02d-%02d-%02d %02d:%02d:%02d\r\n",gDate.Date,gDate.Month, 2022 + gDate.Year, gTime.Hours,gTime.Minutes,gTime.Seconds);
	  }


	  HAL_UART_Transmit(&huart3,(uint8_t *)totalBuffer, strlen(totalBuffer),HAL_MAX_DELAY);
 800083c:	480e      	ldr	r0, [pc, #56]	; (8000878 <DMA2_Stream0_IRQHandler+0xb8>)
 800083e:	f7ff fd4f 	bl	80002e0 <strlen>
 8000842:	4603      	mov	r3, r0
 8000844:	b29a      	uxth	r2, r3
 8000846:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800084a:	490b      	ldr	r1, [pc, #44]	; (8000878 <DMA2_Stream0_IRQHandler+0xb8>)
 800084c:	480d      	ldr	r0, [pc, #52]	; (8000884 <DMA2_Stream0_IRQHandler+0xc4>)
 800084e:	f008 fc49 	bl	80090e4 <HAL_UART_Transmit>

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 8000852:	480d      	ldr	r0, [pc, #52]	; (8000888 <DMA2_Stream0_IRQHandler+0xc8>)
 8000854:	f002 fcce 	bl	80031f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000858:	bf00      	nop
 800085a:	3704      	adds	r7, #4
 800085c:	46bd      	mov	sp, r7
 800085e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000860:	58022000 	.word	0x58022000
 8000864:	240003cc 	.word	0x240003cc
 8000868:	24000094 	.word	0x24000094
 800086c:	240003c8 	.word	0x240003c8
 8000870:	240003c6 	.word	0x240003c6
 8000874:	0800b4b0 	.word	0x0800b4b0
 8000878:	24000394 	.word	0x24000394
 800087c:	38000010 	.word	0x38000010
 8000880:	0800b4c0 	.word	0x0800b4c0
 8000884:	24000214 	.word	0x24000214
 8000888:	240002a4 	.word	0x240002a4

0800088c <TIM5_IRQHandler>:

void TIM5_IRQHandler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
  // Counter for making example data.
  TxBuf[0] = indx;
 8000890:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <TIM5_IRQHandler+0x34>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	461a      	mov	r2, r3
 8000896:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <TIM5_IRQHandler+0x38>)
 8000898:	601a      	str	r2, [r3, #0]
  //DMA reads and writes from SRAM to SRAM4(D3 Domain)
  HAL_DMA_Start_IT(&hdma_memtomem_dma2_stream0, (uint32_t)TxBuf, (uint32_t) RxB.RxBuf, 12);
 800089a:	490a      	ldr	r1, [pc, #40]	; (80008c4 <TIM5_IRQHandler+0x38>)
 800089c:	4a0a      	ldr	r2, [pc, #40]	; (80008c8 <TIM5_IRQHandler+0x3c>)
 800089e:	230c      	movs	r3, #12
 80008a0:	480a      	ldr	r0, [pc, #40]	; (80008cc <TIM5_IRQHandler+0x40>)
 80008a2:	f001 fcd9 	bl	8002258 <HAL_DMA_Start_IT>
  indx++;
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <TIM5_IRQHandler+0x34>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	3301      	adds	r3, #1
 80008ac:	4a04      	ldr	r2, [pc, #16]	; (80008c0 <TIM5_IRQHandler+0x34>)
 80008ae:	6013      	str	r3, [r2, #0]
  HAL_TIM_Base_Start_IT(&htim4);
 80008b0:	4807      	ldr	r0, [pc, #28]	; (80008d0 <TIM5_IRQHandler+0x44>)
 80008b2:	f007 fa59 	bl	8007d68 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80008b6:	4807      	ldr	r0, [pc, #28]	; (80008d4 <TIM5_IRQHandler+0x48>)
 80008b8:	f007 fb2f 	bl	8007f1a <HAL_TIM_IRQHandler>

  /* USER CODE BEGIN TIM5_IRQn 1 */


  /* USER CODE END TIM5_IRQn 1 */
}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	24000008 	.word	0x24000008
 80008c4:	30000420 	.word	0x30000420
 80008c8:	38000010 	.word	0x38000010
 80008cc:	240002a4 	.word	0x240002a4
 80008d0:	24000104 	.word	0x24000104
 80008d4:	24000150 	.word	0x24000150

080008d8 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOJ,GPIO_PIN_2);
 80008dc:	2104      	movs	r1, #4
 80008de:	4804      	ldr	r0, [pc, #16]	; (80008f0 <TIM4_IRQHandler+0x18>)
 80008e0:	f004 f963 	bl	8004baa <HAL_GPIO_TogglePin>
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80008e4:	4803      	ldr	r0, [pc, #12]	; (80008f4 <TIM4_IRQHandler+0x1c>)
 80008e6:	f007 fb18 	bl	8007f1a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	58022400 	.word	0x58022400
 80008f4:	24000104 	.word	0x24000104

080008f8 <set_time>:

// For manuelly setting time
void set_time(void){
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b086      	sub	sp, #24
 80008fc:	af00      	add	r7, sp, #0

	  RTC_TimeTypeDef sTime = {0};
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
	  RTC_DateTypeDef sDate = {0};
 800090c:	2300      	movs	r3, #0
 800090e:	603b      	str	r3, [r7, #0]



	  sTime.Hours = 0x16;
 8000910:	2316      	movs	r3, #22
 8000912:	713b      	strb	r3, [r7, #4]
	  sTime.Minutes = 0x42;
 8000914:	2342      	movs	r3, #66	; 0x42
 8000916:	717b      	strb	r3, [r7, #5]
	  sTime.Seconds = 0x30;
 8000918:	2330      	movs	r3, #48	; 0x30
 800091a:	71bb      	strb	r3, [r7, #6]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800091c:	2300      	movs	r3, #0
 800091e:	613b      	str	r3, [r7, #16]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	2201      	movs	r2, #1
 8000928:	4619      	mov	r1, r3
 800092a:	480f      	ldr	r0, [pc, #60]	; (8000968 <set_time+0x70>)
 800092c:	f006 fd4c 	bl	80073c8 <HAL_RTC_SetTime>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <set_time+0x42>
	  {
	    Error_Handler();
 8000936:	f000 fc9d 	bl	8001274 <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 800093a:	2304      	movs	r3, #4
 800093c:	703b      	strb	r3, [r7, #0]
	  sDate.Month = RTC_MONTH_SEPTEMBER;
 800093e:	2309      	movs	r3, #9
 8000940:	707b      	strb	r3, [r7, #1]
	  sDate.Date = 0x8;
 8000942:	2308      	movs	r3, #8
 8000944:	70bb      	strb	r3, [r7, #2]
	  sDate.Year = 0x0;
 8000946:	2300      	movs	r3, #0
 8000948:	70fb      	strb	r3, [r7, #3]
	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800094a:	463b      	mov	r3, r7
 800094c:	2201      	movs	r2, #1
 800094e:	4619      	mov	r1, r3
 8000950:	4805      	ldr	r0, [pc, #20]	; (8000968 <set_time+0x70>)
 8000952:	f006 fe33 	bl	80075bc <HAL_RTC_SetDate>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <set_time+0x68>
	  {
	    Error_Handler();
 800095c:	f000 fc8a 	bl	8001274 <Error_Handler>
	  }
	  /* USER CODE BEGIN Check_RTC_BKUP */

	  /* USER CODE END Check_RTC_BKUP */

}
 8000960:	bf00      	nop
 8000962:	3718      	adds	r7, #24
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	24000094 	.word	0x24000094

0800096c <set_alarm>:

// For manuelly setting alarm
void set_alarm(void){
 800096c:	b580      	push	{r7, lr}
 800096e:	b08a      	sub	sp, #40	; 0x28
 8000970:	af00      	add	r7, sp, #0

	 RTC_AlarmTypeDef sAlarm = {0};
 8000972:	463b      	mov	r3, r7
 8000974:	2228      	movs	r2, #40	; 0x28
 8000976:	2100      	movs	r1, #0
 8000978:	4618      	mov	r0, r3
 800097a:	f00a f917 	bl	800abac <memset>

	  /** Enable the Alarm A
	  */
	  sAlarm.AlarmTime.Hours = 0x16;
 800097e:	2316      	movs	r3, #22
 8000980:	703b      	strb	r3, [r7, #0]
	  sAlarm.AlarmTime.Minutes = 0x55;
 8000982:	2355      	movs	r3, #85	; 0x55
 8000984:	707b      	strb	r3, [r7, #1]
	  sAlarm.AlarmTime.Seconds = 0x30;
 8000986:	2330      	movs	r3, #48	; 0x30
 8000988:	70bb      	strb	r3, [r7, #2]
	  sAlarm.AlarmTime.SubSeconds = 0x0;
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
	  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000996:	2300      	movs	r3, #0
 8000998:	617b      	str	r3, [r7, #20]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800099a:	2300      	movs	r3, #0
 800099c:	61bb      	str	r3, [r7, #24]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800099e:	2300      	movs	r3, #0
 80009a0:	61fb      	str	r3, [r7, #28]
	  sAlarm.AlarmDateWeekDay = 0x8;
 80009a2:	2308      	movs	r3, #8
 80009a4:	f887 3020 	strb.w	r3, [r7, #32]
	  sAlarm.Alarm = RTC_ALARM_A;
 80009a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80009ae:	463b      	mov	r3, r7
 80009b0:	2201      	movs	r2, #1
 80009b2:	4619      	mov	r1, r3
 80009b4:	4805      	ldr	r0, [pc, #20]	; (80009cc <set_alarm+0x60>)
 80009b6:	f006 fed7 	bl	8007768 <HAL_RTC_SetAlarm_IT>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <set_alarm+0x58>
	  {
	    Error_Handler();
 80009c0:	f000 fc58 	bl	8001274 <Error_Handler>
	  }
}
 80009c4:	bf00      	nop
 80009c6:	3728      	adds	r7, #40	; 0x28
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	24000094 	.word	0x24000094

080009d0 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
	alarm = 1;
 80009d8:	4b04      	ldr	r3, [pc, #16]	; (80009ec <HAL_RTC_AlarmAEventCallback+0x1c>)
 80009da:	2201      	movs	r2, #1
 80009dc:	701a      	strb	r2, [r3, #0]
}
 80009de:	bf00      	nop
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	240003c6 	.word	0x240003c6

080009f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
//  int32_t timeout;

/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80009f6:	f000 fc0f 	bl	8001218 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80009fa:	4b43      	ldr	r3, [pc, #268]	; (8000b08 <main+0x118>)
 80009fc:	695b      	ldr	r3, [r3, #20]
 80009fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d11b      	bne.n	8000a3e <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a06:	f3bf 8f4f 	dsb	sy
}
 8000a0a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a0c:	f3bf 8f6f 	isb	sy
}
 8000a10:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000a12:	4b3d      	ldr	r3, [pc, #244]	; (8000b08 <main+0x118>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000a1a:	f3bf 8f4f 	dsb	sy
}
 8000a1e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a20:	f3bf 8f6f 	isb	sy
}
 8000a24:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000a26:	4b38      	ldr	r3, [pc, #224]	; (8000b08 <main+0x118>)
 8000a28:	695b      	ldr	r3, [r3, #20]
 8000a2a:	4a37      	ldr	r2, [pc, #220]	; (8000b08 <main+0x118>)
 8000a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a30:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a32:	f3bf 8f4f 	dsb	sy
}
 8000a36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a38:	f3bf 8f6f 	isb	sy
}
 8000a3c:	e000      	b.n	8000a40 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000a3e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000a40:	4b31      	ldr	r3, [pc, #196]	; (8000b08 <main+0x118>)
 8000a42:	695b      	ldr	r3, [r3, #20]
 8000a44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d138      	bne.n	8000abe <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000a4c:	4b2e      	ldr	r3, [pc, #184]	; (8000b08 <main+0x118>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000a54:	f3bf 8f4f 	dsb	sy
}
 8000a58:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000a5a:	4b2b      	ldr	r3, [pc, #172]	; (8000b08 <main+0x118>)
 8000a5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000a60:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	0b5b      	lsrs	r3, r3, #13
 8000a66:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000a6a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	08db      	lsrs	r3, r3, #3
 8000a70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a74:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	015a      	lsls	r2, r3, #5
 8000a7a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000a7e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000a80:	687a      	ldr	r2, [r7, #4]
 8000a82:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a84:	4920      	ldr	r1, [pc, #128]	; (8000b08 <main+0x118>)
 8000a86:	4313      	orrs	r3, r2
 8000a88:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	1e5a      	subs	r2, r3, #1
 8000a90:	607a      	str	r2, [r7, #4]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d1ef      	bne.n	8000a76 <main+0x86>
    } while(sets-- != 0U);
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	1e5a      	subs	r2, r3, #1
 8000a9a:	60ba      	str	r2, [r7, #8]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d1e5      	bne.n	8000a6c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000aa0:	f3bf 8f4f 	dsb	sy
}
 8000aa4:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000aa6:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <main+0x118>)
 8000aa8:	695b      	ldr	r3, [r3, #20]
 8000aaa:	4a17      	ldr	r2, [pc, #92]	; (8000b08 <main+0x118>)
 8000aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ab0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ab2:	f3bf 8f4f 	dsb	sy
}
 8000ab6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ab8:	f3bf 8f6f 	isb	sy
}
 8000abc:	e000      	b.n	8000ac0 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000abe:	bf00      	nop
*/
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac0:	f000 fe30 	bl	8001724 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac4:	f000 f826 	bl	8000b14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac8:	f000 fb0e 	bl	80010e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000acc:	f000 fa6c 	bl	8000fa8 <MX_DMA_Init>
  MX_TIM5_Init();
 8000ad0:	f000 f9ce 	bl	8000e70 <MX_TIM5_Init>
  MX_USART3_UART_Init();
 8000ad4:	f000 fa1c 	bl	8000f10 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 8000ad8:	f000 f97a 	bl	8000dd0 <MX_TIM4_Init>
  MX_TIM1_Init();
 8000adc:	f000 f8cc 	bl	8000c78 <MX_TIM1_Init>
  MX_RTC_Init();
 8000ae0:	f000 f894 	bl	8000c0c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */


  if( HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0)!= 0x32F2){
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	4809      	ldr	r0, [pc, #36]	; (8000b0c <main+0x11c>)
 8000ae8:	f007 f8c6 	bl	8007c78 <HAL_RTCEx_BKUPRead>
 8000aec:	4603      	mov	r3, r0
 8000aee:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d001      	beq.n	8000afa <main+0x10a>
	  set_time();
 8000af6:	f7ff feff 	bl	80008f8 <set_time>
  }
  set_alarm();
 8000afa:	f7ff ff37 	bl	800096c <set_alarm>


  HAL_TIM_Base_Start_IT(&htim5);
 8000afe:	4804      	ldr	r0, [pc, #16]	; (8000b10 <main+0x120>)
 8000b00:	f007 f932 	bl	8007d68 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <main+0x114>
 8000b06:	bf00      	nop
 8000b08:	e000ed00 	.word	0xe000ed00
 8000b0c:	24000094 	.word	0x24000094
 8000b10:	24000150 	.word	0x24000150

08000b14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b09c      	sub	sp, #112	; 0x70
 8000b18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1e:	224c      	movs	r2, #76	; 0x4c
 8000b20:	2100      	movs	r1, #0
 8000b22:	4618      	mov	r0, r3
 8000b24:	f00a f842 	bl	800abac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	2220      	movs	r2, #32
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f00a f83c 	bl	800abac <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000b34:	2004      	movs	r0, #4
 8000b36:	f004 f853 	bl	8004be0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	603b      	str	r3, [r7, #0]
 8000b3e:	4b31      	ldr	r3, [pc, #196]	; (8000c04 <SystemClock_Config+0xf0>)
 8000b40:	699b      	ldr	r3, [r3, #24]
 8000b42:	4a30      	ldr	r2, [pc, #192]	; (8000c04 <SystemClock_Config+0xf0>)
 8000b44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b48:	6193      	str	r3, [r2, #24]
 8000b4a:	4b2e      	ldr	r3, [pc, #184]	; (8000c04 <SystemClock_Config+0xf0>)
 8000b4c:	699b      	ldr	r3, [r3, #24]
 8000b4e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b52:	603b      	str	r3, [r7, #0]
 8000b54:	4b2c      	ldr	r3, [pc, #176]	; (8000c08 <SystemClock_Config+0xf4>)
 8000b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b58:	4a2b      	ldr	r2, [pc, #172]	; (8000c08 <SystemClock_Config+0xf4>)
 8000b5a:	f043 0301 	orr.w	r3, r3, #1
 8000b5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000b60:	4b29      	ldr	r3, [pc, #164]	; (8000c08 <SystemClock_Config+0xf4>)
 8000b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b64:	f003 0301 	and.w	r3, r3, #1
 8000b68:	603b      	str	r3, [r7, #0]
 8000b6a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b6c:	bf00      	nop
 8000b6e:	4b25      	ldr	r3, [pc, #148]	; (8000c04 <SystemClock_Config+0xf0>)
 8000b70:	699b      	ldr	r3, [r3, #24]
 8000b72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b7a:	d1f8      	bne.n	8000b6e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000b7c:	2309      	movs	r3, #9
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b84:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b86:	2301      	movs	r3, #1
 8000b88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000b92:	2305      	movs	r3, #5
 8000b94:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000b96:	23c0      	movs	r3, #192	; 0xc0
 8000b98:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b9e:	2304      	movs	r3, #4
 8000ba0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 8000ba2:	2304      	movs	r3, #4
 8000ba4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000ba6:	2308      	movs	r3, #8
 8000ba8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000baa:	2300      	movs	r3, #0
 8000bac:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f004 f86c 	bl	8004c94 <HAL_RCC_OscConfig>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000bc2:	f000 fb57 	bl	8001274 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bc6:	233f      	movs	r3, #63	; 0x3f
 8000bc8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000bd2:	2308      	movs	r3, #8
 8000bd4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000bd6:	2340      	movs	r3, #64	; 0x40
 8000bd8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000bda:	2340      	movs	r3, #64	; 0x40
 8000bdc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000bde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000be2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000be4:	2340      	movs	r3, #64	; 0x40
 8000be6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	2104      	movs	r1, #4
 8000bec:	4618      	mov	r0, r3
 8000bee:	f004 fc7f 	bl	80054f0 <HAL_RCC_ClockConfig>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000bf8:	f000 fb3c 	bl	8001274 <Error_Handler>
  }
}
 8000bfc:	bf00      	nop
 8000bfe:	3770      	adds	r7, #112	; 0x70
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	58024800 	.word	0x58024800
 8000c08:	58000400 	.word	0x58000400

08000c0c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c10:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <MX_RTC_Init+0x60>)
 8000c12:	4a17      	ldr	r2, [pc, #92]	; (8000c70 <MX_RTC_Init+0x64>)
 8000c14:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c16:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <MX_RTC_Init+0x60>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c1c:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <MX_RTC_Init+0x60>)
 8000c1e:	227f      	movs	r2, #127	; 0x7f
 8000c20:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c22:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <MX_RTC_Init+0x60>)
 8000c24:	22ff      	movs	r2, #255	; 0xff
 8000c26:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c28:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <MX_RTC_Init+0x60>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c2e:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <MX_RTC_Init+0x60>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c34:	4b0d      	ldr	r3, [pc, #52]	; (8000c6c <MX_RTC_Init+0x60>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000c3a:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <MX_RTC_Init+0x60>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	615a      	str	r2, [r3, #20]
  if((RCC->BDCR & RCC_BDCR_RTCEN)==0){
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <MX_RTC_Init+0x68>)
 8000c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000c44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d107      	bne.n	8000c5c <MX_RTC_Init+0x50>
	  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c4c:	4807      	ldr	r0, [pc, #28]	; (8000c6c <MX_RTC_Init+0x60>)
 8000c4e:	f006 fb43 	bl	80072d8 <HAL_RTC_Init>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_RTC_Init+0x50>
	  {
	    Error_Handler();
 8000c58:	f000 fb0c 	bl	8001274 <Error_Handler>
	  }
  }


  /* USER CODE BEGIN Check_RTC_BKUP */
  HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR0,0x32F2);
 8000c5c:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8000c60:	2100      	movs	r1, #0
 8000c62:	4802      	ldr	r0, [pc, #8]	; (8000c6c <MX_RTC_Init+0x60>)
 8000c64:	f006 fff0 	bl	8007c48 <HAL_RTCEx_BKUPWrite>
//  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	24000094 	.word	0x24000094
 8000c70:	58004000 	.word	0x58004000
 8000c74:	58024400 	.word	0x58024400

08000c78 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b09a      	sub	sp, #104	; 0x68
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c7e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c8c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
 8000ca8:	615a      	str	r2, [r3, #20]
 8000caa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	222c      	movs	r2, #44	; 0x2c
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f009 ff7a 	bl	800abac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cb8:	4b43      	ldr	r3, [pc, #268]	; (8000dc8 <MX_TIM1_Init+0x150>)
 8000cba:	4a44      	ldr	r2, [pc, #272]	; (8000dcc <MX_TIM1_Init+0x154>)
 8000cbc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 240-1;
 8000cbe:	4b42      	ldr	r3, [pc, #264]	; (8000dc8 <MX_TIM1_Init+0x150>)
 8000cc0:	22ef      	movs	r2, #239	; 0xef
 8000cc2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc4:	4b40      	ldr	r3, [pc, #256]	; (8000dc8 <MX_TIM1_Init+0x150>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8000cca:	4b3f      	ldr	r3, [pc, #252]	; (8000dc8 <MX_TIM1_Init+0x150>)
 8000ccc:	2263      	movs	r2, #99	; 0x63
 8000cce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cd0:	4b3d      	ldr	r3, [pc, #244]	; (8000dc8 <MX_TIM1_Init+0x150>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cd6:	4b3c      	ldr	r3, [pc, #240]	; (8000dc8 <MX_TIM1_Init+0x150>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cdc:	4b3a      	ldr	r3, [pc, #232]	; (8000dc8 <MX_TIM1_Init+0x150>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ce2:	4839      	ldr	r0, [pc, #228]	; (8000dc8 <MX_TIM1_Init+0x150>)
 8000ce4:	f006 ffe8 	bl	8007cb8 <HAL_TIM_Base_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000cee:	f000 fac1 	bl	8001274 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf6:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cf8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4832      	ldr	r0, [pc, #200]	; (8000dc8 <MX_TIM1_Init+0x150>)
 8000d00:	f007 fb3e 	bl	8008380 <HAL_TIM_ConfigClockSource>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000d0a:	f000 fab3 	bl	8001274 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d0e:	482e      	ldr	r0, [pc, #184]	; (8000dc8 <MX_TIM1_Init+0x150>)
 8000d10:	f007 f8a2 	bl	8007e58 <HAL_TIM_PWM_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000d1a:	f000 faab 	bl	8001274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d22:	2300      	movs	r3, #0
 8000d24:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d26:	2300      	movs	r3, #0
 8000d28:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d2a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4825      	ldr	r0, [pc, #148]	; (8000dc8 <MX_TIM1_Init+0x150>)
 8000d32:	f008 f85d 	bl	8008df0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000d3c:	f000 fa9a 	bl	8001274 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d40:	2360      	movs	r3, #96	; 0x60
 8000d42:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d50:	2300      	movs	r3, #0
 8000d52:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d54:	2300      	movs	r3, #0
 8000d56:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d60:	2200      	movs	r2, #0
 8000d62:	4619      	mov	r1, r3
 8000d64:	4818      	ldr	r0, [pc, #96]	; (8000dc8 <MX_TIM1_Init+0x150>)
 8000d66:	f007 f9f7 	bl	8008158 <HAL_TIM_PWM_ConfigChannel>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000d70:	f000 fa80 	bl	8001274 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d74:	2300      	movs	r3, #0
 8000d76:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d8c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d92:	2300      	movs	r3, #0
 8000d94:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000da0:	2300      	movs	r3, #0
 8000da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	4619      	mov	r1, r3
 8000da8:	4807      	ldr	r0, [pc, #28]	; (8000dc8 <MX_TIM1_Init+0x150>)
 8000daa:	f008 f8af 	bl	8008f0c <HAL_TIMEx_ConfigBreakDeadTime>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000db4:	f000 fa5e 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000db8:	4803      	ldr	r0, [pc, #12]	; (8000dc8 <MX_TIM1_Init+0x150>)
 8000dba:	f000 fb4d 	bl	8001458 <HAL_TIM_MspPostInit>

}
 8000dbe:	bf00      	nop
 8000dc0:	3768      	adds	r7, #104	; 0x68
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	240000b8 	.word	0x240000b8
 8000dcc:	40010000 	.word	0x40010000

08000dd0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b088      	sub	sp, #32
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dd6:	f107 0310 	add.w	r3, r7, #16
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
 8000de2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de4:	1d3b      	adds	r3, r7, #4
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000dee:	4b1e      	ldr	r3, [pc, #120]	; (8000e68 <MX_TIM4_Init+0x98>)
 8000df0:	4a1e      	ldr	r2, [pc, #120]	; (8000e6c <MX_TIM4_Init+0x9c>)
 8000df2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 24000 - 1;
 8000df4:	4b1c      	ldr	r3, [pc, #112]	; (8000e68 <MX_TIM4_Init+0x98>)
 8000df6:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 8000dfa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dfc:	4b1a      	ldr	r3, [pc, #104]	; (8000e68 <MX_TIM4_Init+0x98>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5000- 1;
 8000e02:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <MX_TIM4_Init+0x98>)
 8000e04:	f241 3287 	movw	r2, #4999	; 0x1387
 8000e08:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e0a:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <MX_TIM4_Init+0x98>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e10:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <MX_TIM4_Init+0x98>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e16:	4814      	ldr	r0, [pc, #80]	; (8000e68 <MX_TIM4_Init+0x98>)
 8000e18:	f006 ff4e 	bl	8007cb8 <HAL_TIM_Base_Init>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000e22:	f000 fa27 	bl	8001274 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e2a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e2c:	f107 0310 	add.w	r3, r7, #16
 8000e30:	4619      	mov	r1, r3
 8000e32:	480d      	ldr	r0, [pc, #52]	; (8000e68 <MX_TIM4_Init+0x98>)
 8000e34:	f007 faa4 	bl	8008380 <HAL_TIM_ConfigClockSource>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8000e3e:	f000 fa19 	bl	8001274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e42:	2300      	movs	r3, #0
 8000e44:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4806      	ldr	r0, [pc, #24]	; (8000e68 <MX_TIM4_Init+0x98>)
 8000e50:	f007 ffce 	bl	8008df0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8000e5a:	f000 fa0b 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000e5e:	bf00      	nop
 8000e60:	3720      	adds	r7, #32
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	24000104 	.word	0x24000104
 8000e6c:	40000800 	.word	0x40000800

08000e70 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b088      	sub	sp, #32
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e76:	f107 0310 	add.w	r3, r7, #16
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e84:	1d3b      	adds	r3, r7, #4
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e8e:	4b1e      	ldr	r3, [pc, #120]	; (8000f08 <MX_TIM5_Init+0x98>)
 8000e90:	4a1e      	ldr	r2, [pc, #120]	; (8000f0c <MX_TIM5_Init+0x9c>)
 8000e92:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 24000-1;
 8000e94:	4b1c      	ldr	r3, [pc, #112]	; (8000f08 <MX_TIM5_Init+0x98>)
 8000e96:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 8000e9a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e9c:	4b1a      	ldr	r3, [pc, #104]	; (8000f08 <MX_TIM5_Init+0x98>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000-1;
 8000ea2:	4b19      	ldr	r3, [pc, #100]	; (8000f08 <MX_TIM5_Init+0x98>)
 8000ea4:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ea8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eaa:	4b17      	ldr	r3, [pc, #92]	; (8000f08 <MX_TIM5_Init+0x98>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb0:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <MX_TIM5_Init+0x98>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000eb6:	4814      	ldr	r0, [pc, #80]	; (8000f08 <MX_TIM5_Init+0x98>)
 8000eb8:	f006 fefe 	bl	8007cb8 <HAL_TIM_Base_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8000ec2:	f000 f9d7 	bl	8001274 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ec6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000ecc:	f107 0310 	add.w	r3, r7, #16
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	480d      	ldr	r0, [pc, #52]	; (8000f08 <MX_TIM5_Init+0x98>)
 8000ed4:	f007 fa54 	bl	8008380 <HAL_TIM_ConfigClockSource>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8000ede:	f000 f9c9 	bl	8001274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	4619      	mov	r1, r3
 8000eee:	4806      	ldr	r0, [pc, #24]	; (8000f08 <MX_TIM5_Init+0x98>)
 8000ef0:	f007 ff7e 	bl	8008df0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8000efa:	f000 f9bb 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000efe:	bf00      	nop
 8000f00:	3720      	adds	r7, #32
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	24000150 	.word	0x24000150
 8000f0c:	40000c00 	.word	0x40000c00

08000f10 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f14:	4b22      	ldr	r3, [pc, #136]	; (8000fa0 <MX_USART3_UART_Init+0x90>)
 8000f16:	4a23      	ldr	r2, [pc, #140]	; (8000fa4 <MX_USART3_UART_Init+0x94>)
 8000f18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f1a:	4b21      	ldr	r3, [pc, #132]	; (8000fa0 <MX_USART3_UART_Init+0x90>)
 8000f1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f20:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f22:	4b1f      	ldr	r3, [pc, #124]	; (8000fa0 <MX_USART3_UART_Init+0x90>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f28:	4b1d      	ldr	r3, [pc, #116]	; (8000fa0 <MX_USART3_UART_Init+0x90>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f2e:	4b1c      	ldr	r3, [pc, #112]	; (8000fa0 <MX_USART3_UART_Init+0x90>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f34:	4b1a      	ldr	r3, [pc, #104]	; (8000fa0 <MX_USART3_UART_Init+0x90>)
 8000f36:	220c      	movs	r2, #12
 8000f38:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f3a:	4b19      	ldr	r3, [pc, #100]	; (8000fa0 <MX_USART3_UART_Init+0x90>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f40:	4b17      	ldr	r3, [pc, #92]	; (8000fa0 <MX_USART3_UART_Init+0x90>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f46:	4b16      	ldr	r3, [pc, #88]	; (8000fa0 <MX_USART3_UART_Init+0x90>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f4c:	4b14      	ldr	r3, [pc, #80]	; (8000fa0 <MX_USART3_UART_Init+0x90>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f52:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <MX_USART3_UART_Init+0x90>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f58:	4811      	ldr	r0, [pc, #68]	; (8000fa0 <MX_USART3_UART_Init+0x90>)
 8000f5a:	f008 f873 	bl	8009044 <HAL_UART_Init>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000f64:	f000 f986 	bl	8001274 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f68:	2100      	movs	r1, #0
 8000f6a:	480d      	ldr	r0, [pc, #52]	; (8000fa0 <MX_USART3_UART_Init+0x90>)
 8000f6c:	f009 fd2a 	bl	800a9c4 <HAL_UARTEx_SetTxFifoThreshold>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000f76:	f000 f97d 	bl	8001274 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4808      	ldr	r0, [pc, #32]	; (8000fa0 <MX_USART3_UART_Init+0x90>)
 8000f7e:	f009 fd5f 	bl	800aa40 <HAL_UARTEx_SetRxFifoThreshold>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000f88:	f000 f974 	bl	8001274 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f8c:	4804      	ldr	r0, [pc, #16]	; (8000fa0 <MX_USART3_UART_Init+0x90>)
 8000f8e:	f009 fce0 	bl	800a952 <HAL_UARTEx_DisableFifoMode>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000f98:	f000 f96c 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	24000214 	.word	0x24000214
 8000fa4:	40004800 	.word	0x40004800

08000fa8 <MX_DMA_Init>:
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  *   hdma_memtomem_dma2_stream1
  */
static void MX_DMA_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fae:	4b49      	ldr	r3, [pc, #292]	; (80010d4 <MX_DMA_Init+0x12c>)
 8000fb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fb4:	4a47      	ldr	r2, [pc, #284]	; (80010d4 <MX_DMA_Init+0x12c>)
 8000fb6:	f043 0302 	orr.w	r3, r3, #2
 8000fba:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000fbe:	4b45      	ldr	r3, [pc, #276]	; (80010d4 <MX_DMA_Init+0x12c>)
 8000fc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fc4:	f003 0302 	and.w	r3, r3, #2
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8000fcc:	4b42      	ldr	r3, [pc, #264]	; (80010d8 <MX_DMA_Init+0x130>)
 8000fce:	4a43      	ldr	r2, [pc, #268]	; (80010dc <MX_DMA_Init+0x134>)
 8000fd0:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Request = DMA_REQUEST_MEM2MEM;
 8000fd2:	4b41      	ldr	r3, [pc, #260]	; (80010d8 <MX_DMA_Init+0x130>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000fd8:	4b3f      	ldr	r3, [pc, #252]	; (80010d8 <MX_DMA_Init+0x130>)
 8000fda:	2280      	movs	r2, #128	; 0x80
 8000fdc:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8000fde:	4b3e      	ldr	r3, [pc, #248]	; (80010d8 <MX_DMA_Init+0x130>)
 8000fe0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fe4:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8000fe6:	4b3c      	ldr	r3, [pc, #240]	; (80010d8 <MX_DMA_Init+0x130>)
 8000fe8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fec:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000fee:	4b3a      	ldr	r3, [pc, #232]	; (80010d8 <MX_DMA_Init+0x130>)
 8000ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ff4:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ff6:	4b38      	ldr	r3, [pc, #224]	; (80010d8 <MX_DMA_Init+0x130>)
 8000ff8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ffc:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8000ffe:	4b36      	ldr	r3, [pc, #216]	; (80010d8 <MX_DMA_Init+0x130>)
 8001000:	2200      	movs	r2, #0
 8001002:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_HIGH;
 8001004:	4b34      	ldr	r3, [pc, #208]	; (80010d8 <MX_DMA_Init+0x130>)
 8001006:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800100a:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800100c:	4b32      	ldr	r3, [pc, #200]	; (80010d8 <MX_DMA_Init+0x130>)
 800100e:	2204      	movs	r2, #4
 8001010:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001012:	4b31      	ldr	r3, [pc, #196]	; (80010d8 <MX_DMA_Init+0x130>)
 8001014:	2203      	movs	r2, #3
 8001016:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8001018:	4b2f      	ldr	r3, [pc, #188]	; (80010d8 <MX_DMA_Init+0x130>)
 800101a:	2200      	movs	r2, #0
 800101c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800101e:	4b2e      	ldr	r3, [pc, #184]	; (80010d8 <MX_DMA_Init+0x130>)
 8001020:	2200      	movs	r2, #0
 8001022:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8001024:	482c      	ldr	r0, [pc, #176]	; (80010d8 <MX_DMA_Init+0x130>)
 8001026:	f000 fdbb 	bl	8001ba0 <HAL_DMA_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_DMA_Init+0x8c>
  {
    Error_Handler( );
 8001030:	f000 f920 	bl	8001274 <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream1 on DMA2_Stream1 */
  hdma_memtomem_dma2_stream1.Instance = DMA2_Stream1;
 8001034:	4b2a      	ldr	r3, [pc, #168]	; (80010e0 <MX_DMA_Init+0x138>)
 8001036:	4a2b      	ldr	r2, [pc, #172]	; (80010e4 <MX_DMA_Init+0x13c>)
 8001038:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream1.Init.Request = DMA_REQUEST_MEM2MEM;
 800103a:	4b29      	ldr	r3, [pc, #164]	; (80010e0 <MX_DMA_Init+0x138>)
 800103c:	2200      	movs	r2, #0
 800103e:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8001040:	4b27      	ldr	r3, [pc, #156]	; (80010e0 <MX_DMA_Init+0x138>)
 8001042:	2280      	movs	r2, #128	; 0x80
 8001044:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream1.Init.PeriphInc = DMA_PINC_ENABLE;
 8001046:	4b26      	ldr	r3, [pc, #152]	; (80010e0 <MX_DMA_Init+0x138>)
 8001048:	f44f 7200 	mov.w	r2, #512	; 0x200
 800104c:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream1.Init.MemInc = DMA_MINC_ENABLE;
 800104e:	4b24      	ldr	r3, [pc, #144]	; (80010e0 <MX_DMA_Init+0x138>)
 8001050:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001054:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001056:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <MX_DMA_Init+0x138>)
 8001058:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800105c:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800105e:	4b20      	ldr	r3, [pc, #128]	; (80010e0 <MX_DMA_Init+0x138>)
 8001060:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001064:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream1.Init.Mode = DMA_NORMAL;
 8001066:	4b1e      	ldr	r3, [pc, #120]	; (80010e0 <MX_DMA_Init+0x138>)
 8001068:	2200      	movs	r2, #0
 800106a:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream1.Init.Priority = DMA_PRIORITY_HIGH;
 800106c:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <MX_DMA_Init+0x138>)
 800106e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001072:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001074:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <MX_DMA_Init+0x138>)
 8001076:	2204      	movs	r2, #4
 8001078:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800107a:	4b19      	ldr	r3, [pc, #100]	; (80010e0 <MX_DMA_Init+0x138>)
 800107c:	2203      	movs	r2, #3
 800107e:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream1.Init.MemBurst = DMA_MBURST_SINGLE;
 8001080:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <MX_DMA_Init+0x138>)
 8001082:	2200      	movs	r2, #0
 8001084:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001086:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <MX_DMA_Init+0x138>)
 8001088:	2200      	movs	r2, #0
 800108a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream1) != HAL_OK)
 800108c:	4814      	ldr	r0, [pc, #80]	; (80010e0 <MX_DMA_Init+0x138>)
 800108e:	f000 fd87 	bl	8001ba0 <HAL_DMA_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_DMA_Init+0xf4>
  {
    Error_Handler( );
 8001098:	f000 f8ec 	bl	8001274 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800109c:	2200      	movs	r2, #0
 800109e:	2100      	movs	r1, #0
 80010a0:	2038      	movs	r0, #56	; 0x38
 80010a2:	f000 fcb8 	bl	8001a16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80010a6:	2038      	movs	r0, #56	; 0x38
 80010a8:	f000 fccf 	bl	8001a4a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80010ac:	2200      	movs	r2, #0
 80010ae:	2100      	movs	r1, #0
 80010b0:	2039      	movs	r0, #57	; 0x39
 80010b2:	f000 fcb0 	bl	8001a16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80010b6:	2039      	movs	r0, #57	; 0x39
 80010b8:	f000 fcc7 	bl	8001a4a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80010bc:	2200      	movs	r2, #0
 80010be:	2100      	movs	r1, #0
 80010c0:	203a      	movs	r0, #58	; 0x3a
 80010c2:	f000 fca8 	bl	8001a16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80010c6:	203a      	movs	r0, #58	; 0x3a
 80010c8:	f000 fcbf 	bl	8001a4a <HAL_NVIC_EnableIRQ>

}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	58024400 	.word	0x58024400
 80010d8:	240002a4 	.word	0x240002a4
 80010dc:	40020410 	.word	0x40020410
 80010e0:	2400031c 	.word	0x2400031c
 80010e4:	40020428 	.word	0x40020428

080010e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08c      	sub	sp, #48	; 0x30
 80010ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ee:	f107 031c 	add.w	r3, r7, #28
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	60da      	str	r2, [r3, #12]
 80010fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fe:	4b43      	ldr	r3, [pc, #268]	; (800120c <MX_GPIO_Init+0x124>)
 8001100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001104:	4a41      	ldr	r2, [pc, #260]	; (800120c <MX_GPIO_Init+0x124>)
 8001106:	f043 0304 	orr.w	r3, r3, #4
 800110a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800110e:	4b3f      	ldr	r3, [pc, #252]	; (800120c <MX_GPIO_Init+0x124>)
 8001110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001114:	f003 0304 	and.w	r3, r3, #4
 8001118:	61bb      	str	r3, [r7, #24]
 800111a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800111c:	4b3b      	ldr	r3, [pc, #236]	; (800120c <MX_GPIO_Init+0x124>)
 800111e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001122:	4a3a      	ldr	r2, [pc, #232]	; (800120c <MX_GPIO_Init+0x124>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800112c:	4b37      	ldr	r3, [pc, #220]	; (800120c <MX_GPIO_Init+0x124>)
 800112e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	617b      	str	r3, [r7, #20]
 8001138:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800113a:	4b34      	ldr	r3, [pc, #208]	; (800120c <MX_GPIO_Init+0x124>)
 800113c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001140:	4a32      	ldr	r2, [pc, #200]	; (800120c <MX_GPIO_Init+0x124>)
 8001142:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001146:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800114a:	4b30      	ldr	r3, [pc, #192]	; (800120c <MX_GPIO_Init+0x124>)
 800114c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001154:	613b      	str	r3, [r7, #16]
 8001156:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001158:	4b2c      	ldr	r3, [pc, #176]	; (800120c <MX_GPIO_Init+0x124>)
 800115a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800115e:	4a2b      	ldr	r2, [pc, #172]	; (800120c <MX_GPIO_Init+0x124>)
 8001160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001164:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001168:	4b28      	ldr	r3, [pc, #160]	; (800120c <MX_GPIO_Init+0x124>)
 800116a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800116e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001176:	4b25      	ldr	r3, [pc, #148]	; (800120c <MX_GPIO_Init+0x124>)
 8001178:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800117c:	4a23      	ldr	r2, [pc, #140]	; (800120c <MX_GPIO_Init+0x124>)
 800117e:	f043 0302 	orr.w	r3, r3, #2
 8001182:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001186:	4b21      	ldr	r3, [pc, #132]	; (800120c <MX_GPIO_Init+0x124>)
 8001188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800118c:	f003 0302 	and.w	r3, r3, #2
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001194:	4b1d      	ldr	r3, [pc, #116]	; (800120c <MX_GPIO_Init+0x124>)
 8001196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800119a:	4a1c      	ldr	r2, [pc, #112]	; (800120c <MX_GPIO_Init+0x124>)
 800119c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011a4:	4b19      	ldr	r3, [pc, #100]	; (800120c <MX_GPIO_Init+0x124>)
 80011a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_13, GPIO_PIN_RESET);
 80011b2:	2200      	movs	r2, #0
 80011b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011b8:	4815      	ldr	r0, [pc, #84]	; (8001210 <MX_GPIO_Init+0x128>)
 80011ba:	f003 fcdd 	bl	8004b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_2, GPIO_PIN_RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	2104      	movs	r1, #4
 80011c2:	4814      	ldr	r0, [pc, #80]	; (8001214 <MX_GPIO_Init+0x12c>)
 80011c4:	f003 fcd8 	bl	8004b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ce:	2301      	movs	r3, #1
 80011d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011d2:	2301      	movs	r3, #1
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2300      	movs	r3, #0
 80011d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80011da:	f107 031c 	add.w	r3, r7, #28
 80011de:	4619      	mov	r1, r3
 80011e0:	480b      	ldr	r0, [pc, #44]	; (8001210 <MX_GPIO_Init+0x128>)
 80011e2:	f003 fb19 	bl	8004818 <HAL_GPIO_Init>

  /*Configure GPIO pin : PJ2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011e6:	2304      	movs	r3, #4
 80011e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ea:	2301      	movs	r3, #1
 80011ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ee:	2301      	movs	r3, #1
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f2:	2300      	movs	r3, #0
 80011f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80011f6:	f107 031c 	add.w	r3, r7, #28
 80011fa:	4619      	mov	r1, r3
 80011fc:	4805      	ldr	r0, [pc, #20]	; (8001214 <MX_GPIO_Init+0x12c>)
 80011fe:	f003 fb0b 	bl	8004818 <HAL_GPIO_Init>

}
 8001202:	bf00      	nop
 8001204:	3730      	adds	r7, #48	; 0x30
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	58024400 	.word	0x58024400
 8001210:	58022000 	.word	0x58022000
 8001214:	58022400 	.word	0x58022400

08001218 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800121e:	463b      	mov	r3, r7
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800122a:	f000 fc29 	bl	8001a80 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800122e:	2301      	movs	r3, #1
 8001230:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001232:	2300      	movs	r3, #0
 8001234:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000420;
 8001236:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <MPU_Config+0x58>)
 8001238:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 800123a:	231b      	movs	r3, #27
 800123c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800123e:	2300      	movs	r3, #0
 8001240:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001242:	2300      	movs	r3, #0
 8001244:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001246:	2303      	movs	r3, #3
 8001248:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800124a:	2301      	movs	r3, #1
 800124c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800124e:	2301      	movs	r3, #1
 8001250:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001252:	2300      	movs	r3, #0
 8001254:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001256:	2301      	movs	r3, #1
 8001258:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800125a:	463b      	mov	r3, r7
 800125c:	4618      	mov	r0, r3
 800125e:	f000 fc47 	bl	8001af0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001262:	2004      	movs	r0, #4
 8001264:	f000 fc24 	bl	8001ab0 <HAL_MPU_Enable>

}
 8001268:	bf00      	nop
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	30000420 	.word	0x30000420

08001274 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001278:	b672      	cpsid	i
}
 800127a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800127c:	e7fe      	b.n	800127c <Error_Handler+0x8>
	...

08001280 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001286:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <HAL_MspInit+0x30>)
 8001288:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800128c:	4a08      	ldr	r2, [pc, #32]	; (80012b0 <HAL_MspInit+0x30>)
 800128e:	f043 0302 	orr.w	r3, r3, #2
 8001292:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <HAL_MspInit+0x30>)
 8001298:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800129c:	f003 0302 	and.w	r3, r3, #2
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	58024400 	.word	0x58024400

080012b4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b0b2      	sub	sp, #200	; 0xc8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012bc:	f107 030c 	add.w	r3, r7, #12
 80012c0:	22bc      	movs	r2, #188	; 0xbc
 80012c2:	2100      	movs	r1, #0
 80012c4:	4618      	mov	r0, r3
 80012c6:	f009 fc71 	bl	800abac <memset>
  if(hrtc->Instance==RTC)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a13      	ldr	r2, [pc, #76]	; (800131c <HAL_RTC_MspInit+0x68>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d11e      	bne.n	8001312 <HAL_RTC_MspInit+0x5e>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80012d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012d8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80012da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012e2:	f107 030c 	add.w	r3, r7, #12
 80012e6:	4618      	mov	r0, r3
 80012e8:	f004 fc8e 	bl	8005c08 <HAL_RCCEx_PeriphCLKConfig>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80012f2:	f7ff ffbf 	bl	8001274 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80012f6:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <HAL_RTC_MspInit+0x6c>)
 80012f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012fa:	4a09      	ldr	r2, [pc, #36]	; (8001320 <HAL_RTC_MspInit+0x6c>)
 80012fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001300:	6713      	str	r3, [r2, #112]	; 0x70
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	2100      	movs	r1, #0
 8001306:	2029      	movs	r0, #41	; 0x29
 8001308:	f000 fb85 	bl	8001a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800130c:	2029      	movs	r0, #41	; 0x29
 800130e:	f000 fb9c 	bl	8001a4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001312:	bf00      	nop
 8001314:	37c8      	adds	r7, #200	; 0xc8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	58004000 	.word	0x58004000
 8001320:	58024400 	.word	0x58024400

08001324 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a43      	ldr	r2, [pc, #268]	; (8001440 <HAL_TIM_Base_MspInit+0x11c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d146      	bne.n	80013c4 <HAL_TIM_Base_MspInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001336:	4b43      	ldr	r3, [pc, #268]	; (8001444 <HAL_TIM_Base_MspInit+0x120>)
 8001338:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800133c:	4a41      	ldr	r2, [pc, #260]	; (8001444 <HAL_TIM_Base_MspInit+0x120>)
 800133e:	f043 0301 	orr.w	r3, r3, #1
 8001342:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001346:	4b3f      	ldr	r3, [pc, #252]	; (8001444 <HAL_TIM_Base_MspInit+0x120>)
 8001348:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	617b      	str	r3, [r7, #20]
 8001352:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream2;
 8001354:	4b3c      	ldr	r3, [pc, #240]	; (8001448 <HAL_TIM_Base_MspInit+0x124>)
 8001356:	4a3d      	ldr	r2, [pc, #244]	; (800144c <HAL_TIM_Base_MspInit+0x128>)
 8001358:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 800135a:	4b3b      	ldr	r3, [pc, #236]	; (8001448 <HAL_TIM_Base_MspInit+0x124>)
 800135c:	220b      	movs	r2, #11
 800135e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001360:	4b39      	ldr	r3, [pc, #228]	; (8001448 <HAL_TIM_Base_MspInit+0x124>)
 8001362:	2240      	movs	r2, #64	; 0x40
 8001364:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001366:	4b38      	ldr	r3, [pc, #224]	; (8001448 <HAL_TIM_Base_MspInit+0x124>)
 8001368:	2200      	movs	r2, #0
 800136a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800136c:	4b36      	ldr	r3, [pc, #216]	; (8001448 <HAL_TIM_Base_MspInit+0x124>)
 800136e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001372:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001374:	4b34      	ldr	r3, [pc, #208]	; (8001448 <HAL_TIM_Base_MspInit+0x124>)
 8001376:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800137a:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800137c:	4b32      	ldr	r3, [pc, #200]	; (8001448 <HAL_TIM_Base_MspInit+0x124>)
 800137e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001382:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001384:	4b30      	ldr	r3, [pc, #192]	; (8001448 <HAL_TIM_Base_MspInit+0x124>)
 8001386:	2200      	movs	r2, #0
 8001388:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800138a:	4b2f      	ldr	r3, [pc, #188]	; (8001448 <HAL_TIM_Base_MspInit+0x124>)
 800138c:	2200      	movs	r2, #0
 800138e:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001390:	4b2d      	ldr	r3, [pc, #180]	; (8001448 <HAL_TIM_Base_MspInit+0x124>)
 8001392:	2200      	movs	r2, #0
 8001394:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001396:	482c      	ldr	r0, [pc, #176]	; (8001448 <HAL_TIM_Base_MspInit+0x124>)
 8001398:	f000 fc02 	bl	8001ba0 <HAL_DMA_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 80013a2:	f7ff ff67 	bl	8001274 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a27      	ldr	r2, [pc, #156]	; (8001448 <HAL_TIM_Base_MspInit+0x124>)
 80013aa:	625a      	str	r2, [r3, #36]	; 0x24
 80013ac:	4a26      	ldr	r2, [pc, #152]	; (8001448 <HAL_TIM_Base_MspInit+0x124>)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80013b2:	2200      	movs	r2, #0
 80013b4:	2100      	movs	r1, #0
 80013b6:	2019      	movs	r0, #25
 80013b8:	f000 fb2d 	bl	8001a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80013bc:	2019      	movs	r0, #25
 80013be:	f000 fb44 	bl	8001a4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80013c2:	e038      	b.n	8001436 <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM4)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a21      	ldr	r2, [pc, #132]	; (8001450 <HAL_TIM_Base_MspInit+0x12c>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d117      	bne.n	80013fe <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013ce:	4b1d      	ldr	r3, [pc, #116]	; (8001444 <HAL_TIM_Base_MspInit+0x120>)
 80013d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013d4:	4a1b      	ldr	r2, [pc, #108]	; (8001444 <HAL_TIM_Base_MspInit+0x120>)
 80013d6:	f043 0304 	orr.w	r3, r3, #4
 80013da:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80013de:	4b19      	ldr	r3, [pc, #100]	; (8001444 <HAL_TIM_Base_MspInit+0x120>)
 80013e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013e4:	f003 0304 	and.w	r3, r3, #4
 80013e8:	613b      	str	r3, [r7, #16]
 80013ea:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80013ec:	2200      	movs	r2, #0
 80013ee:	2100      	movs	r1, #0
 80013f0:	201e      	movs	r0, #30
 80013f2:	f000 fb10 	bl	8001a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80013f6:	201e      	movs	r0, #30
 80013f8:	f000 fb27 	bl	8001a4a <HAL_NVIC_EnableIRQ>
}
 80013fc:	e01b      	b.n	8001436 <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM5)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a14      	ldr	r2, [pc, #80]	; (8001454 <HAL_TIM_Base_MspInit+0x130>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d116      	bne.n	8001436 <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001408:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <HAL_TIM_Base_MspInit+0x120>)
 800140a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800140e:	4a0d      	ldr	r2, [pc, #52]	; (8001444 <HAL_TIM_Base_MspInit+0x120>)
 8001410:	f043 0308 	orr.w	r3, r3, #8
 8001414:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001418:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <HAL_TIM_Base_MspInit+0x120>)
 800141a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800141e:	f003 0308 	and.w	r3, r3, #8
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001426:	2200      	movs	r2, #0
 8001428:	2100      	movs	r1, #0
 800142a:	2032      	movs	r0, #50	; 0x32
 800142c:	f000 faf3 	bl	8001a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001430:	2032      	movs	r0, #50	; 0x32
 8001432:	f000 fb0a 	bl	8001a4a <HAL_NVIC_EnableIRQ>
}
 8001436:	bf00      	nop
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40010000 	.word	0x40010000
 8001444:	58024400 	.word	0x58024400
 8001448:	2400019c 	.word	0x2400019c
 800144c:	40020440 	.word	0x40020440
 8001450:	40000800 	.word	0x40000800
 8001454:	40000c00 	.word	0x40000c00

08001458 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b088      	sub	sp, #32
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 030c 	add.w	r3, r7, #12
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a13      	ldr	r2, [pc, #76]	; (80014c4 <HAL_TIM_MspPostInit+0x6c>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d11f      	bne.n	80014ba <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800147a:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <HAL_TIM_MspPostInit+0x70>)
 800147c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001480:	4a11      	ldr	r2, [pc, #68]	; (80014c8 <HAL_TIM_MspPostInit+0x70>)
 8001482:	f043 0301 	orr.w	r3, r3, #1
 8001486:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800148a:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <HAL_TIM_MspPostInit+0x70>)
 800148c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001490:	f003 0301 	and.w	r3, r3, #1
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001498:	f44f 7380 	mov.w	r3, #256	; 0x100
 800149c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149e:	2302      	movs	r3, #2
 80014a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80014aa:	2301      	movs	r3, #1
 80014ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ae:	f107 030c 	add.w	r3, r7, #12
 80014b2:	4619      	mov	r1, r3
 80014b4:	4805      	ldr	r0, [pc, #20]	; (80014cc <HAL_TIM_MspPostInit+0x74>)
 80014b6:	f003 f9af 	bl	8004818 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80014ba:	bf00      	nop
 80014bc:	3720      	adds	r7, #32
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40010000 	.word	0x40010000
 80014c8:	58024400 	.word	0x58024400
 80014cc:	58020000 	.word	0x58020000

080014d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b0b8      	sub	sp, #224	; 0xe0
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014e8:	f107 0310 	add.w	r3, r7, #16
 80014ec:	22bc      	movs	r2, #188	; 0xbc
 80014ee:	2100      	movs	r1, #0
 80014f0:	4618      	mov	r0, r3
 80014f2:	f009 fb5b 	bl	800abac <memset>
  if(huart->Instance==USART3)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a29      	ldr	r2, [pc, #164]	; (80015a0 <HAL_UART_MspInit+0xd0>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d14a      	bne.n	8001596 <HAL_UART_MspInit+0xc6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001500:	2302      	movs	r3, #2
 8001502:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001504:	2300      	movs	r3, #0
 8001506:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800150a:	f107 0310 	add.w	r3, r7, #16
 800150e:	4618      	mov	r0, r3
 8001510:	f004 fb7a 	bl	8005c08 <HAL_RCCEx_PeriphCLKConfig>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800151a:	f7ff feab 	bl	8001274 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800151e:	4b21      	ldr	r3, [pc, #132]	; (80015a4 <HAL_UART_MspInit+0xd4>)
 8001520:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001524:	4a1f      	ldr	r2, [pc, #124]	; (80015a4 <HAL_UART_MspInit+0xd4>)
 8001526:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800152a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800152e:	4b1d      	ldr	r3, [pc, #116]	; (80015a4 <HAL_UART_MspInit+0xd4>)
 8001530:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001534:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800153c:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <HAL_UART_MspInit+0xd4>)
 800153e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001542:	4a18      	ldr	r2, [pc, #96]	; (80015a4 <HAL_UART_MspInit+0xd4>)
 8001544:	f043 0302 	orr.w	r3, r3, #2
 8001548:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800154c:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <HAL_UART_MspInit+0xd4>)
 800154e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800155a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800155e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001562:	2302      	movs	r3, #2
 8001564:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001568:	2301      	movs	r3, #1
 800156a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156e:	2300      	movs	r3, #0
 8001570:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001574:	2307      	movs	r3, #7
 8001576:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800157a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800157e:	4619      	mov	r1, r3
 8001580:	4809      	ldr	r0, [pc, #36]	; (80015a8 <HAL_UART_MspInit+0xd8>)
 8001582:	f003 f949 	bl	8004818 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001586:	2200      	movs	r2, #0
 8001588:	2100      	movs	r1, #0
 800158a:	2027      	movs	r0, #39	; 0x27
 800158c:	f000 fa43 	bl	8001a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001590:	2027      	movs	r0, #39	; 0x27
 8001592:	f000 fa5a 	bl	8001a4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001596:	bf00      	nop
 8001598:	37e0      	adds	r7, #224	; 0xe0
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40004800 	.word	0x40004800
 80015a4:	58024400 	.word	0x58024400
 80015a8:	58020400 	.word	0x58020400

080015ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015b0:	e7fe      	b.n	80015b0 <NMI_Handler+0x4>

080015b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015b6:	e7fe      	b.n	80015b6 <HardFault_Handler+0x4>

080015b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015bc:	e7fe      	b.n	80015bc <MemManage_Handler+0x4>

080015be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c2:	e7fe      	b.n	80015c2 <BusFault_Handler+0x4>

080015c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <UsageFault_Handler+0x4>

080015ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015f8:	f000 f906 	bl	8001808 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}

08001600 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001604:	4802      	ldr	r0, [pc, #8]	; (8001610 <TIM1_UP_IRQHandler+0x10>)
 8001606:	f006 fc88 	bl	8007f1a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	240000b8 	.word	0x240000b8

08001614 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
////////////////
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001618:	4802      	ldr	r0, [pc, #8]	; (8001624 <USART3_IRQHandler+0x10>)
 800161a:	f007 fdf9 	bl	8009210 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
////////////////
  /* USER CODE END USART3_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	24000214 	.word	0x24000214

08001628 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms (A and B) interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800162c:	4802      	ldr	r0, [pc, #8]	; (8001638 <RTC_Alarm_IRQHandler+0x10>)
 800162e:	f006 f9e7 	bl	8007a00 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	24000094 	.word	0x24000094

0800163c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */
//////
  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream1);
 8001640:	4802      	ldr	r0, [pc, #8]	; (800164c <DMA2_Stream1_IRQHandler+0x10>)
 8001642:	f001 fdd7 	bl	80031f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */
//////
  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	2400031c 	.word	0x2400031c

08001650 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
//////
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001654:	4802      	ldr	r0, [pc, #8]	; (8001660 <DMA2_Stream2_IRQHandler+0x10>)
 8001656:	f001 fdcd 	bl	80031f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */
//////
  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	2400019c 	.word	0x2400019c

08001664 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800166c:	4a14      	ldr	r2, [pc, #80]	; (80016c0 <_sbrk+0x5c>)
 800166e:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <_sbrk+0x60>)
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001678:	4b13      	ldr	r3, [pc, #76]	; (80016c8 <_sbrk+0x64>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d102      	bne.n	8001686 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001680:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <_sbrk+0x64>)
 8001682:	4a12      	ldr	r2, [pc, #72]	; (80016cc <_sbrk+0x68>)
 8001684:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001686:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <_sbrk+0x64>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4413      	add	r3, r2
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	429a      	cmp	r2, r3
 8001692:	d207      	bcs.n	80016a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001694:	f009 fa60 	bl	800ab58 <__errno>
 8001698:	4603      	mov	r3, r0
 800169a:	220c      	movs	r2, #12
 800169c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800169e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016a2:	e009      	b.n	80016b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016a4:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <_sbrk+0x64>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016aa:	4b07      	ldr	r3, [pc, #28]	; (80016c8 <_sbrk+0x64>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4413      	add	r3, r2
 80016b2:	4a05      	ldr	r2, [pc, #20]	; (80016c8 <_sbrk+0x64>)
 80016b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016b6:	68fb      	ldr	r3, [r7, #12]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3718      	adds	r7, #24
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	24080000 	.word	0x24080000
 80016c4:	00000400 	.word	0x00000400
 80016c8:	240003e0 	.word	0x240003e0
 80016cc:	240003f8 	.word	0x240003f8

080016d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80016d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001708 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80016d4:	f7fe ffde 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016d8:	480c      	ldr	r0, [pc, #48]	; (800170c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016da:	490d      	ldr	r1, [pc, #52]	; (8001710 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016dc:	4a0d      	ldr	r2, [pc, #52]	; (8001714 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016e0:	e002      	b.n	80016e8 <LoopCopyDataInit>

080016e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016e6:	3304      	adds	r3, #4

080016e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016ec:	d3f9      	bcc.n	80016e2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ee:	4a0a      	ldr	r2, [pc, #40]	; (8001718 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016f0:	4c0a      	ldr	r4, [pc, #40]	; (800171c <LoopFillZerobss+0x22>)
  movs r3, #0
 80016f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f4:	e001      	b.n	80016fa <LoopFillZerobss>

080016f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016f8:	3204      	adds	r2, #4

080016fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016fc:	d3fb      	bcc.n	80016f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016fe:	f009 fa31 	bl	800ab64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001702:	f7ff f975 	bl	80009f0 <main>
  bx  lr
 8001706:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001708:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800170c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001710:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8001714:	0800b570 	.word	0x0800b570
  ldr r2, =_sbss
 8001718:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 800171c:	240003f8 	.word	0x240003f8

08001720 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001720:	e7fe      	b.n	8001720 <ADC3_IRQHandler>
	...

08001724 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800172a:	2003      	movs	r0, #3
 800172c:	f000 f968 	bl	8001a00 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001730:	f004 f894 	bl	800585c <HAL_RCC_GetSysClockFreq>
 8001734:	4602      	mov	r2, r0
 8001736:	4b15      	ldr	r3, [pc, #84]	; (800178c <HAL_Init+0x68>)
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	0a1b      	lsrs	r3, r3, #8
 800173c:	f003 030f 	and.w	r3, r3, #15
 8001740:	4913      	ldr	r1, [pc, #76]	; (8001790 <HAL_Init+0x6c>)
 8001742:	5ccb      	ldrb	r3, [r1, r3]
 8001744:	f003 031f 	and.w	r3, r3, #31
 8001748:	fa22 f303 	lsr.w	r3, r2, r3
 800174c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800174e:	4b0f      	ldr	r3, [pc, #60]	; (800178c <HAL_Init+0x68>)
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	4a0e      	ldr	r2, [pc, #56]	; (8001790 <HAL_Init+0x6c>)
 8001758:	5cd3      	ldrb	r3, [r2, r3]
 800175a:	f003 031f 	and.w	r3, r3, #31
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	fa22 f303 	lsr.w	r3, r2, r3
 8001764:	4a0b      	ldr	r2, [pc, #44]	; (8001794 <HAL_Init+0x70>)
 8001766:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001768:	4a0b      	ldr	r2, [pc, #44]	; (8001798 <HAL_Init+0x74>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800176e:	2000      	movs	r0, #0
 8001770:	f000 f814 	bl	800179c <HAL_InitTick>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e002      	b.n	8001784 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800177e:	f7ff fd7f 	bl	8001280 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	58024400 	.word	0x58024400
 8001790:	0800b4ec 	.word	0x0800b4ec
 8001794:	24000004 	.word	0x24000004
 8001798:	24000000 	.word	0x24000000

0800179c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80017a4:	4b15      	ldr	r3, [pc, #84]	; (80017fc <HAL_InitTick+0x60>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d101      	bne.n	80017b0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e021      	b.n	80017f4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80017b0:	4b13      	ldr	r3, [pc, #76]	; (8001800 <HAL_InitTick+0x64>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	4b11      	ldr	r3, [pc, #68]	; (80017fc <HAL_InitTick+0x60>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	4619      	mov	r1, r3
 80017ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017be:	fbb3 f3f1 	udiv	r3, r3, r1
 80017c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c6:	4618      	mov	r0, r3
 80017c8:	f000 f94d 	bl	8001a66 <HAL_SYSTICK_Config>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e00e      	b.n	80017f4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2b0f      	cmp	r3, #15
 80017da:	d80a      	bhi.n	80017f2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017dc:	2200      	movs	r2, #0
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017e4:	f000 f917 	bl	8001a16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017e8:	4a06      	ldr	r2, [pc, #24]	; (8001804 <HAL_InitTick+0x68>)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ee:	2300      	movs	r3, #0
 80017f0:	e000      	b.n	80017f4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	24000010 	.word	0x24000010
 8001800:	24000000 	.word	0x24000000
 8001804:	2400000c 	.word	0x2400000c

08001808 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800180c:	4b06      	ldr	r3, [pc, #24]	; (8001828 <HAL_IncTick+0x20>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	461a      	mov	r2, r3
 8001812:	4b06      	ldr	r3, [pc, #24]	; (800182c <HAL_IncTick+0x24>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4413      	add	r3, r2
 8001818:	4a04      	ldr	r2, [pc, #16]	; (800182c <HAL_IncTick+0x24>)
 800181a:	6013      	str	r3, [r2, #0]
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	24000010 	.word	0x24000010
 800182c:	240003e4 	.word	0x240003e4

08001830 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return uwTick;
 8001834:	4b03      	ldr	r3, [pc, #12]	; (8001844 <HAL_GetTick+0x14>)
 8001836:	681b      	ldr	r3, [r3, #0]
}
 8001838:	4618      	mov	r0, r3
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	240003e4 	.word	0x240003e4

08001848 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800184c:	4b03      	ldr	r3, [pc, #12]	; (800185c <HAL_GetREVID+0x14>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	0c1b      	lsrs	r3, r3, #16
}
 8001852:	4618      	mov	r0, r3
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	5c001000 	.word	0x5c001000

08001860 <__NVIC_SetPriorityGrouping>:
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001870:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800187c:	4013      	ands	r3, r2
 800187e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001888:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <__NVIC_SetPriorityGrouping+0x44>)
 800188a:	4313      	orrs	r3, r2
 800188c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800188e:	4a04      	ldr	r2, [pc, #16]	; (80018a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	60d3      	str	r3, [r2, #12]
}
 8001894:	bf00      	nop
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	e000ed00 	.word	0xe000ed00
 80018a4:	05fa0000 	.word	0x05fa0000

080018a8 <__NVIC_GetPriorityGrouping>:
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018ac:	4b04      	ldr	r3, [pc, #16]	; (80018c0 <__NVIC_GetPriorityGrouping+0x18>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	0a1b      	lsrs	r3, r3, #8
 80018b2:	f003 0307 	and.w	r3, r3, #7
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <__NVIC_EnableIRQ>:
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	db0b      	blt.n	80018ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018d6:	88fb      	ldrh	r3, [r7, #6]
 80018d8:	f003 021f 	and.w	r2, r3, #31
 80018dc:	4907      	ldr	r1, [pc, #28]	; (80018fc <__NVIC_EnableIRQ+0x38>)
 80018de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018e2:	095b      	lsrs	r3, r3, #5
 80018e4:	2001      	movs	r0, #1
 80018e6:	fa00 f202 	lsl.w	r2, r0, r2
 80018ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	e000e100 	.word	0xe000e100

08001900 <__NVIC_SetPriority>:
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	6039      	str	r1, [r7, #0]
 800190a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800190c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001910:	2b00      	cmp	r3, #0
 8001912:	db0a      	blt.n	800192a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	b2da      	uxtb	r2, r3
 8001918:	490c      	ldr	r1, [pc, #48]	; (800194c <__NVIC_SetPriority+0x4c>)
 800191a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800191e:	0112      	lsls	r2, r2, #4
 8001920:	b2d2      	uxtb	r2, r2
 8001922:	440b      	add	r3, r1
 8001924:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001928:	e00a      	b.n	8001940 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	b2da      	uxtb	r2, r3
 800192e:	4908      	ldr	r1, [pc, #32]	; (8001950 <__NVIC_SetPriority+0x50>)
 8001930:	88fb      	ldrh	r3, [r7, #6]
 8001932:	f003 030f 	and.w	r3, r3, #15
 8001936:	3b04      	subs	r3, #4
 8001938:	0112      	lsls	r2, r2, #4
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	440b      	add	r3, r1
 800193e:	761a      	strb	r2, [r3, #24]
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	e000e100 	.word	0xe000e100
 8001950:	e000ed00 	.word	0xe000ed00

08001954 <NVIC_EncodePriority>:
{
 8001954:	b480      	push	{r7}
 8001956:	b089      	sub	sp, #36	; 0x24
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f1c3 0307 	rsb	r3, r3, #7
 800196e:	2b04      	cmp	r3, #4
 8001970:	bf28      	it	cs
 8001972:	2304      	movcs	r3, #4
 8001974:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	3304      	adds	r3, #4
 800197a:	2b06      	cmp	r3, #6
 800197c:	d902      	bls.n	8001984 <NVIC_EncodePriority+0x30>
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3b03      	subs	r3, #3
 8001982:	e000      	b.n	8001986 <NVIC_EncodePriority+0x32>
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001988:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43da      	mvns	r2, r3
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	401a      	ands	r2, r3
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800199c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	fa01 f303 	lsl.w	r3, r1, r3
 80019a6:	43d9      	mvns	r1, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ac:	4313      	orrs	r3, r2
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3724      	adds	r7, #36	; 0x24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
	...

080019bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019cc:	d301      	bcc.n	80019d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ce:	2301      	movs	r3, #1
 80019d0:	e00f      	b.n	80019f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019d2:	4a0a      	ldr	r2, [pc, #40]	; (80019fc <SysTick_Config+0x40>)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019da:	210f      	movs	r1, #15
 80019dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019e0:	f7ff ff8e 	bl	8001900 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019e4:	4b05      	ldr	r3, [pc, #20]	; (80019fc <SysTick_Config+0x40>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ea:	4b04      	ldr	r3, [pc, #16]	; (80019fc <SysTick_Config+0x40>)
 80019ec:	2207      	movs	r2, #7
 80019ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	e000e010 	.word	0xe000e010

08001a00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7ff ff29 	bl	8001860 <__NVIC_SetPriorityGrouping>
}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b086      	sub	sp, #24
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	60b9      	str	r1, [r7, #8]
 8001a20:	607a      	str	r2, [r7, #4]
 8001a22:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a24:	f7ff ff40 	bl	80018a8 <__NVIC_GetPriorityGrouping>
 8001a28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	68b9      	ldr	r1, [r7, #8]
 8001a2e:	6978      	ldr	r0, [r7, #20]
 8001a30:	f7ff ff90 	bl	8001954 <NVIC_EncodePriority>
 8001a34:	4602      	mov	r2, r0
 8001a36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a3a:	4611      	mov	r1, r2
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff ff5f 	bl	8001900 <__NVIC_SetPriority>
}
 8001a42:	bf00      	nop
 8001a44:	3718      	adds	r7, #24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	4603      	mov	r3, r0
 8001a52:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff ff33 	bl	80018c4 <__NVIC_EnableIRQ>
}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff ffa4 	bl	80019bc <SysTick_Config>
 8001a74:	4603      	mov	r3, r0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
	...

08001a80 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001a84:	f3bf 8f5f 	dmb	sy
}
 8001a88:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001a8a:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <HAL_MPU_Disable+0x28>)
 8001a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8e:	4a06      	ldr	r2, [pc, #24]	; (8001aa8 <HAL_MPU_Disable+0x28>)
 8001a90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a94:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001a96:	4b05      	ldr	r3, [pc, #20]	; (8001aac <HAL_MPU_Disable+0x2c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	605a      	str	r2, [r3, #4]
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	e000ed00 	.word	0xe000ed00
 8001aac:	e000ed90 	.word	0xe000ed90

08001ab0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001ab8:	4a0b      	ldr	r2, [pc, #44]	; (8001ae8 <HAL_MPU_Enable+0x38>)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001ac2:	4b0a      	ldr	r3, [pc, #40]	; (8001aec <HAL_MPU_Enable+0x3c>)
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac6:	4a09      	ldr	r2, [pc, #36]	; (8001aec <HAL_MPU_Enable+0x3c>)
 8001ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001acc:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001ace:	f3bf 8f4f 	dsb	sy
}
 8001ad2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ad4:	f3bf 8f6f 	isb	sy
}
 8001ad8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	e000ed90 	.word	0xe000ed90
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	785a      	ldrb	r2, [r3, #1]
 8001afc:	4b1d      	ldr	r3, [pc, #116]	; (8001b74 <HAL_MPU_ConfigRegion+0x84>)
 8001afe:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d029      	beq.n	8001b5c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001b08:	4a1a      	ldr	r2, [pc, #104]	; (8001b74 <HAL_MPU_ConfigRegion+0x84>)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	7b1b      	ldrb	r3, [r3, #12]
 8001b14:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	7adb      	ldrb	r3, [r3, #11]
 8001b1a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b1c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	7a9b      	ldrb	r3, [r3, #10]
 8001b22:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001b24:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	7b5b      	ldrb	r3, [r3, #13]
 8001b2a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001b2c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	7b9b      	ldrb	r3, [r3, #14]
 8001b32:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001b34:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	7bdb      	ldrb	r3, [r3, #15]
 8001b3a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001b3c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	7a5b      	ldrb	r3, [r3, #9]
 8001b42:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001b44:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	7a1b      	ldrb	r3, [r3, #8]
 8001b4a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001b4c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	7812      	ldrb	r2, [r2, #0]
 8001b52:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b54:	4a07      	ldr	r2, [pc, #28]	; (8001b74 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001b56:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001b58:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001b5a:	e005      	b.n	8001b68 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001b5c:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <HAL_MPU_ConfigRegion+0x84>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001b62:	4b04      	ldr	r3, [pc, #16]	; (8001b74 <HAL_MPU_ConfigRegion+0x84>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	611a      	str	r2, [r3, #16]
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	e000ed90 	.word	0xe000ed90

08001b78 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8001b7c:	4b07      	ldr	r3, [pc, #28]	; (8001b9c <HAL_GetCurrentCPUID+0x24>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	091b      	lsrs	r3, r3, #4
 8001b82:	f003 030f 	and.w	r3, r3, #15
 8001b86:	2b07      	cmp	r3, #7
 8001b88:	d101      	bne.n	8001b8e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e000      	b.n	8001b90 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8001b8e:	2301      	movs	r3, #1
  }
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001ba8:	f7ff fe42 	bl	8001830 <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e316      	b.n	80021e6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a66      	ldr	r2, [pc, #408]	; (8001d58 <HAL_DMA_Init+0x1b8>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d04a      	beq.n	8001c58 <HAL_DMA_Init+0xb8>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a65      	ldr	r2, [pc, #404]	; (8001d5c <HAL_DMA_Init+0x1bc>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d045      	beq.n	8001c58 <HAL_DMA_Init+0xb8>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a63      	ldr	r2, [pc, #396]	; (8001d60 <HAL_DMA_Init+0x1c0>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d040      	beq.n	8001c58 <HAL_DMA_Init+0xb8>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a62      	ldr	r2, [pc, #392]	; (8001d64 <HAL_DMA_Init+0x1c4>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d03b      	beq.n	8001c58 <HAL_DMA_Init+0xb8>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a60      	ldr	r2, [pc, #384]	; (8001d68 <HAL_DMA_Init+0x1c8>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d036      	beq.n	8001c58 <HAL_DMA_Init+0xb8>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a5f      	ldr	r2, [pc, #380]	; (8001d6c <HAL_DMA_Init+0x1cc>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d031      	beq.n	8001c58 <HAL_DMA_Init+0xb8>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a5d      	ldr	r2, [pc, #372]	; (8001d70 <HAL_DMA_Init+0x1d0>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d02c      	beq.n	8001c58 <HAL_DMA_Init+0xb8>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a5c      	ldr	r2, [pc, #368]	; (8001d74 <HAL_DMA_Init+0x1d4>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d027      	beq.n	8001c58 <HAL_DMA_Init+0xb8>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a5a      	ldr	r2, [pc, #360]	; (8001d78 <HAL_DMA_Init+0x1d8>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d022      	beq.n	8001c58 <HAL_DMA_Init+0xb8>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a59      	ldr	r2, [pc, #356]	; (8001d7c <HAL_DMA_Init+0x1dc>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d01d      	beq.n	8001c58 <HAL_DMA_Init+0xb8>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a57      	ldr	r2, [pc, #348]	; (8001d80 <HAL_DMA_Init+0x1e0>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d018      	beq.n	8001c58 <HAL_DMA_Init+0xb8>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a56      	ldr	r2, [pc, #344]	; (8001d84 <HAL_DMA_Init+0x1e4>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d013      	beq.n	8001c58 <HAL_DMA_Init+0xb8>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a54      	ldr	r2, [pc, #336]	; (8001d88 <HAL_DMA_Init+0x1e8>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d00e      	beq.n	8001c58 <HAL_DMA_Init+0xb8>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a53      	ldr	r2, [pc, #332]	; (8001d8c <HAL_DMA_Init+0x1ec>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d009      	beq.n	8001c58 <HAL_DMA_Init+0xb8>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a51      	ldr	r2, [pc, #324]	; (8001d90 <HAL_DMA_Init+0x1f0>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d004      	beq.n	8001c58 <HAL_DMA_Init+0xb8>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a50      	ldr	r2, [pc, #320]	; (8001d94 <HAL_DMA_Init+0x1f4>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d101      	bne.n	8001c5c <HAL_DMA_Init+0xbc>
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e000      	b.n	8001c5e <HAL_DMA_Init+0xbe>
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f000 813b 	beq.w	8001eda <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2202      	movs	r2, #2
 8001c68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a37      	ldr	r2, [pc, #220]	; (8001d58 <HAL_DMA_Init+0x1b8>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d04a      	beq.n	8001d14 <HAL_DMA_Init+0x174>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a36      	ldr	r2, [pc, #216]	; (8001d5c <HAL_DMA_Init+0x1bc>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d045      	beq.n	8001d14 <HAL_DMA_Init+0x174>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a34      	ldr	r2, [pc, #208]	; (8001d60 <HAL_DMA_Init+0x1c0>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d040      	beq.n	8001d14 <HAL_DMA_Init+0x174>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a33      	ldr	r2, [pc, #204]	; (8001d64 <HAL_DMA_Init+0x1c4>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d03b      	beq.n	8001d14 <HAL_DMA_Init+0x174>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a31      	ldr	r2, [pc, #196]	; (8001d68 <HAL_DMA_Init+0x1c8>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d036      	beq.n	8001d14 <HAL_DMA_Init+0x174>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a30      	ldr	r2, [pc, #192]	; (8001d6c <HAL_DMA_Init+0x1cc>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d031      	beq.n	8001d14 <HAL_DMA_Init+0x174>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a2e      	ldr	r2, [pc, #184]	; (8001d70 <HAL_DMA_Init+0x1d0>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d02c      	beq.n	8001d14 <HAL_DMA_Init+0x174>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a2d      	ldr	r2, [pc, #180]	; (8001d74 <HAL_DMA_Init+0x1d4>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d027      	beq.n	8001d14 <HAL_DMA_Init+0x174>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a2b      	ldr	r2, [pc, #172]	; (8001d78 <HAL_DMA_Init+0x1d8>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d022      	beq.n	8001d14 <HAL_DMA_Init+0x174>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a2a      	ldr	r2, [pc, #168]	; (8001d7c <HAL_DMA_Init+0x1dc>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d01d      	beq.n	8001d14 <HAL_DMA_Init+0x174>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a28      	ldr	r2, [pc, #160]	; (8001d80 <HAL_DMA_Init+0x1e0>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d018      	beq.n	8001d14 <HAL_DMA_Init+0x174>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a27      	ldr	r2, [pc, #156]	; (8001d84 <HAL_DMA_Init+0x1e4>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d013      	beq.n	8001d14 <HAL_DMA_Init+0x174>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a25      	ldr	r2, [pc, #148]	; (8001d88 <HAL_DMA_Init+0x1e8>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d00e      	beq.n	8001d14 <HAL_DMA_Init+0x174>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a24      	ldr	r2, [pc, #144]	; (8001d8c <HAL_DMA_Init+0x1ec>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d009      	beq.n	8001d14 <HAL_DMA_Init+0x174>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a22      	ldr	r2, [pc, #136]	; (8001d90 <HAL_DMA_Init+0x1f0>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d004      	beq.n	8001d14 <HAL_DMA_Init+0x174>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a21      	ldr	r2, [pc, #132]	; (8001d94 <HAL_DMA_Init+0x1f4>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d108      	bne.n	8001d26 <HAL_DMA_Init+0x186>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f022 0201 	bic.w	r2, r2, #1
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	e007      	b.n	8001d36 <HAL_DMA_Init+0x196>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 0201 	bic.w	r2, r2, #1
 8001d34:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001d36:	e02f      	b.n	8001d98 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d38:	f7ff fd7a 	bl	8001830 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b05      	cmp	r3, #5
 8001d44:	d928      	bls.n	8001d98 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2220      	movs	r2, #32
 8001d4a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2203      	movs	r2, #3
 8001d50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e246      	b.n	80021e6 <HAL_DMA_Init+0x646>
 8001d58:	40020010 	.word	0x40020010
 8001d5c:	40020028 	.word	0x40020028
 8001d60:	40020040 	.word	0x40020040
 8001d64:	40020058 	.word	0x40020058
 8001d68:	40020070 	.word	0x40020070
 8001d6c:	40020088 	.word	0x40020088
 8001d70:	400200a0 	.word	0x400200a0
 8001d74:	400200b8 	.word	0x400200b8
 8001d78:	40020410 	.word	0x40020410
 8001d7c:	40020428 	.word	0x40020428
 8001d80:	40020440 	.word	0x40020440
 8001d84:	40020458 	.word	0x40020458
 8001d88:	40020470 	.word	0x40020470
 8001d8c:	40020488 	.word	0x40020488
 8001d90:	400204a0 	.word	0x400204a0
 8001d94:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1c8      	bne.n	8001d38 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001dae:	697a      	ldr	r2, [r7, #20]
 8001db0:	4b83      	ldr	r3, [pc, #524]	; (8001fc0 <HAL_DMA_Init+0x420>)
 8001db2:	4013      	ands	r3, r2
 8001db4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001dbe:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dca:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dd6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de8:	2b04      	cmp	r3, #4
 8001dea:	d107      	bne.n	8001dfc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df4:	4313      	orrs	r3, r2
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001dfc:	4b71      	ldr	r3, [pc, #452]	; (8001fc4 <HAL_DMA_Init+0x424>)
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	4b71      	ldr	r3, [pc, #452]	; (8001fc8 <HAL_DMA_Init+0x428>)
 8001e02:	4013      	ands	r3, r2
 8001e04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e08:	d328      	bcc.n	8001e5c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2b28      	cmp	r3, #40	; 0x28
 8001e10:	d903      	bls.n	8001e1a <HAL_DMA_Init+0x27a>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b2e      	cmp	r3, #46	; 0x2e
 8001e18:	d917      	bls.n	8001e4a <HAL_DMA_Init+0x2aa>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b3e      	cmp	r3, #62	; 0x3e
 8001e20:	d903      	bls.n	8001e2a <HAL_DMA_Init+0x28a>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b42      	cmp	r3, #66	; 0x42
 8001e28:	d90f      	bls.n	8001e4a <HAL_DMA_Init+0x2aa>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b46      	cmp	r3, #70	; 0x46
 8001e30:	d903      	bls.n	8001e3a <HAL_DMA_Init+0x29a>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b48      	cmp	r3, #72	; 0x48
 8001e38:	d907      	bls.n	8001e4a <HAL_DMA_Init+0x2aa>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b4e      	cmp	r3, #78	; 0x4e
 8001e40:	d905      	bls.n	8001e4e <HAL_DMA_Init+0x2ae>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b52      	cmp	r3, #82	; 0x52
 8001e48:	d801      	bhi.n	8001e4e <HAL_DMA_Init+0x2ae>
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e000      	b.n	8001e50 <HAL_DMA_Init+0x2b0>
 8001e4e:	2300      	movs	r3, #0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d003      	beq.n	8001e5c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e5a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	f023 0307 	bic.w	r3, r3, #7
 8001e72:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e78:	697a      	ldr	r2, [r7, #20]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e82:	2b04      	cmp	r3, #4
 8001e84:	d117      	bne.n	8001eb6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d00e      	beq.n	8001eb6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f002 fb33 	bl	8004504 <DMA_CheckFifoParam>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d008      	beq.n	8001eb6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2240      	movs	r2, #64	; 0x40
 8001ea8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e197      	b.n	80021e6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	697a      	ldr	r2, [r7, #20]
 8001ebc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f002 fa6e 	bl	80043a0 <DMA_CalcBaseAndBitshift>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ecc:	f003 031f 	and.w	r3, r3, #31
 8001ed0:	223f      	movs	r2, #63	; 0x3f
 8001ed2:	409a      	lsls	r2, r3
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	e0cd      	b.n	8002076 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a3b      	ldr	r2, [pc, #236]	; (8001fcc <HAL_DMA_Init+0x42c>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d022      	beq.n	8001f2a <HAL_DMA_Init+0x38a>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a39      	ldr	r2, [pc, #228]	; (8001fd0 <HAL_DMA_Init+0x430>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d01d      	beq.n	8001f2a <HAL_DMA_Init+0x38a>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a38      	ldr	r2, [pc, #224]	; (8001fd4 <HAL_DMA_Init+0x434>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d018      	beq.n	8001f2a <HAL_DMA_Init+0x38a>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a36      	ldr	r2, [pc, #216]	; (8001fd8 <HAL_DMA_Init+0x438>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d013      	beq.n	8001f2a <HAL_DMA_Init+0x38a>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a35      	ldr	r2, [pc, #212]	; (8001fdc <HAL_DMA_Init+0x43c>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d00e      	beq.n	8001f2a <HAL_DMA_Init+0x38a>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a33      	ldr	r2, [pc, #204]	; (8001fe0 <HAL_DMA_Init+0x440>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d009      	beq.n	8001f2a <HAL_DMA_Init+0x38a>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a32      	ldr	r2, [pc, #200]	; (8001fe4 <HAL_DMA_Init+0x444>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d004      	beq.n	8001f2a <HAL_DMA_Init+0x38a>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a30      	ldr	r2, [pc, #192]	; (8001fe8 <HAL_DMA_Init+0x448>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d101      	bne.n	8001f2e <HAL_DMA_Init+0x38e>
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e000      	b.n	8001f30 <HAL_DMA_Init+0x390>
 8001f2e:	2300      	movs	r3, #0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f000 8097 	beq.w	8002064 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a24      	ldr	r2, [pc, #144]	; (8001fcc <HAL_DMA_Init+0x42c>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d021      	beq.n	8001f84 <HAL_DMA_Init+0x3e4>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a22      	ldr	r2, [pc, #136]	; (8001fd0 <HAL_DMA_Init+0x430>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d01c      	beq.n	8001f84 <HAL_DMA_Init+0x3e4>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a21      	ldr	r2, [pc, #132]	; (8001fd4 <HAL_DMA_Init+0x434>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d017      	beq.n	8001f84 <HAL_DMA_Init+0x3e4>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a1f      	ldr	r2, [pc, #124]	; (8001fd8 <HAL_DMA_Init+0x438>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d012      	beq.n	8001f84 <HAL_DMA_Init+0x3e4>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a1e      	ldr	r2, [pc, #120]	; (8001fdc <HAL_DMA_Init+0x43c>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d00d      	beq.n	8001f84 <HAL_DMA_Init+0x3e4>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a1c      	ldr	r2, [pc, #112]	; (8001fe0 <HAL_DMA_Init+0x440>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d008      	beq.n	8001f84 <HAL_DMA_Init+0x3e4>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a1b      	ldr	r2, [pc, #108]	; (8001fe4 <HAL_DMA_Init+0x444>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d003      	beq.n	8001f84 <HAL_DMA_Init+0x3e4>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a19      	ldr	r2, [pc, #100]	; (8001fe8 <HAL_DMA_Init+0x448>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2202      	movs	r2, #2
 8001f8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	4b12      	ldr	r3, [pc, #72]	; (8001fec <HAL_DMA_Init+0x44c>)
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	2b40      	cmp	r3, #64	; 0x40
 8001fac:	d020      	beq.n	8001ff0 <HAL_DMA_Init+0x450>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	2b80      	cmp	r3, #128	; 0x80
 8001fb4:	d102      	bne.n	8001fbc <HAL_DMA_Init+0x41c>
 8001fb6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fba:	e01a      	b.n	8001ff2 <HAL_DMA_Init+0x452>
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	e018      	b.n	8001ff2 <HAL_DMA_Init+0x452>
 8001fc0:	fe10803f 	.word	0xfe10803f
 8001fc4:	5c001000 	.word	0x5c001000
 8001fc8:	ffff0000 	.word	0xffff0000
 8001fcc:	58025408 	.word	0x58025408
 8001fd0:	5802541c 	.word	0x5802541c
 8001fd4:	58025430 	.word	0x58025430
 8001fd8:	58025444 	.word	0x58025444
 8001fdc:	58025458 	.word	0x58025458
 8001fe0:	5802546c 	.word	0x5802546c
 8001fe4:	58025480 	.word	0x58025480
 8001fe8:	58025494 	.word	0x58025494
 8001fec:	fffe000f 	.word	0xfffe000f
 8001ff0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	68d2      	ldr	r2, [r2, #12]
 8001ff6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ff8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002000:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002008:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002010:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002018:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002020:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	4313      	orrs	r3, r2
 8002026:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	697a      	ldr	r2, [r7, #20]
 800202e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	461a      	mov	r2, r3
 8002036:	4b6e      	ldr	r3, [pc, #440]	; (80021f0 <HAL_DMA_Init+0x650>)
 8002038:	4413      	add	r3, r2
 800203a:	4a6e      	ldr	r2, [pc, #440]	; (80021f4 <HAL_DMA_Init+0x654>)
 800203c:	fba2 2303 	umull	r2, r3, r2, r3
 8002040:	091b      	lsrs	r3, r3, #4
 8002042:	009a      	lsls	r2, r3, #2
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f002 f9a9 	bl	80043a0 <DMA_CalcBaseAndBitshift>
 800204e:	4603      	mov	r3, r0
 8002050:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002056:	f003 031f 	and.w	r3, r3, #31
 800205a:	2201      	movs	r2, #1
 800205c:	409a      	lsls	r2, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	605a      	str	r2, [r3, #4]
 8002062:	e008      	b.n	8002076 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2240      	movs	r2, #64	; 0x40
 8002068:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2203      	movs	r2, #3
 800206e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e0b7      	b.n	80021e6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a5f      	ldr	r2, [pc, #380]	; (80021f8 <HAL_DMA_Init+0x658>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d072      	beq.n	8002166 <HAL_DMA_Init+0x5c6>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a5d      	ldr	r2, [pc, #372]	; (80021fc <HAL_DMA_Init+0x65c>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d06d      	beq.n	8002166 <HAL_DMA_Init+0x5c6>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a5c      	ldr	r2, [pc, #368]	; (8002200 <HAL_DMA_Init+0x660>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d068      	beq.n	8002166 <HAL_DMA_Init+0x5c6>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a5a      	ldr	r2, [pc, #360]	; (8002204 <HAL_DMA_Init+0x664>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d063      	beq.n	8002166 <HAL_DMA_Init+0x5c6>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a59      	ldr	r2, [pc, #356]	; (8002208 <HAL_DMA_Init+0x668>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d05e      	beq.n	8002166 <HAL_DMA_Init+0x5c6>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a57      	ldr	r2, [pc, #348]	; (800220c <HAL_DMA_Init+0x66c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d059      	beq.n	8002166 <HAL_DMA_Init+0x5c6>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a56      	ldr	r2, [pc, #344]	; (8002210 <HAL_DMA_Init+0x670>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d054      	beq.n	8002166 <HAL_DMA_Init+0x5c6>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a54      	ldr	r2, [pc, #336]	; (8002214 <HAL_DMA_Init+0x674>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d04f      	beq.n	8002166 <HAL_DMA_Init+0x5c6>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a53      	ldr	r2, [pc, #332]	; (8002218 <HAL_DMA_Init+0x678>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d04a      	beq.n	8002166 <HAL_DMA_Init+0x5c6>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a51      	ldr	r2, [pc, #324]	; (800221c <HAL_DMA_Init+0x67c>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d045      	beq.n	8002166 <HAL_DMA_Init+0x5c6>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a50      	ldr	r2, [pc, #320]	; (8002220 <HAL_DMA_Init+0x680>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d040      	beq.n	8002166 <HAL_DMA_Init+0x5c6>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a4e      	ldr	r2, [pc, #312]	; (8002224 <HAL_DMA_Init+0x684>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d03b      	beq.n	8002166 <HAL_DMA_Init+0x5c6>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a4d      	ldr	r2, [pc, #308]	; (8002228 <HAL_DMA_Init+0x688>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d036      	beq.n	8002166 <HAL_DMA_Init+0x5c6>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a4b      	ldr	r2, [pc, #300]	; (800222c <HAL_DMA_Init+0x68c>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d031      	beq.n	8002166 <HAL_DMA_Init+0x5c6>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a4a      	ldr	r2, [pc, #296]	; (8002230 <HAL_DMA_Init+0x690>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d02c      	beq.n	8002166 <HAL_DMA_Init+0x5c6>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a48      	ldr	r2, [pc, #288]	; (8002234 <HAL_DMA_Init+0x694>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d027      	beq.n	8002166 <HAL_DMA_Init+0x5c6>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a47      	ldr	r2, [pc, #284]	; (8002238 <HAL_DMA_Init+0x698>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d022      	beq.n	8002166 <HAL_DMA_Init+0x5c6>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a45      	ldr	r2, [pc, #276]	; (800223c <HAL_DMA_Init+0x69c>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d01d      	beq.n	8002166 <HAL_DMA_Init+0x5c6>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a44      	ldr	r2, [pc, #272]	; (8002240 <HAL_DMA_Init+0x6a0>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d018      	beq.n	8002166 <HAL_DMA_Init+0x5c6>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a42      	ldr	r2, [pc, #264]	; (8002244 <HAL_DMA_Init+0x6a4>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d013      	beq.n	8002166 <HAL_DMA_Init+0x5c6>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a41      	ldr	r2, [pc, #260]	; (8002248 <HAL_DMA_Init+0x6a8>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d00e      	beq.n	8002166 <HAL_DMA_Init+0x5c6>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a3f      	ldr	r2, [pc, #252]	; (800224c <HAL_DMA_Init+0x6ac>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d009      	beq.n	8002166 <HAL_DMA_Init+0x5c6>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a3e      	ldr	r2, [pc, #248]	; (8002250 <HAL_DMA_Init+0x6b0>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d004      	beq.n	8002166 <HAL_DMA_Init+0x5c6>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a3c      	ldr	r2, [pc, #240]	; (8002254 <HAL_DMA_Init+0x6b4>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d101      	bne.n	800216a <HAL_DMA_Init+0x5ca>
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <HAL_DMA_Init+0x5cc>
 800216a:	2300      	movs	r3, #0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d032      	beq.n	80021d6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f002 fa43 	bl	80045fc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	2b80      	cmp	r3, #128	; 0x80
 800217c:	d102      	bne.n	8002184 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800218c:	b2d2      	uxtb	r2, r2
 800218e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002198:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d010      	beq.n	80021c4 <HAL_DMA_Init+0x624>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b08      	cmp	r3, #8
 80021a8:	d80c      	bhi.n	80021c4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f002 fac0 	bl	8004730 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	e008      	b.n	80021d6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	a7fdabf8 	.word	0xa7fdabf8
 80021f4:	cccccccd 	.word	0xcccccccd
 80021f8:	40020010 	.word	0x40020010
 80021fc:	40020028 	.word	0x40020028
 8002200:	40020040 	.word	0x40020040
 8002204:	40020058 	.word	0x40020058
 8002208:	40020070 	.word	0x40020070
 800220c:	40020088 	.word	0x40020088
 8002210:	400200a0 	.word	0x400200a0
 8002214:	400200b8 	.word	0x400200b8
 8002218:	40020410 	.word	0x40020410
 800221c:	40020428 	.word	0x40020428
 8002220:	40020440 	.word	0x40020440
 8002224:	40020458 	.word	0x40020458
 8002228:	40020470 	.word	0x40020470
 800222c:	40020488 	.word	0x40020488
 8002230:	400204a0 	.word	0x400204a0
 8002234:	400204b8 	.word	0x400204b8
 8002238:	58025408 	.word	0x58025408
 800223c:	5802541c 	.word	0x5802541c
 8002240:	58025430 	.word	0x58025430
 8002244:	58025444 	.word	0x58025444
 8002248:	58025458 	.word	0x58025458
 800224c:	5802546c 	.word	0x5802546c
 8002250:	58025480 	.word	0x58025480
 8002254:	58025494 	.word	0x58025494

08002258 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
 8002264:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002266:	2300      	movs	r3, #0
 8002268:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e226      	b.n	80026c2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800227a:	2b01      	cmp	r3, #1
 800227c:	d101      	bne.n	8002282 <HAL_DMA_Start_IT+0x2a>
 800227e:	2302      	movs	r3, #2
 8002280:	e21f      	b.n	80026c2 <HAL_DMA_Start_IT+0x46a>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2201      	movs	r2, #1
 8002286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b01      	cmp	r3, #1
 8002294:	f040 820a 	bne.w	80026ac <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2202      	movs	r2, #2
 800229c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a68      	ldr	r2, [pc, #416]	; (800244c <HAL_DMA_Start_IT+0x1f4>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d04a      	beq.n	8002346 <HAL_DMA_Start_IT+0xee>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a66      	ldr	r2, [pc, #408]	; (8002450 <HAL_DMA_Start_IT+0x1f8>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d045      	beq.n	8002346 <HAL_DMA_Start_IT+0xee>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a65      	ldr	r2, [pc, #404]	; (8002454 <HAL_DMA_Start_IT+0x1fc>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d040      	beq.n	8002346 <HAL_DMA_Start_IT+0xee>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a63      	ldr	r2, [pc, #396]	; (8002458 <HAL_DMA_Start_IT+0x200>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d03b      	beq.n	8002346 <HAL_DMA_Start_IT+0xee>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a62      	ldr	r2, [pc, #392]	; (800245c <HAL_DMA_Start_IT+0x204>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d036      	beq.n	8002346 <HAL_DMA_Start_IT+0xee>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a60      	ldr	r2, [pc, #384]	; (8002460 <HAL_DMA_Start_IT+0x208>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d031      	beq.n	8002346 <HAL_DMA_Start_IT+0xee>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a5f      	ldr	r2, [pc, #380]	; (8002464 <HAL_DMA_Start_IT+0x20c>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d02c      	beq.n	8002346 <HAL_DMA_Start_IT+0xee>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a5d      	ldr	r2, [pc, #372]	; (8002468 <HAL_DMA_Start_IT+0x210>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d027      	beq.n	8002346 <HAL_DMA_Start_IT+0xee>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a5c      	ldr	r2, [pc, #368]	; (800246c <HAL_DMA_Start_IT+0x214>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d022      	beq.n	8002346 <HAL_DMA_Start_IT+0xee>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a5a      	ldr	r2, [pc, #360]	; (8002470 <HAL_DMA_Start_IT+0x218>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d01d      	beq.n	8002346 <HAL_DMA_Start_IT+0xee>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a59      	ldr	r2, [pc, #356]	; (8002474 <HAL_DMA_Start_IT+0x21c>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d018      	beq.n	8002346 <HAL_DMA_Start_IT+0xee>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a57      	ldr	r2, [pc, #348]	; (8002478 <HAL_DMA_Start_IT+0x220>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d013      	beq.n	8002346 <HAL_DMA_Start_IT+0xee>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a56      	ldr	r2, [pc, #344]	; (800247c <HAL_DMA_Start_IT+0x224>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d00e      	beq.n	8002346 <HAL_DMA_Start_IT+0xee>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a54      	ldr	r2, [pc, #336]	; (8002480 <HAL_DMA_Start_IT+0x228>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d009      	beq.n	8002346 <HAL_DMA_Start_IT+0xee>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a53      	ldr	r2, [pc, #332]	; (8002484 <HAL_DMA_Start_IT+0x22c>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d004      	beq.n	8002346 <HAL_DMA_Start_IT+0xee>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a51      	ldr	r2, [pc, #324]	; (8002488 <HAL_DMA_Start_IT+0x230>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d108      	bne.n	8002358 <HAL_DMA_Start_IT+0x100>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 0201 	bic.w	r2, r2, #1
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	e007      	b.n	8002368 <HAL_DMA_Start_IT+0x110>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 0201 	bic.w	r2, r2, #1
 8002366:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	68b9      	ldr	r1, [r7, #8]
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f001 fe6a 	bl	8004048 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a34      	ldr	r2, [pc, #208]	; (800244c <HAL_DMA_Start_IT+0x1f4>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d04a      	beq.n	8002414 <HAL_DMA_Start_IT+0x1bc>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a33      	ldr	r2, [pc, #204]	; (8002450 <HAL_DMA_Start_IT+0x1f8>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d045      	beq.n	8002414 <HAL_DMA_Start_IT+0x1bc>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a31      	ldr	r2, [pc, #196]	; (8002454 <HAL_DMA_Start_IT+0x1fc>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d040      	beq.n	8002414 <HAL_DMA_Start_IT+0x1bc>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a30      	ldr	r2, [pc, #192]	; (8002458 <HAL_DMA_Start_IT+0x200>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d03b      	beq.n	8002414 <HAL_DMA_Start_IT+0x1bc>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a2e      	ldr	r2, [pc, #184]	; (800245c <HAL_DMA_Start_IT+0x204>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d036      	beq.n	8002414 <HAL_DMA_Start_IT+0x1bc>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a2d      	ldr	r2, [pc, #180]	; (8002460 <HAL_DMA_Start_IT+0x208>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d031      	beq.n	8002414 <HAL_DMA_Start_IT+0x1bc>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a2b      	ldr	r2, [pc, #172]	; (8002464 <HAL_DMA_Start_IT+0x20c>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d02c      	beq.n	8002414 <HAL_DMA_Start_IT+0x1bc>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a2a      	ldr	r2, [pc, #168]	; (8002468 <HAL_DMA_Start_IT+0x210>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d027      	beq.n	8002414 <HAL_DMA_Start_IT+0x1bc>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a28      	ldr	r2, [pc, #160]	; (800246c <HAL_DMA_Start_IT+0x214>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d022      	beq.n	8002414 <HAL_DMA_Start_IT+0x1bc>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a27      	ldr	r2, [pc, #156]	; (8002470 <HAL_DMA_Start_IT+0x218>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d01d      	beq.n	8002414 <HAL_DMA_Start_IT+0x1bc>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a25      	ldr	r2, [pc, #148]	; (8002474 <HAL_DMA_Start_IT+0x21c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d018      	beq.n	8002414 <HAL_DMA_Start_IT+0x1bc>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a24      	ldr	r2, [pc, #144]	; (8002478 <HAL_DMA_Start_IT+0x220>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d013      	beq.n	8002414 <HAL_DMA_Start_IT+0x1bc>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a22      	ldr	r2, [pc, #136]	; (800247c <HAL_DMA_Start_IT+0x224>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d00e      	beq.n	8002414 <HAL_DMA_Start_IT+0x1bc>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a21      	ldr	r2, [pc, #132]	; (8002480 <HAL_DMA_Start_IT+0x228>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d009      	beq.n	8002414 <HAL_DMA_Start_IT+0x1bc>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a1f      	ldr	r2, [pc, #124]	; (8002484 <HAL_DMA_Start_IT+0x22c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d004      	beq.n	8002414 <HAL_DMA_Start_IT+0x1bc>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a1e      	ldr	r2, [pc, #120]	; (8002488 <HAL_DMA_Start_IT+0x230>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d101      	bne.n	8002418 <HAL_DMA_Start_IT+0x1c0>
 8002414:	2301      	movs	r3, #1
 8002416:	e000      	b.n	800241a <HAL_DMA_Start_IT+0x1c2>
 8002418:	2300      	movs	r3, #0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d036      	beq.n	800248c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f023 021e 	bic.w	r2, r3, #30
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f042 0216 	orr.w	r2, r2, #22
 8002430:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	2b00      	cmp	r3, #0
 8002438:	d03e      	beq.n	80024b8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f042 0208 	orr.w	r2, r2, #8
 8002448:	601a      	str	r2, [r3, #0]
 800244a:	e035      	b.n	80024b8 <HAL_DMA_Start_IT+0x260>
 800244c:	40020010 	.word	0x40020010
 8002450:	40020028 	.word	0x40020028
 8002454:	40020040 	.word	0x40020040
 8002458:	40020058 	.word	0x40020058
 800245c:	40020070 	.word	0x40020070
 8002460:	40020088 	.word	0x40020088
 8002464:	400200a0 	.word	0x400200a0
 8002468:	400200b8 	.word	0x400200b8
 800246c:	40020410 	.word	0x40020410
 8002470:	40020428 	.word	0x40020428
 8002474:	40020440 	.word	0x40020440
 8002478:	40020458 	.word	0x40020458
 800247c:	40020470 	.word	0x40020470
 8002480:	40020488 	.word	0x40020488
 8002484:	400204a0 	.word	0x400204a0
 8002488:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f023 020e 	bic.w	r2, r3, #14
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f042 020a 	orr.w	r2, r2, #10
 800249e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d007      	beq.n	80024b8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 0204 	orr.w	r2, r2, #4
 80024b6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a83      	ldr	r2, [pc, #524]	; (80026cc <HAL_DMA_Start_IT+0x474>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d072      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a82      	ldr	r2, [pc, #520]	; (80026d0 <HAL_DMA_Start_IT+0x478>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d06d      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a80      	ldr	r2, [pc, #512]	; (80026d4 <HAL_DMA_Start_IT+0x47c>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d068      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a7f      	ldr	r2, [pc, #508]	; (80026d8 <HAL_DMA_Start_IT+0x480>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d063      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a7d      	ldr	r2, [pc, #500]	; (80026dc <HAL_DMA_Start_IT+0x484>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d05e      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a7c      	ldr	r2, [pc, #496]	; (80026e0 <HAL_DMA_Start_IT+0x488>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d059      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a7a      	ldr	r2, [pc, #488]	; (80026e4 <HAL_DMA_Start_IT+0x48c>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d054      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a79      	ldr	r2, [pc, #484]	; (80026e8 <HAL_DMA_Start_IT+0x490>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d04f      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a77      	ldr	r2, [pc, #476]	; (80026ec <HAL_DMA_Start_IT+0x494>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d04a      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a76      	ldr	r2, [pc, #472]	; (80026f0 <HAL_DMA_Start_IT+0x498>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d045      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a74      	ldr	r2, [pc, #464]	; (80026f4 <HAL_DMA_Start_IT+0x49c>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d040      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a73      	ldr	r2, [pc, #460]	; (80026f8 <HAL_DMA_Start_IT+0x4a0>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d03b      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a71      	ldr	r2, [pc, #452]	; (80026fc <HAL_DMA_Start_IT+0x4a4>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d036      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a70      	ldr	r2, [pc, #448]	; (8002700 <HAL_DMA_Start_IT+0x4a8>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d031      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a6e      	ldr	r2, [pc, #440]	; (8002704 <HAL_DMA_Start_IT+0x4ac>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d02c      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a6d      	ldr	r2, [pc, #436]	; (8002708 <HAL_DMA_Start_IT+0x4b0>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d027      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a6b      	ldr	r2, [pc, #428]	; (800270c <HAL_DMA_Start_IT+0x4b4>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d022      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a6a      	ldr	r2, [pc, #424]	; (8002710 <HAL_DMA_Start_IT+0x4b8>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d01d      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a68      	ldr	r2, [pc, #416]	; (8002714 <HAL_DMA_Start_IT+0x4bc>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d018      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a67      	ldr	r2, [pc, #412]	; (8002718 <HAL_DMA_Start_IT+0x4c0>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d013      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a65      	ldr	r2, [pc, #404]	; (800271c <HAL_DMA_Start_IT+0x4c4>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d00e      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a64      	ldr	r2, [pc, #400]	; (8002720 <HAL_DMA_Start_IT+0x4c8>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d009      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a62      	ldr	r2, [pc, #392]	; (8002724 <HAL_DMA_Start_IT+0x4cc>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d004      	beq.n	80025a8 <HAL_DMA_Start_IT+0x350>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a61      	ldr	r2, [pc, #388]	; (8002728 <HAL_DMA_Start_IT+0x4d0>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d101      	bne.n	80025ac <HAL_DMA_Start_IT+0x354>
 80025a8:	2301      	movs	r3, #1
 80025aa:	e000      	b.n	80025ae <HAL_DMA_Start_IT+0x356>
 80025ac:	2300      	movs	r3, #0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d01a      	beq.n	80025e8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d007      	beq.n	80025d0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025ce:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d007      	beq.n	80025e8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025e6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a37      	ldr	r2, [pc, #220]	; (80026cc <HAL_DMA_Start_IT+0x474>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d04a      	beq.n	8002688 <HAL_DMA_Start_IT+0x430>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a36      	ldr	r2, [pc, #216]	; (80026d0 <HAL_DMA_Start_IT+0x478>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d045      	beq.n	8002688 <HAL_DMA_Start_IT+0x430>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a34      	ldr	r2, [pc, #208]	; (80026d4 <HAL_DMA_Start_IT+0x47c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d040      	beq.n	8002688 <HAL_DMA_Start_IT+0x430>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a33      	ldr	r2, [pc, #204]	; (80026d8 <HAL_DMA_Start_IT+0x480>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d03b      	beq.n	8002688 <HAL_DMA_Start_IT+0x430>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a31      	ldr	r2, [pc, #196]	; (80026dc <HAL_DMA_Start_IT+0x484>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d036      	beq.n	8002688 <HAL_DMA_Start_IT+0x430>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a30      	ldr	r2, [pc, #192]	; (80026e0 <HAL_DMA_Start_IT+0x488>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d031      	beq.n	8002688 <HAL_DMA_Start_IT+0x430>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a2e      	ldr	r2, [pc, #184]	; (80026e4 <HAL_DMA_Start_IT+0x48c>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d02c      	beq.n	8002688 <HAL_DMA_Start_IT+0x430>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a2d      	ldr	r2, [pc, #180]	; (80026e8 <HAL_DMA_Start_IT+0x490>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d027      	beq.n	8002688 <HAL_DMA_Start_IT+0x430>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a2b      	ldr	r2, [pc, #172]	; (80026ec <HAL_DMA_Start_IT+0x494>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d022      	beq.n	8002688 <HAL_DMA_Start_IT+0x430>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a2a      	ldr	r2, [pc, #168]	; (80026f0 <HAL_DMA_Start_IT+0x498>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d01d      	beq.n	8002688 <HAL_DMA_Start_IT+0x430>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a28      	ldr	r2, [pc, #160]	; (80026f4 <HAL_DMA_Start_IT+0x49c>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d018      	beq.n	8002688 <HAL_DMA_Start_IT+0x430>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a27      	ldr	r2, [pc, #156]	; (80026f8 <HAL_DMA_Start_IT+0x4a0>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d013      	beq.n	8002688 <HAL_DMA_Start_IT+0x430>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a25      	ldr	r2, [pc, #148]	; (80026fc <HAL_DMA_Start_IT+0x4a4>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d00e      	beq.n	8002688 <HAL_DMA_Start_IT+0x430>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a24      	ldr	r2, [pc, #144]	; (8002700 <HAL_DMA_Start_IT+0x4a8>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d009      	beq.n	8002688 <HAL_DMA_Start_IT+0x430>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a22      	ldr	r2, [pc, #136]	; (8002704 <HAL_DMA_Start_IT+0x4ac>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d004      	beq.n	8002688 <HAL_DMA_Start_IT+0x430>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a21      	ldr	r2, [pc, #132]	; (8002708 <HAL_DMA_Start_IT+0x4b0>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d108      	bne.n	800269a <HAL_DMA_Start_IT+0x442>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f042 0201 	orr.w	r2, r2, #1
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	e012      	b.n	80026c0 <HAL_DMA_Start_IT+0x468>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f042 0201 	orr.w	r2, r2, #1
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	e009      	b.n	80026c0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026b2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80026c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3718      	adds	r7, #24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40020010 	.word	0x40020010
 80026d0:	40020028 	.word	0x40020028
 80026d4:	40020040 	.word	0x40020040
 80026d8:	40020058 	.word	0x40020058
 80026dc:	40020070 	.word	0x40020070
 80026e0:	40020088 	.word	0x40020088
 80026e4:	400200a0 	.word	0x400200a0
 80026e8:	400200b8 	.word	0x400200b8
 80026ec:	40020410 	.word	0x40020410
 80026f0:	40020428 	.word	0x40020428
 80026f4:	40020440 	.word	0x40020440
 80026f8:	40020458 	.word	0x40020458
 80026fc:	40020470 	.word	0x40020470
 8002700:	40020488 	.word	0x40020488
 8002704:	400204a0 	.word	0x400204a0
 8002708:	400204b8 	.word	0x400204b8
 800270c:	58025408 	.word	0x58025408
 8002710:	5802541c 	.word	0x5802541c
 8002714:	58025430 	.word	0x58025430
 8002718:	58025444 	.word	0x58025444
 800271c:	58025458 	.word	0x58025458
 8002720:	5802546c 	.word	0x5802546c
 8002724:	58025480 	.word	0x58025480
 8002728:	58025494 	.word	0x58025494

0800272c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002734:	f7ff f87c 	bl	8001830 <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d101      	bne.n	8002744 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e2dc      	b.n	8002cfe <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d008      	beq.n	8002762 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2280      	movs	r2, #128	; 0x80
 8002754:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e2cd      	b.n	8002cfe <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a76      	ldr	r2, [pc, #472]	; (8002940 <HAL_DMA_Abort+0x214>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d04a      	beq.n	8002802 <HAL_DMA_Abort+0xd6>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a74      	ldr	r2, [pc, #464]	; (8002944 <HAL_DMA_Abort+0x218>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d045      	beq.n	8002802 <HAL_DMA_Abort+0xd6>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a73      	ldr	r2, [pc, #460]	; (8002948 <HAL_DMA_Abort+0x21c>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d040      	beq.n	8002802 <HAL_DMA_Abort+0xd6>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a71      	ldr	r2, [pc, #452]	; (800294c <HAL_DMA_Abort+0x220>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d03b      	beq.n	8002802 <HAL_DMA_Abort+0xd6>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a70      	ldr	r2, [pc, #448]	; (8002950 <HAL_DMA_Abort+0x224>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d036      	beq.n	8002802 <HAL_DMA_Abort+0xd6>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a6e      	ldr	r2, [pc, #440]	; (8002954 <HAL_DMA_Abort+0x228>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d031      	beq.n	8002802 <HAL_DMA_Abort+0xd6>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a6d      	ldr	r2, [pc, #436]	; (8002958 <HAL_DMA_Abort+0x22c>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d02c      	beq.n	8002802 <HAL_DMA_Abort+0xd6>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a6b      	ldr	r2, [pc, #428]	; (800295c <HAL_DMA_Abort+0x230>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d027      	beq.n	8002802 <HAL_DMA_Abort+0xd6>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a6a      	ldr	r2, [pc, #424]	; (8002960 <HAL_DMA_Abort+0x234>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d022      	beq.n	8002802 <HAL_DMA_Abort+0xd6>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a68      	ldr	r2, [pc, #416]	; (8002964 <HAL_DMA_Abort+0x238>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d01d      	beq.n	8002802 <HAL_DMA_Abort+0xd6>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a67      	ldr	r2, [pc, #412]	; (8002968 <HAL_DMA_Abort+0x23c>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d018      	beq.n	8002802 <HAL_DMA_Abort+0xd6>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a65      	ldr	r2, [pc, #404]	; (800296c <HAL_DMA_Abort+0x240>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d013      	beq.n	8002802 <HAL_DMA_Abort+0xd6>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a64      	ldr	r2, [pc, #400]	; (8002970 <HAL_DMA_Abort+0x244>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d00e      	beq.n	8002802 <HAL_DMA_Abort+0xd6>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a62      	ldr	r2, [pc, #392]	; (8002974 <HAL_DMA_Abort+0x248>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d009      	beq.n	8002802 <HAL_DMA_Abort+0xd6>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a61      	ldr	r2, [pc, #388]	; (8002978 <HAL_DMA_Abort+0x24c>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d004      	beq.n	8002802 <HAL_DMA_Abort+0xd6>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a5f      	ldr	r2, [pc, #380]	; (800297c <HAL_DMA_Abort+0x250>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d101      	bne.n	8002806 <HAL_DMA_Abort+0xda>
 8002802:	2301      	movs	r3, #1
 8002804:	e000      	b.n	8002808 <HAL_DMA_Abort+0xdc>
 8002806:	2300      	movs	r3, #0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d013      	beq.n	8002834 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 021e 	bic.w	r2, r2, #30
 800281a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	695a      	ldr	r2, [r3, #20]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800282a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	617b      	str	r3, [r7, #20]
 8002832:	e00a      	b.n	800284a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f022 020e 	bic.w	r2, r2, #14
 8002842:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a3c      	ldr	r2, [pc, #240]	; (8002940 <HAL_DMA_Abort+0x214>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d072      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a3a      	ldr	r2, [pc, #232]	; (8002944 <HAL_DMA_Abort+0x218>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d06d      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a39      	ldr	r2, [pc, #228]	; (8002948 <HAL_DMA_Abort+0x21c>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d068      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a37      	ldr	r2, [pc, #220]	; (800294c <HAL_DMA_Abort+0x220>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d063      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a36      	ldr	r2, [pc, #216]	; (8002950 <HAL_DMA_Abort+0x224>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d05e      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a34      	ldr	r2, [pc, #208]	; (8002954 <HAL_DMA_Abort+0x228>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d059      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a33      	ldr	r2, [pc, #204]	; (8002958 <HAL_DMA_Abort+0x22c>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d054      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a31      	ldr	r2, [pc, #196]	; (800295c <HAL_DMA_Abort+0x230>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d04f      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a30      	ldr	r2, [pc, #192]	; (8002960 <HAL_DMA_Abort+0x234>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d04a      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a2e      	ldr	r2, [pc, #184]	; (8002964 <HAL_DMA_Abort+0x238>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d045      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a2d      	ldr	r2, [pc, #180]	; (8002968 <HAL_DMA_Abort+0x23c>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d040      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a2b      	ldr	r2, [pc, #172]	; (800296c <HAL_DMA_Abort+0x240>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d03b      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a2a      	ldr	r2, [pc, #168]	; (8002970 <HAL_DMA_Abort+0x244>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d036      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a28      	ldr	r2, [pc, #160]	; (8002974 <HAL_DMA_Abort+0x248>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d031      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a27      	ldr	r2, [pc, #156]	; (8002978 <HAL_DMA_Abort+0x24c>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d02c      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a25      	ldr	r2, [pc, #148]	; (800297c <HAL_DMA_Abort+0x250>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d027      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a24      	ldr	r2, [pc, #144]	; (8002980 <HAL_DMA_Abort+0x254>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d022      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a22      	ldr	r2, [pc, #136]	; (8002984 <HAL_DMA_Abort+0x258>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d01d      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a21      	ldr	r2, [pc, #132]	; (8002988 <HAL_DMA_Abort+0x25c>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d018      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a1f      	ldr	r2, [pc, #124]	; (800298c <HAL_DMA_Abort+0x260>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d013      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a1e      	ldr	r2, [pc, #120]	; (8002990 <HAL_DMA_Abort+0x264>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d00e      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a1c      	ldr	r2, [pc, #112]	; (8002994 <HAL_DMA_Abort+0x268>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d009      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a1b      	ldr	r2, [pc, #108]	; (8002998 <HAL_DMA_Abort+0x26c>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d004      	beq.n	800293a <HAL_DMA_Abort+0x20e>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a19      	ldr	r2, [pc, #100]	; (800299c <HAL_DMA_Abort+0x270>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d132      	bne.n	80029a0 <HAL_DMA_Abort+0x274>
 800293a:	2301      	movs	r3, #1
 800293c:	e031      	b.n	80029a2 <HAL_DMA_Abort+0x276>
 800293e:	bf00      	nop
 8002940:	40020010 	.word	0x40020010
 8002944:	40020028 	.word	0x40020028
 8002948:	40020040 	.word	0x40020040
 800294c:	40020058 	.word	0x40020058
 8002950:	40020070 	.word	0x40020070
 8002954:	40020088 	.word	0x40020088
 8002958:	400200a0 	.word	0x400200a0
 800295c:	400200b8 	.word	0x400200b8
 8002960:	40020410 	.word	0x40020410
 8002964:	40020428 	.word	0x40020428
 8002968:	40020440 	.word	0x40020440
 800296c:	40020458 	.word	0x40020458
 8002970:	40020470 	.word	0x40020470
 8002974:	40020488 	.word	0x40020488
 8002978:	400204a0 	.word	0x400204a0
 800297c:	400204b8 	.word	0x400204b8
 8002980:	58025408 	.word	0x58025408
 8002984:	5802541c 	.word	0x5802541c
 8002988:	58025430 	.word	0x58025430
 800298c:	58025444 	.word	0x58025444
 8002990:	58025458 	.word	0x58025458
 8002994:	5802546c 	.word	0x5802546c
 8002998:	58025480 	.word	0x58025480
 800299c:	58025494 	.word	0x58025494
 80029a0:	2300      	movs	r3, #0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d007      	beq.n	80029b6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a6d      	ldr	r2, [pc, #436]	; (8002b70 <HAL_DMA_Abort+0x444>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d04a      	beq.n	8002a56 <HAL_DMA_Abort+0x32a>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a6b      	ldr	r2, [pc, #428]	; (8002b74 <HAL_DMA_Abort+0x448>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d045      	beq.n	8002a56 <HAL_DMA_Abort+0x32a>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a6a      	ldr	r2, [pc, #424]	; (8002b78 <HAL_DMA_Abort+0x44c>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d040      	beq.n	8002a56 <HAL_DMA_Abort+0x32a>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a68      	ldr	r2, [pc, #416]	; (8002b7c <HAL_DMA_Abort+0x450>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d03b      	beq.n	8002a56 <HAL_DMA_Abort+0x32a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a67      	ldr	r2, [pc, #412]	; (8002b80 <HAL_DMA_Abort+0x454>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d036      	beq.n	8002a56 <HAL_DMA_Abort+0x32a>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a65      	ldr	r2, [pc, #404]	; (8002b84 <HAL_DMA_Abort+0x458>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d031      	beq.n	8002a56 <HAL_DMA_Abort+0x32a>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a64      	ldr	r2, [pc, #400]	; (8002b88 <HAL_DMA_Abort+0x45c>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d02c      	beq.n	8002a56 <HAL_DMA_Abort+0x32a>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a62      	ldr	r2, [pc, #392]	; (8002b8c <HAL_DMA_Abort+0x460>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d027      	beq.n	8002a56 <HAL_DMA_Abort+0x32a>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a61      	ldr	r2, [pc, #388]	; (8002b90 <HAL_DMA_Abort+0x464>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d022      	beq.n	8002a56 <HAL_DMA_Abort+0x32a>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a5f      	ldr	r2, [pc, #380]	; (8002b94 <HAL_DMA_Abort+0x468>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d01d      	beq.n	8002a56 <HAL_DMA_Abort+0x32a>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a5e      	ldr	r2, [pc, #376]	; (8002b98 <HAL_DMA_Abort+0x46c>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d018      	beq.n	8002a56 <HAL_DMA_Abort+0x32a>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a5c      	ldr	r2, [pc, #368]	; (8002b9c <HAL_DMA_Abort+0x470>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d013      	beq.n	8002a56 <HAL_DMA_Abort+0x32a>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a5b      	ldr	r2, [pc, #364]	; (8002ba0 <HAL_DMA_Abort+0x474>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d00e      	beq.n	8002a56 <HAL_DMA_Abort+0x32a>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a59      	ldr	r2, [pc, #356]	; (8002ba4 <HAL_DMA_Abort+0x478>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d009      	beq.n	8002a56 <HAL_DMA_Abort+0x32a>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a58      	ldr	r2, [pc, #352]	; (8002ba8 <HAL_DMA_Abort+0x47c>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d004      	beq.n	8002a56 <HAL_DMA_Abort+0x32a>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a56      	ldr	r2, [pc, #344]	; (8002bac <HAL_DMA_Abort+0x480>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d108      	bne.n	8002a68 <HAL_DMA_Abort+0x33c>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 0201 	bic.w	r2, r2, #1
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	e007      	b.n	8002a78 <HAL_DMA_Abort+0x34c>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0201 	bic.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002a78:	e013      	b.n	8002aa2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a7a:	f7fe fed9 	bl	8001830 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b05      	cmp	r3, #5
 8002a86:	d90c      	bls.n	8002aa2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2203      	movs	r2, #3
 8002a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e12d      	b.n	8002cfe <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1e5      	bne.n	8002a7a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a2f      	ldr	r2, [pc, #188]	; (8002b70 <HAL_DMA_Abort+0x444>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d04a      	beq.n	8002b4e <HAL_DMA_Abort+0x422>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a2d      	ldr	r2, [pc, #180]	; (8002b74 <HAL_DMA_Abort+0x448>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d045      	beq.n	8002b4e <HAL_DMA_Abort+0x422>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a2c      	ldr	r2, [pc, #176]	; (8002b78 <HAL_DMA_Abort+0x44c>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d040      	beq.n	8002b4e <HAL_DMA_Abort+0x422>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a2a      	ldr	r2, [pc, #168]	; (8002b7c <HAL_DMA_Abort+0x450>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d03b      	beq.n	8002b4e <HAL_DMA_Abort+0x422>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a29      	ldr	r2, [pc, #164]	; (8002b80 <HAL_DMA_Abort+0x454>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d036      	beq.n	8002b4e <HAL_DMA_Abort+0x422>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a27      	ldr	r2, [pc, #156]	; (8002b84 <HAL_DMA_Abort+0x458>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d031      	beq.n	8002b4e <HAL_DMA_Abort+0x422>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a26      	ldr	r2, [pc, #152]	; (8002b88 <HAL_DMA_Abort+0x45c>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d02c      	beq.n	8002b4e <HAL_DMA_Abort+0x422>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a24      	ldr	r2, [pc, #144]	; (8002b8c <HAL_DMA_Abort+0x460>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d027      	beq.n	8002b4e <HAL_DMA_Abort+0x422>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a23      	ldr	r2, [pc, #140]	; (8002b90 <HAL_DMA_Abort+0x464>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d022      	beq.n	8002b4e <HAL_DMA_Abort+0x422>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a21      	ldr	r2, [pc, #132]	; (8002b94 <HAL_DMA_Abort+0x468>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d01d      	beq.n	8002b4e <HAL_DMA_Abort+0x422>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a20      	ldr	r2, [pc, #128]	; (8002b98 <HAL_DMA_Abort+0x46c>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d018      	beq.n	8002b4e <HAL_DMA_Abort+0x422>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a1e      	ldr	r2, [pc, #120]	; (8002b9c <HAL_DMA_Abort+0x470>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d013      	beq.n	8002b4e <HAL_DMA_Abort+0x422>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a1d      	ldr	r2, [pc, #116]	; (8002ba0 <HAL_DMA_Abort+0x474>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d00e      	beq.n	8002b4e <HAL_DMA_Abort+0x422>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a1b      	ldr	r2, [pc, #108]	; (8002ba4 <HAL_DMA_Abort+0x478>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d009      	beq.n	8002b4e <HAL_DMA_Abort+0x422>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a1a      	ldr	r2, [pc, #104]	; (8002ba8 <HAL_DMA_Abort+0x47c>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d004      	beq.n	8002b4e <HAL_DMA_Abort+0x422>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a18      	ldr	r2, [pc, #96]	; (8002bac <HAL_DMA_Abort+0x480>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d101      	bne.n	8002b52 <HAL_DMA_Abort+0x426>
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e000      	b.n	8002b54 <HAL_DMA_Abort+0x428>
 8002b52:	2300      	movs	r3, #0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d02b      	beq.n	8002bb0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b62:	f003 031f 	and.w	r3, r3, #31
 8002b66:	223f      	movs	r2, #63	; 0x3f
 8002b68:	409a      	lsls	r2, r3
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	609a      	str	r2, [r3, #8]
 8002b6e:	e02a      	b.n	8002bc6 <HAL_DMA_Abort+0x49a>
 8002b70:	40020010 	.word	0x40020010
 8002b74:	40020028 	.word	0x40020028
 8002b78:	40020040 	.word	0x40020040
 8002b7c:	40020058 	.word	0x40020058
 8002b80:	40020070 	.word	0x40020070
 8002b84:	40020088 	.word	0x40020088
 8002b88:	400200a0 	.word	0x400200a0
 8002b8c:	400200b8 	.word	0x400200b8
 8002b90:	40020410 	.word	0x40020410
 8002b94:	40020428 	.word	0x40020428
 8002b98:	40020440 	.word	0x40020440
 8002b9c:	40020458 	.word	0x40020458
 8002ba0:	40020470 	.word	0x40020470
 8002ba4:	40020488 	.word	0x40020488
 8002ba8:	400204a0 	.word	0x400204a0
 8002bac:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bba:	f003 031f 	and.w	r3, r3, #31
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	409a      	lsls	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a4f      	ldr	r2, [pc, #316]	; (8002d08 <HAL_DMA_Abort+0x5dc>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d072      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a4d      	ldr	r2, [pc, #308]	; (8002d0c <HAL_DMA_Abort+0x5e0>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d06d      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a4c      	ldr	r2, [pc, #304]	; (8002d10 <HAL_DMA_Abort+0x5e4>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d068      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a4a      	ldr	r2, [pc, #296]	; (8002d14 <HAL_DMA_Abort+0x5e8>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d063      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a49      	ldr	r2, [pc, #292]	; (8002d18 <HAL_DMA_Abort+0x5ec>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d05e      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a47      	ldr	r2, [pc, #284]	; (8002d1c <HAL_DMA_Abort+0x5f0>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d059      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a46      	ldr	r2, [pc, #280]	; (8002d20 <HAL_DMA_Abort+0x5f4>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d054      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a44      	ldr	r2, [pc, #272]	; (8002d24 <HAL_DMA_Abort+0x5f8>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d04f      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a43      	ldr	r2, [pc, #268]	; (8002d28 <HAL_DMA_Abort+0x5fc>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d04a      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a41      	ldr	r2, [pc, #260]	; (8002d2c <HAL_DMA_Abort+0x600>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d045      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a40      	ldr	r2, [pc, #256]	; (8002d30 <HAL_DMA_Abort+0x604>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d040      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a3e      	ldr	r2, [pc, #248]	; (8002d34 <HAL_DMA_Abort+0x608>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d03b      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a3d      	ldr	r2, [pc, #244]	; (8002d38 <HAL_DMA_Abort+0x60c>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d036      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a3b      	ldr	r2, [pc, #236]	; (8002d3c <HAL_DMA_Abort+0x610>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d031      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a3a      	ldr	r2, [pc, #232]	; (8002d40 <HAL_DMA_Abort+0x614>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d02c      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a38      	ldr	r2, [pc, #224]	; (8002d44 <HAL_DMA_Abort+0x618>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d027      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a37      	ldr	r2, [pc, #220]	; (8002d48 <HAL_DMA_Abort+0x61c>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d022      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a35      	ldr	r2, [pc, #212]	; (8002d4c <HAL_DMA_Abort+0x620>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d01d      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a34      	ldr	r2, [pc, #208]	; (8002d50 <HAL_DMA_Abort+0x624>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d018      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a32      	ldr	r2, [pc, #200]	; (8002d54 <HAL_DMA_Abort+0x628>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d013      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a31      	ldr	r2, [pc, #196]	; (8002d58 <HAL_DMA_Abort+0x62c>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d00e      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a2f      	ldr	r2, [pc, #188]	; (8002d5c <HAL_DMA_Abort+0x630>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d009      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a2e      	ldr	r2, [pc, #184]	; (8002d60 <HAL_DMA_Abort+0x634>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d004      	beq.n	8002cb6 <HAL_DMA_Abort+0x58a>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a2c      	ldr	r2, [pc, #176]	; (8002d64 <HAL_DMA_Abort+0x638>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d101      	bne.n	8002cba <HAL_DMA_Abort+0x58e>
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e000      	b.n	8002cbc <HAL_DMA_Abort+0x590>
 8002cba:	2300      	movs	r3, #0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d015      	beq.n	8002cec <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002cc8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00c      	beq.n	8002cec <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cdc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ce0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002cea:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3718      	adds	r7, #24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40020010 	.word	0x40020010
 8002d0c:	40020028 	.word	0x40020028
 8002d10:	40020040 	.word	0x40020040
 8002d14:	40020058 	.word	0x40020058
 8002d18:	40020070 	.word	0x40020070
 8002d1c:	40020088 	.word	0x40020088
 8002d20:	400200a0 	.word	0x400200a0
 8002d24:	400200b8 	.word	0x400200b8
 8002d28:	40020410 	.word	0x40020410
 8002d2c:	40020428 	.word	0x40020428
 8002d30:	40020440 	.word	0x40020440
 8002d34:	40020458 	.word	0x40020458
 8002d38:	40020470 	.word	0x40020470
 8002d3c:	40020488 	.word	0x40020488
 8002d40:	400204a0 	.word	0x400204a0
 8002d44:	400204b8 	.word	0x400204b8
 8002d48:	58025408 	.word	0x58025408
 8002d4c:	5802541c 	.word	0x5802541c
 8002d50:	58025430 	.word	0x58025430
 8002d54:	58025444 	.word	0x58025444
 8002d58:	58025458 	.word	0x58025458
 8002d5c:	5802546c 	.word	0x5802546c
 8002d60:	58025480 	.word	0x58025480
 8002d64:	58025494 	.word	0x58025494

08002d68 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e237      	b.n	80031ea <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d004      	beq.n	8002d90 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2280      	movs	r2, #128	; 0x80
 8002d8a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e22c      	b.n	80031ea <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a5c      	ldr	r2, [pc, #368]	; (8002f08 <HAL_DMA_Abort_IT+0x1a0>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d04a      	beq.n	8002e30 <HAL_DMA_Abort_IT+0xc8>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a5b      	ldr	r2, [pc, #364]	; (8002f0c <HAL_DMA_Abort_IT+0x1a4>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d045      	beq.n	8002e30 <HAL_DMA_Abort_IT+0xc8>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a59      	ldr	r2, [pc, #356]	; (8002f10 <HAL_DMA_Abort_IT+0x1a8>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d040      	beq.n	8002e30 <HAL_DMA_Abort_IT+0xc8>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a58      	ldr	r2, [pc, #352]	; (8002f14 <HAL_DMA_Abort_IT+0x1ac>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d03b      	beq.n	8002e30 <HAL_DMA_Abort_IT+0xc8>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a56      	ldr	r2, [pc, #344]	; (8002f18 <HAL_DMA_Abort_IT+0x1b0>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d036      	beq.n	8002e30 <HAL_DMA_Abort_IT+0xc8>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a55      	ldr	r2, [pc, #340]	; (8002f1c <HAL_DMA_Abort_IT+0x1b4>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d031      	beq.n	8002e30 <HAL_DMA_Abort_IT+0xc8>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a53      	ldr	r2, [pc, #332]	; (8002f20 <HAL_DMA_Abort_IT+0x1b8>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d02c      	beq.n	8002e30 <HAL_DMA_Abort_IT+0xc8>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a52      	ldr	r2, [pc, #328]	; (8002f24 <HAL_DMA_Abort_IT+0x1bc>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d027      	beq.n	8002e30 <HAL_DMA_Abort_IT+0xc8>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a50      	ldr	r2, [pc, #320]	; (8002f28 <HAL_DMA_Abort_IT+0x1c0>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d022      	beq.n	8002e30 <HAL_DMA_Abort_IT+0xc8>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a4f      	ldr	r2, [pc, #316]	; (8002f2c <HAL_DMA_Abort_IT+0x1c4>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d01d      	beq.n	8002e30 <HAL_DMA_Abort_IT+0xc8>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a4d      	ldr	r2, [pc, #308]	; (8002f30 <HAL_DMA_Abort_IT+0x1c8>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d018      	beq.n	8002e30 <HAL_DMA_Abort_IT+0xc8>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a4c      	ldr	r2, [pc, #304]	; (8002f34 <HAL_DMA_Abort_IT+0x1cc>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d013      	beq.n	8002e30 <HAL_DMA_Abort_IT+0xc8>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a4a      	ldr	r2, [pc, #296]	; (8002f38 <HAL_DMA_Abort_IT+0x1d0>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d00e      	beq.n	8002e30 <HAL_DMA_Abort_IT+0xc8>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a49      	ldr	r2, [pc, #292]	; (8002f3c <HAL_DMA_Abort_IT+0x1d4>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d009      	beq.n	8002e30 <HAL_DMA_Abort_IT+0xc8>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a47      	ldr	r2, [pc, #284]	; (8002f40 <HAL_DMA_Abort_IT+0x1d8>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d004      	beq.n	8002e30 <HAL_DMA_Abort_IT+0xc8>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a46      	ldr	r2, [pc, #280]	; (8002f44 <HAL_DMA_Abort_IT+0x1dc>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d101      	bne.n	8002e34 <HAL_DMA_Abort_IT+0xcc>
 8002e30:	2301      	movs	r3, #1
 8002e32:	e000      	b.n	8002e36 <HAL_DMA_Abort_IT+0xce>
 8002e34:	2300      	movs	r3, #0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 8086 	beq.w	8002f48 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2204      	movs	r2, #4
 8002e40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a2f      	ldr	r2, [pc, #188]	; (8002f08 <HAL_DMA_Abort_IT+0x1a0>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d04a      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x17c>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a2e      	ldr	r2, [pc, #184]	; (8002f0c <HAL_DMA_Abort_IT+0x1a4>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d045      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x17c>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a2c      	ldr	r2, [pc, #176]	; (8002f10 <HAL_DMA_Abort_IT+0x1a8>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d040      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x17c>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a2b      	ldr	r2, [pc, #172]	; (8002f14 <HAL_DMA_Abort_IT+0x1ac>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d03b      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x17c>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a29      	ldr	r2, [pc, #164]	; (8002f18 <HAL_DMA_Abort_IT+0x1b0>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d036      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x17c>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a28      	ldr	r2, [pc, #160]	; (8002f1c <HAL_DMA_Abort_IT+0x1b4>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d031      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x17c>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a26      	ldr	r2, [pc, #152]	; (8002f20 <HAL_DMA_Abort_IT+0x1b8>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d02c      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x17c>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a25      	ldr	r2, [pc, #148]	; (8002f24 <HAL_DMA_Abort_IT+0x1bc>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d027      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x17c>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a23      	ldr	r2, [pc, #140]	; (8002f28 <HAL_DMA_Abort_IT+0x1c0>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d022      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x17c>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a22      	ldr	r2, [pc, #136]	; (8002f2c <HAL_DMA_Abort_IT+0x1c4>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d01d      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x17c>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a20      	ldr	r2, [pc, #128]	; (8002f30 <HAL_DMA_Abort_IT+0x1c8>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d018      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x17c>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a1f      	ldr	r2, [pc, #124]	; (8002f34 <HAL_DMA_Abort_IT+0x1cc>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d013      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x17c>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a1d      	ldr	r2, [pc, #116]	; (8002f38 <HAL_DMA_Abort_IT+0x1d0>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d00e      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x17c>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a1c      	ldr	r2, [pc, #112]	; (8002f3c <HAL_DMA_Abort_IT+0x1d4>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d009      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x17c>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a1a      	ldr	r2, [pc, #104]	; (8002f40 <HAL_DMA_Abort_IT+0x1d8>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d004      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x17c>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a19      	ldr	r2, [pc, #100]	; (8002f44 <HAL_DMA_Abort_IT+0x1dc>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d108      	bne.n	8002ef6 <HAL_DMA_Abort_IT+0x18e>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 0201 	bic.w	r2, r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	e178      	b.n	80031e8 <HAL_DMA_Abort_IT+0x480>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0201 	bic.w	r2, r2, #1
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	e16f      	b.n	80031e8 <HAL_DMA_Abort_IT+0x480>
 8002f08:	40020010 	.word	0x40020010
 8002f0c:	40020028 	.word	0x40020028
 8002f10:	40020040 	.word	0x40020040
 8002f14:	40020058 	.word	0x40020058
 8002f18:	40020070 	.word	0x40020070
 8002f1c:	40020088 	.word	0x40020088
 8002f20:	400200a0 	.word	0x400200a0
 8002f24:	400200b8 	.word	0x400200b8
 8002f28:	40020410 	.word	0x40020410
 8002f2c:	40020428 	.word	0x40020428
 8002f30:	40020440 	.word	0x40020440
 8002f34:	40020458 	.word	0x40020458
 8002f38:	40020470 	.word	0x40020470
 8002f3c:	40020488 	.word	0x40020488
 8002f40:	400204a0 	.word	0x400204a0
 8002f44:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 020e 	bic.w	r2, r2, #14
 8002f56:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a6c      	ldr	r2, [pc, #432]	; (8003110 <HAL_DMA_Abort_IT+0x3a8>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d04a      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x290>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a6b      	ldr	r2, [pc, #428]	; (8003114 <HAL_DMA_Abort_IT+0x3ac>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d045      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x290>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a69      	ldr	r2, [pc, #420]	; (8003118 <HAL_DMA_Abort_IT+0x3b0>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d040      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x290>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a68      	ldr	r2, [pc, #416]	; (800311c <HAL_DMA_Abort_IT+0x3b4>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d03b      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x290>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a66      	ldr	r2, [pc, #408]	; (8003120 <HAL_DMA_Abort_IT+0x3b8>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d036      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x290>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a65      	ldr	r2, [pc, #404]	; (8003124 <HAL_DMA_Abort_IT+0x3bc>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d031      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x290>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a63      	ldr	r2, [pc, #396]	; (8003128 <HAL_DMA_Abort_IT+0x3c0>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d02c      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x290>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a62      	ldr	r2, [pc, #392]	; (800312c <HAL_DMA_Abort_IT+0x3c4>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d027      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x290>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a60      	ldr	r2, [pc, #384]	; (8003130 <HAL_DMA_Abort_IT+0x3c8>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d022      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x290>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a5f      	ldr	r2, [pc, #380]	; (8003134 <HAL_DMA_Abort_IT+0x3cc>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d01d      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x290>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a5d      	ldr	r2, [pc, #372]	; (8003138 <HAL_DMA_Abort_IT+0x3d0>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d018      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x290>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a5c      	ldr	r2, [pc, #368]	; (800313c <HAL_DMA_Abort_IT+0x3d4>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d013      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x290>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a5a      	ldr	r2, [pc, #360]	; (8003140 <HAL_DMA_Abort_IT+0x3d8>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d00e      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x290>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a59      	ldr	r2, [pc, #356]	; (8003144 <HAL_DMA_Abort_IT+0x3dc>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d009      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x290>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a57      	ldr	r2, [pc, #348]	; (8003148 <HAL_DMA_Abort_IT+0x3e0>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d004      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x290>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a56      	ldr	r2, [pc, #344]	; (800314c <HAL_DMA_Abort_IT+0x3e4>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d108      	bne.n	800300a <HAL_DMA_Abort_IT+0x2a2>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 0201 	bic.w	r2, r2, #1
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	e007      	b.n	800301a <HAL_DMA_Abort_IT+0x2b2>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 0201 	bic.w	r2, r2, #1
 8003018:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a3c      	ldr	r2, [pc, #240]	; (8003110 <HAL_DMA_Abort_IT+0x3a8>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d072      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a3a      	ldr	r2, [pc, #232]	; (8003114 <HAL_DMA_Abort_IT+0x3ac>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d06d      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a39      	ldr	r2, [pc, #228]	; (8003118 <HAL_DMA_Abort_IT+0x3b0>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d068      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a37      	ldr	r2, [pc, #220]	; (800311c <HAL_DMA_Abort_IT+0x3b4>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d063      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a36      	ldr	r2, [pc, #216]	; (8003120 <HAL_DMA_Abort_IT+0x3b8>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d05e      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a34      	ldr	r2, [pc, #208]	; (8003124 <HAL_DMA_Abort_IT+0x3bc>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d059      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a33      	ldr	r2, [pc, #204]	; (8003128 <HAL_DMA_Abort_IT+0x3c0>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d054      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a31      	ldr	r2, [pc, #196]	; (800312c <HAL_DMA_Abort_IT+0x3c4>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d04f      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a30      	ldr	r2, [pc, #192]	; (8003130 <HAL_DMA_Abort_IT+0x3c8>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d04a      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a2e      	ldr	r2, [pc, #184]	; (8003134 <HAL_DMA_Abort_IT+0x3cc>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d045      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a2d      	ldr	r2, [pc, #180]	; (8003138 <HAL_DMA_Abort_IT+0x3d0>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d040      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a2b      	ldr	r2, [pc, #172]	; (800313c <HAL_DMA_Abort_IT+0x3d4>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d03b      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a2a      	ldr	r2, [pc, #168]	; (8003140 <HAL_DMA_Abort_IT+0x3d8>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d036      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a28      	ldr	r2, [pc, #160]	; (8003144 <HAL_DMA_Abort_IT+0x3dc>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d031      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a27      	ldr	r2, [pc, #156]	; (8003148 <HAL_DMA_Abort_IT+0x3e0>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d02c      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a25      	ldr	r2, [pc, #148]	; (800314c <HAL_DMA_Abort_IT+0x3e4>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d027      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a24      	ldr	r2, [pc, #144]	; (8003150 <HAL_DMA_Abort_IT+0x3e8>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d022      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a22      	ldr	r2, [pc, #136]	; (8003154 <HAL_DMA_Abort_IT+0x3ec>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d01d      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a21      	ldr	r2, [pc, #132]	; (8003158 <HAL_DMA_Abort_IT+0x3f0>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d018      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a1f      	ldr	r2, [pc, #124]	; (800315c <HAL_DMA_Abort_IT+0x3f4>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d013      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a1e      	ldr	r2, [pc, #120]	; (8003160 <HAL_DMA_Abort_IT+0x3f8>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d00e      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a1c      	ldr	r2, [pc, #112]	; (8003164 <HAL_DMA_Abort_IT+0x3fc>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d009      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a1b      	ldr	r2, [pc, #108]	; (8003168 <HAL_DMA_Abort_IT+0x400>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d004      	beq.n	800310a <HAL_DMA_Abort_IT+0x3a2>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a19      	ldr	r2, [pc, #100]	; (800316c <HAL_DMA_Abort_IT+0x404>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d132      	bne.n	8003170 <HAL_DMA_Abort_IT+0x408>
 800310a:	2301      	movs	r3, #1
 800310c:	e031      	b.n	8003172 <HAL_DMA_Abort_IT+0x40a>
 800310e:	bf00      	nop
 8003110:	40020010 	.word	0x40020010
 8003114:	40020028 	.word	0x40020028
 8003118:	40020040 	.word	0x40020040
 800311c:	40020058 	.word	0x40020058
 8003120:	40020070 	.word	0x40020070
 8003124:	40020088 	.word	0x40020088
 8003128:	400200a0 	.word	0x400200a0
 800312c:	400200b8 	.word	0x400200b8
 8003130:	40020410 	.word	0x40020410
 8003134:	40020428 	.word	0x40020428
 8003138:	40020440 	.word	0x40020440
 800313c:	40020458 	.word	0x40020458
 8003140:	40020470 	.word	0x40020470
 8003144:	40020488 	.word	0x40020488
 8003148:	400204a0 	.word	0x400204a0
 800314c:	400204b8 	.word	0x400204b8
 8003150:	58025408 	.word	0x58025408
 8003154:	5802541c 	.word	0x5802541c
 8003158:	58025430 	.word	0x58025430
 800315c:	58025444 	.word	0x58025444
 8003160:	58025458 	.word	0x58025458
 8003164:	5802546c 	.word	0x5802546c
 8003168:	58025480 	.word	0x58025480
 800316c:	58025494 	.word	0x58025494
 8003170:	2300      	movs	r3, #0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d028      	beq.n	80031c8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003180:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003184:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003190:	f003 031f 	and.w	r3, r3, #31
 8003194:	2201      	movs	r2, #1
 8003196:	409a      	lsls	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80031a4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00c      	beq.n	80031c8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031bc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80031c6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d003      	beq.n	80031e8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop

080031f4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b08a      	sub	sp, #40	; 0x28
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80031fc:	2300      	movs	r3, #0
 80031fe:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003200:	4b67      	ldr	r3, [pc, #412]	; (80033a0 <HAL_DMA_IRQHandler+0x1ac>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a67      	ldr	r2, [pc, #412]	; (80033a4 <HAL_DMA_IRQHandler+0x1b0>)
 8003206:	fba2 2303 	umull	r2, r3, r2, r3
 800320a:	0a9b      	lsrs	r3, r3, #10
 800320c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003212:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003218:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800321a:	6a3b      	ldr	r3, [r7, #32]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a5f      	ldr	r2, [pc, #380]	; (80033a8 <HAL_DMA_IRQHandler+0x1b4>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d04a      	beq.n	80032c6 <HAL_DMA_IRQHandler+0xd2>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a5d      	ldr	r2, [pc, #372]	; (80033ac <HAL_DMA_IRQHandler+0x1b8>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d045      	beq.n	80032c6 <HAL_DMA_IRQHandler+0xd2>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a5c      	ldr	r2, [pc, #368]	; (80033b0 <HAL_DMA_IRQHandler+0x1bc>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d040      	beq.n	80032c6 <HAL_DMA_IRQHandler+0xd2>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a5a      	ldr	r2, [pc, #360]	; (80033b4 <HAL_DMA_IRQHandler+0x1c0>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d03b      	beq.n	80032c6 <HAL_DMA_IRQHandler+0xd2>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a59      	ldr	r2, [pc, #356]	; (80033b8 <HAL_DMA_IRQHandler+0x1c4>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d036      	beq.n	80032c6 <HAL_DMA_IRQHandler+0xd2>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a57      	ldr	r2, [pc, #348]	; (80033bc <HAL_DMA_IRQHandler+0x1c8>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d031      	beq.n	80032c6 <HAL_DMA_IRQHandler+0xd2>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a56      	ldr	r2, [pc, #344]	; (80033c0 <HAL_DMA_IRQHandler+0x1cc>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d02c      	beq.n	80032c6 <HAL_DMA_IRQHandler+0xd2>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a54      	ldr	r2, [pc, #336]	; (80033c4 <HAL_DMA_IRQHandler+0x1d0>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d027      	beq.n	80032c6 <HAL_DMA_IRQHandler+0xd2>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a53      	ldr	r2, [pc, #332]	; (80033c8 <HAL_DMA_IRQHandler+0x1d4>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d022      	beq.n	80032c6 <HAL_DMA_IRQHandler+0xd2>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a51      	ldr	r2, [pc, #324]	; (80033cc <HAL_DMA_IRQHandler+0x1d8>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d01d      	beq.n	80032c6 <HAL_DMA_IRQHandler+0xd2>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a50      	ldr	r2, [pc, #320]	; (80033d0 <HAL_DMA_IRQHandler+0x1dc>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d018      	beq.n	80032c6 <HAL_DMA_IRQHandler+0xd2>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a4e      	ldr	r2, [pc, #312]	; (80033d4 <HAL_DMA_IRQHandler+0x1e0>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d013      	beq.n	80032c6 <HAL_DMA_IRQHandler+0xd2>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a4d      	ldr	r2, [pc, #308]	; (80033d8 <HAL_DMA_IRQHandler+0x1e4>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d00e      	beq.n	80032c6 <HAL_DMA_IRQHandler+0xd2>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a4b      	ldr	r2, [pc, #300]	; (80033dc <HAL_DMA_IRQHandler+0x1e8>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d009      	beq.n	80032c6 <HAL_DMA_IRQHandler+0xd2>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a4a      	ldr	r2, [pc, #296]	; (80033e0 <HAL_DMA_IRQHandler+0x1ec>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d004      	beq.n	80032c6 <HAL_DMA_IRQHandler+0xd2>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a48      	ldr	r2, [pc, #288]	; (80033e4 <HAL_DMA_IRQHandler+0x1f0>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d101      	bne.n	80032ca <HAL_DMA_IRQHandler+0xd6>
 80032c6:	2301      	movs	r3, #1
 80032c8:	e000      	b.n	80032cc <HAL_DMA_IRQHandler+0xd8>
 80032ca:	2300      	movs	r3, #0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 842b 	beq.w	8003b28 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d6:	f003 031f 	and.w	r3, r3, #31
 80032da:	2208      	movs	r2, #8
 80032dc:	409a      	lsls	r2, r3
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	4013      	ands	r3, r2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 80a2 	beq.w	800342c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a2e      	ldr	r2, [pc, #184]	; (80033a8 <HAL_DMA_IRQHandler+0x1b4>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d04a      	beq.n	8003388 <HAL_DMA_IRQHandler+0x194>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a2d      	ldr	r2, [pc, #180]	; (80033ac <HAL_DMA_IRQHandler+0x1b8>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d045      	beq.n	8003388 <HAL_DMA_IRQHandler+0x194>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a2b      	ldr	r2, [pc, #172]	; (80033b0 <HAL_DMA_IRQHandler+0x1bc>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d040      	beq.n	8003388 <HAL_DMA_IRQHandler+0x194>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a2a      	ldr	r2, [pc, #168]	; (80033b4 <HAL_DMA_IRQHandler+0x1c0>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d03b      	beq.n	8003388 <HAL_DMA_IRQHandler+0x194>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a28      	ldr	r2, [pc, #160]	; (80033b8 <HAL_DMA_IRQHandler+0x1c4>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d036      	beq.n	8003388 <HAL_DMA_IRQHandler+0x194>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a27      	ldr	r2, [pc, #156]	; (80033bc <HAL_DMA_IRQHandler+0x1c8>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d031      	beq.n	8003388 <HAL_DMA_IRQHandler+0x194>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a25      	ldr	r2, [pc, #148]	; (80033c0 <HAL_DMA_IRQHandler+0x1cc>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d02c      	beq.n	8003388 <HAL_DMA_IRQHandler+0x194>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a24      	ldr	r2, [pc, #144]	; (80033c4 <HAL_DMA_IRQHandler+0x1d0>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d027      	beq.n	8003388 <HAL_DMA_IRQHandler+0x194>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a22      	ldr	r2, [pc, #136]	; (80033c8 <HAL_DMA_IRQHandler+0x1d4>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d022      	beq.n	8003388 <HAL_DMA_IRQHandler+0x194>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a21      	ldr	r2, [pc, #132]	; (80033cc <HAL_DMA_IRQHandler+0x1d8>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d01d      	beq.n	8003388 <HAL_DMA_IRQHandler+0x194>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a1f      	ldr	r2, [pc, #124]	; (80033d0 <HAL_DMA_IRQHandler+0x1dc>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d018      	beq.n	8003388 <HAL_DMA_IRQHandler+0x194>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a1e      	ldr	r2, [pc, #120]	; (80033d4 <HAL_DMA_IRQHandler+0x1e0>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d013      	beq.n	8003388 <HAL_DMA_IRQHandler+0x194>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a1c      	ldr	r2, [pc, #112]	; (80033d8 <HAL_DMA_IRQHandler+0x1e4>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d00e      	beq.n	8003388 <HAL_DMA_IRQHandler+0x194>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a1b      	ldr	r2, [pc, #108]	; (80033dc <HAL_DMA_IRQHandler+0x1e8>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d009      	beq.n	8003388 <HAL_DMA_IRQHandler+0x194>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a19      	ldr	r2, [pc, #100]	; (80033e0 <HAL_DMA_IRQHandler+0x1ec>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d004      	beq.n	8003388 <HAL_DMA_IRQHandler+0x194>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a18      	ldr	r2, [pc, #96]	; (80033e4 <HAL_DMA_IRQHandler+0x1f0>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d12f      	bne.n	80033e8 <HAL_DMA_IRQHandler+0x1f4>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0304 	and.w	r3, r3, #4
 8003392:	2b00      	cmp	r3, #0
 8003394:	bf14      	ite	ne
 8003396:	2301      	movne	r3, #1
 8003398:	2300      	moveq	r3, #0
 800339a:	b2db      	uxtb	r3, r3
 800339c:	e02e      	b.n	80033fc <HAL_DMA_IRQHandler+0x208>
 800339e:	bf00      	nop
 80033a0:	24000000 	.word	0x24000000
 80033a4:	1b4e81b5 	.word	0x1b4e81b5
 80033a8:	40020010 	.word	0x40020010
 80033ac:	40020028 	.word	0x40020028
 80033b0:	40020040 	.word	0x40020040
 80033b4:	40020058 	.word	0x40020058
 80033b8:	40020070 	.word	0x40020070
 80033bc:	40020088 	.word	0x40020088
 80033c0:	400200a0 	.word	0x400200a0
 80033c4:	400200b8 	.word	0x400200b8
 80033c8:	40020410 	.word	0x40020410
 80033cc:	40020428 	.word	0x40020428
 80033d0:	40020440 	.word	0x40020440
 80033d4:	40020458 	.word	0x40020458
 80033d8:	40020470 	.word	0x40020470
 80033dc:	40020488 	.word	0x40020488
 80033e0:	400204a0 	.word	0x400204a0
 80033e4:	400204b8 	.word	0x400204b8
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	bf14      	ite	ne
 80033f6:	2301      	movne	r3, #1
 80033f8:	2300      	moveq	r3, #0
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d015      	beq.n	800342c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0204 	bic.w	r2, r2, #4
 800340e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003414:	f003 031f 	and.w	r3, r3, #31
 8003418:	2208      	movs	r2, #8
 800341a:	409a      	lsls	r2, r3
 800341c:	6a3b      	ldr	r3, [r7, #32]
 800341e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003424:	f043 0201 	orr.w	r2, r3, #1
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003430:	f003 031f 	and.w	r3, r3, #31
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	fa22 f303 	lsr.w	r3, r2, r3
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b00      	cmp	r3, #0
 8003440:	d06e      	beq.n	8003520 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a69      	ldr	r2, [pc, #420]	; (80035ec <HAL_DMA_IRQHandler+0x3f8>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d04a      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x2ee>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a67      	ldr	r2, [pc, #412]	; (80035f0 <HAL_DMA_IRQHandler+0x3fc>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d045      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x2ee>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a66      	ldr	r2, [pc, #408]	; (80035f4 <HAL_DMA_IRQHandler+0x400>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d040      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x2ee>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a64      	ldr	r2, [pc, #400]	; (80035f8 <HAL_DMA_IRQHandler+0x404>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d03b      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x2ee>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a63      	ldr	r2, [pc, #396]	; (80035fc <HAL_DMA_IRQHandler+0x408>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d036      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x2ee>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a61      	ldr	r2, [pc, #388]	; (8003600 <HAL_DMA_IRQHandler+0x40c>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d031      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x2ee>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a60      	ldr	r2, [pc, #384]	; (8003604 <HAL_DMA_IRQHandler+0x410>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d02c      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x2ee>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a5e      	ldr	r2, [pc, #376]	; (8003608 <HAL_DMA_IRQHandler+0x414>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d027      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x2ee>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a5d      	ldr	r2, [pc, #372]	; (800360c <HAL_DMA_IRQHandler+0x418>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d022      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x2ee>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a5b      	ldr	r2, [pc, #364]	; (8003610 <HAL_DMA_IRQHandler+0x41c>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d01d      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x2ee>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a5a      	ldr	r2, [pc, #360]	; (8003614 <HAL_DMA_IRQHandler+0x420>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d018      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x2ee>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a58      	ldr	r2, [pc, #352]	; (8003618 <HAL_DMA_IRQHandler+0x424>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d013      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x2ee>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a57      	ldr	r2, [pc, #348]	; (800361c <HAL_DMA_IRQHandler+0x428>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d00e      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x2ee>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a55      	ldr	r2, [pc, #340]	; (8003620 <HAL_DMA_IRQHandler+0x42c>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d009      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x2ee>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a54      	ldr	r2, [pc, #336]	; (8003624 <HAL_DMA_IRQHandler+0x430>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d004      	beq.n	80034e2 <HAL_DMA_IRQHandler+0x2ee>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a52      	ldr	r2, [pc, #328]	; (8003628 <HAL_DMA_IRQHandler+0x434>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d10a      	bne.n	80034f8 <HAL_DMA_IRQHandler+0x304>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	bf14      	ite	ne
 80034f0:	2301      	movne	r3, #1
 80034f2:	2300      	moveq	r3, #0
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	e003      	b.n	8003500 <HAL_DMA_IRQHandler+0x30c>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2300      	movs	r3, #0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00d      	beq.n	8003520 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003508:	f003 031f 	and.w	r3, r3, #31
 800350c:	2201      	movs	r2, #1
 800350e:	409a      	lsls	r2, r3
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003518:	f043 0202 	orr.w	r2, r3, #2
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003524:	f003 031f 	and.w	r3, r3, #31
 8003528:	2204      	movs	r2, #4
 800352a:	409a      	lsls	r2, r3
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	4013      	ands	r3, r2
 8003530:	2b00      	cmp	r3, #0
 8003532:	f000 808f 	beq.w	8003654 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a2c      	ldr	r2, [pc, #176]	; (80035ec <HAL_DMA_IRQHandler+0x3f8>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d04a      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x3e2>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a2a      	ldr	r2, [pc, #168]	; (80035f0 <HAL_DMA_IRQHandler+0x3fc>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d045      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x3e2>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a29      	ldr	r2, [pc, #164]	; (80035f4 <HAL_DMA_IRQHandler+0x400>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d040      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x3e2>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a27      	ldr	r2, [pc, #156]	; (80035f8 <HAL_DMA_IRQHandler+0x404>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d03b      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x3e2>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a26      	ldr	r2, [pc, #152]	; (80035fc <HAL_DMA_IRQHandler+0x408>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d036      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x3e2>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a24      	ldr	r2, [pc, #144]	; (8003600 <HAL_DMA_IRQHandler+0x40c>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d031      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x3e2>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a23      	ldr	r2, [pc, #140]	; (8003604 <HAL_DMA_IRQHandler+0x410>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d02c      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x3e2>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a21      	ldr	r2, [pc, #132]	; (8003608 <HAL_DMA_IRQHandler+0x414>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d027      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x3e2>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a20      	ldr	r2, [pc, #128]	; (800360c <HAL_DMA_IRQHandler+0x418>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d022      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x3e2>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a1e      	ldr	r2, [pc, #120]	; (8003610 <HAL_DMA_IRQHandler+0x41c>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d01d      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x3e2>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a1d      	ldr	r2, [pc, #116]	; (8003614 <HAL_DMA_IRQHandler+0x420>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d018      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x3e2>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a1b      	ldr	r2, [pc, #108]	; (8003618 <HAL_DMA_IRQHandler+0x424>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d013      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x3e2>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a1a      	ldr	r2, [pc, #104]	; (800361c <HAL_DMA_IRQHandler+0x428>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d00e      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x3e2>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a18      	ldr	r2, [pc, #96]	; (8003620 <HAL_DMA_IRQHandler+0x42c>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d009      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x3e2>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a17      	ldr	r2, [pc, #92]	; (8003624 <HAL_DMA_IRQHandler+0x430>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d004      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x3e2>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a15      	ldr	r2, [pc, #84]	; (8003628 <HAL_DMA_IRQHandler+0x434>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d12a      	bne.n	800362c <HAL_DMA_IRQHandler+0x438>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	bf14      	ite	ne
 80035e4:	2301      	movne	r3, #1
 80035e6:	2300      	moveq	r3, #0
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	e023      	b.n	8003634 <HAL_DMA_IRQHandler+0x440>
 80035ec:	40020010 	.word	0x40020010
 80035f0:	40020028 	.word	0x40020028
 80035f4:	40020040 	.word	0x40020040
 80035f8:	40020058 	.word	0x40020058
 80035fc:	40020070 	.word	0x40020070
 8003600:	40020088 	.word	0x40020088
 8003604:	400200a0 	.word	0x400200a0
 8003608:	400200b8 	.word	0x400200b8
 800360c:	40020410 	.word	0x40020410
 8003610:	40020428 	.word	0x40020428
 8003614:	40020440 	.word	0x40020440
 8003618:	40020458 	.word	0x40020458
 800361c:	40020470 	.word	0x40020470
 8003620:	40020488 	.word	0x40020488
 8003624:	400204a0 	.word	0x400204a0
 8003628:	400204b8 	.word	0x400204b8
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2300      	movs	r3, #0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00d      	beq.n	8003654 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800363c:	f003 031f 	and.w	r3, r3, #31
 8003640:	2204      	movs	r2, #4
 8003642:	409a      	lsls	r2, r3
 8003644:	6a3b      	ldr	r3, [r7, #32]
 8003646:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800364c:	f043 0204 	orr.w	r2, r3, #4
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003658:	f003 031f 	and.w	r3, r3, #31
 800365c:	2210      	movs	r2, #16
 800365e:	409a      	lsls	r2, r3
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	4013      	ands	r3, r2
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 80a6 	beq.w	80037b6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a85      	ldr	r2, [pc, #532]	; (8003884 <HAL_DMA_IRQHandler+0x690>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d04a      	beq.n	800370a <HAL_DMA_IRQHandler+0x516>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a83      	ldr	r2, [pc, #524]	; (8003888 <HAL_DMA_IRQHandler+0x694>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d045      	beq.n	800370a <HAL_DMA_IRQHandler+0x516>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a82      	ldr	r2, [pc, #520]	; (800388c <HAL_DMA_IRQHandler+0x698>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d040      	beq.n	800370a <HAL_DMA_IRQHandler+0x516>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a80      	ldr	r2, [pc, #512]	; (8003890 <HAL_DMA_IRQHandler+0x69c>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d03b      	beq.n	800370a <HAL_DMA_IRQHandler+0x516>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a7f      	ldr	r2, [pc, #508]	; (8003894 <HAL_DMA_IRQHandler+0x6a0>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d036      	beq.n	800370a <HAL_DMA_IRQHandler+0x516>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a7d      	ldr	r2, [pc, #500]	; (8003898 <HAL_DMA_IRQHandler+0x6a4>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d031      	beq.n	800370a <HAL_DMA_IRQHandler+0x516>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a7c      	ldr	r2, [pc, #496]	; (800389c <HAL_DMA_IRQHandler+0x6a8>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d02c      	beq.n	800370a <HAL_DMA_IRQHandler+0x516>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a7a      	ldr	r2, [pc, #488]	; (80038a0 <HAL_DMA_IRQHandler+0x6ac>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d027      	beq.n	800370a <HAL_DMA_IRQHandler+0x516>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a79      	ldr	r2, [pc, #484]	; (80038a4 <HAL_DMA_IRQHandler+0x6b0>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d022      	beq.n	800370a <HAL_DMA_IRQHandler+0x516>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a77      	ldr	r2, [pc, #476]	; (80038a8 <HAL_DMA_IRQHandler+0x6b4>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d01d      	beq.n	800370a <HAL_DMA_IRQHandler+0x516>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a76      	ldr	r2, [pc, #472]	; (80038ac <HAL_DMA_IRQHandler+0x6b8>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d018      	beq.n	800370a <HAL_DMA_IRQHandler+0x516>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a74      	ldr	r2, [pc, #464]	; (80038b0 <HAL_DMA_IRQHandler+0x6bc>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d013      	beq.n	800370a <HAL_DMA_IRQHandler+0x516>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a73      	ldr	r2, [pc, #460]	; (80038b4 <HAL_DMA_IRQHandler+0x6c0>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d00e      	beq.n	800370a <HAL_DMA_IRQHandler+0x516>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a71      	ldr	r2, [pc, #452]	; (80038b8 <HAL_DMA_IRQHandler+0x6c4>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d009      	beq.n	800370a <HAL_DMA_IRQHandler+0x516>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a70      	ldr	r2, [pc, #448]	; (80038bc <HAL_DMA_IRQHandler+0x6c8>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d004      	beq.n	800370a <HAL_DMA_IRQHandler+0x516>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a6e      	ldr	r2, [pc, #440]	; (80038c0 <HAL_DMA_IRQHandler+0x6cc>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d10a      	bne.n	8003720 <HAL_DMA_IRQHandler+0x52c>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0308 	and.w	r3, r3, #8
 8003714:	2b00      	cmp	r3, #0
 8003716:	bf14      	ite	ne
 8003718:	2301      	movne	r3, #1
 800371a:	2300      	moveq	r3, #0
 800371c:	b2db      	uxtb	r3, r3
 800371e:	e009      	b.n	8003734 <HAL_DMA_IRQHandler+0x540>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0304 	and.w	r3, r3, #4
 800372a:	2b00      	cmp	r3, #0
 800372c:	bf14      	ite	ne
 800372e:	2301      	movne	r3, #1
 8003730:	2300      	moveq	r3, #0
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b00      	cmp	r3, #0
 8003736:	d03e      	beq.n	80037b6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800373c:	f003 031f 	and.w	r3, r3, #31
 8003740:	2210      	movs	r2, #16
 8003742:	409a      	lsls	r2, r3
 8003744:	6a3b      	ldr	r3, [r7, #32]
 8003746:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d018      	beq.n	8003788 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d108      	bne.n	8003776 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003768:	2b00      	cmp	r3, #0
 800376a:	d024      	beq.n	80037b6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	4798      	blx	r3
 8003774:	e01f      	b.n	80037b6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800377a:	2b00      	cmp	r3, #0
 800377c:	d01b      	beq.n	80037b6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	4798      	blx	r3
 8003786:	e016      	b.n	80037b6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003792:	2b00      	cmp	r3, #0
 8003794:	d107      	bne.n	80037a6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 0208 	bic.w	r2, r2, #8
 80037a4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ba:	f003 031f 	and.w	r3, r3, #31
 80037be:	2220      	movs	r2, #32
 80037c0:	409a      	lsls	r2, r3
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	4013      	ands	r3, r2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 8110 	beq.w	80039ec <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a2c      	ldr	r2, [pc, #176]	; (8003884 <HAL_DMA_IRQHandler+0x690>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d04a      	beq.n	800386c <HAL_DMA_IRQHandler+0x678>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a2b      	ldr	r2, [pc, #172]	; (8003888 <HAL_DMA_IRQHandler+0x694>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d045      	beq.n	800386c <HAL_DMA_IRQHandler+0x678>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a29      	ldr	r2, [pc, #164]	; (800388c <HAL_DMA_IRQHandler+0x698>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d040      	beq.n	800386c <HAL_DMA_IRQHandler+0x678>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a28      	ldr	r2, [pc, #160]	; (8003890 <HAL_DMA_IRQHandler+0x69c>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d03b      	beq.n	800386c <HAL_DMA_IRQHandler+0x678>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a26      	ldr	r2, [pc, #152]	; (8003894 <HAL_DMA_IRQHandler+0x6a0>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d036      	beq.n	800386c <HAL_DMA_IRQHandler+0x678>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a25      	ldr	r2, [pc, #148]	; (8003898 <HAL_DMA_IRQHandler+0x6a4>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d031      	beq.n	800386c <HAL_DMA_IRQHandler+0x678>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a23      	ldr	r2, [pc, #140]	; (800389c <HAL_DMA_IRQHandler+0x6a8>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d02c      	beq.n	800386c <HAL_DMA_IRQHandler+0x678>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a22      	ldr	r2, [pc, #136]	; (80038a0 <HAL_DMA_IRQHandler+0x6ac>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d027      	beq.n	800386c <HAL_DMA_IRQHandler+0x678>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a20      	ldr	r2, [pc, #128]	; (80038a4 <HAL_DMA_IRQHandler+0x6b0>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d022      	beq.n	800386c <HAL_DMA_IRQHandler+0x678>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a1f      	ldr	r2, [pc, #124]	; (80038a8 <HAL_DMA_IRQHandler+0x6b4>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d01d      	beq.n	800386c <HAL_DMA_IRQHandler+0x678>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a1d      	ldr	r2, [pc, #116]	; (80038ac <HAL_DMA_IRQHandler+0x6b8>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d018      	beq.n	800386c <HAL_DMA_IRQHandler+0x678>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a1c      	ldr	r2, [pc, #112]	; (80038b0 <HAL_DMA_IRQHandler+0x6bc>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d013      	beq.n	800386c <HAL_DMA_IRQHandler+0x678>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a1a      	ldr	r2, [pc, #104]	; (80038b4 <HAL_DMA_IRQHandler+0x6c0>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d00e      	beq.n	800386c <HAL_DMA_IRQHandler+0x678>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a19      	ldr	r2, [pc, #100]	; (80038b8 <HAL_DMA_IRQHandler+0x6c4>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d009      	beq.n	800386c <HAL_DMA_IRQHandler+0x678>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a17      	ldr	r2, [pc, #92]	; (80038bc <HAL_DMA_IRQHandler+0x6c8>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d004      	beq.n	800386c <HAL_DMA_IRQHandler+0x678>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a16      	ldr	r2, [pc, #88]	; (80038c0 <HAL_DMA_IRQHandler+0x6cc>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d12b      	bne.n	80038c4 <HAL_DMA_IRQHandler+0x6d0>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0310 	and.w	r3, r3, #16
 8003876:	2b00      	cmp	r3, #0
 8003878:	bf14      	ite	ne
 800387a:	2301      	movne	r3, #1
 800387c:	2300      	moveq	r3, #0
 800387e:	b2db      	uxtb	r3, r3
 8003880:	e02a      	b.n	80038d8 <HAL_DMA_IRQHandler+0x6e4>
 8003882:	bf00      	nop
 8003884:	40020010 	.word	0x40020010
 8003888:	40020028 	.word	0x40020028
 800388c:	40020040 	.word	0x40020040
 8003890:	40020058 	.word	0x40020058
 8003894:	40020070 	.word	0x40020070
 8003898:	40020088 	.word	0x40020088
 800389c:	400200a0 	.word	0x400200a0
 80038a0:	400200b8 	.word	0x400200b8
 80038a4:	40020410 	.word	0x40020410
 80038a8:	40020428 	.word	0x40020428
 80038ac:	40020440 	.word	0x40020440
 80038b0:	40020458 	.word	0x40020458
 80038b4:	40020470 	.word	0x40020470
 80038b8:	40020488 	.word	0x40020488
 80038bc:	400204a0 	.word	0x400204a0
 80038c0:	400204b8 	.word	0x400204b8
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	bf14      	ite	ne
 80038d2:	2301      	movne	r3, #1
 80038d4:	2300      	moveq	r3, #0
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 8087 	beq.w	80039ec <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038e2:	f003 031f 	and.w	r3, r3, #31
 80038e6:	2220      	movs	r2, #32
 80038e8:	409a      	lsls	r2, r3
 80038ea:	6a3b      	ldr	r3, [r7, #32]
 80038ec:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	d139      	bne.n	800396e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 0216 	bic.w	r2, r2, #22
 8003908:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	695a      	ldr	r2, [r3, #20]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003918:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	2b00      	cmp	r3, #0
 8003920:	d103      	bne.n	800392a <HAL_DMA_IRQHandler+0x736>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003926:	2b00      	cmp	r3, #0
 8003928:	d007      	beq.n	800393a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 0208 	bic.w	r2, r2, #8
 8003938:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800393e:	f003 031f 	and.w	r3, r3, #31
 8003942:	223f      	movs	r2, #63	; 0x3f
 8003944:	409a      	lsls	r2, r3
 8003946:	6a3b      	ldr	r3, [r7, #32]
 8003948:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 834a 	beq.w	8003ff8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	4798      	blx	r3
          }
          return;
 800396c:	e344      	b.n	8003ff8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d018      	beq.n	80039ae <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d108      	bne.n	800399c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398e:	2b00      	cmp	r3, #0
 8003990:	d02c      	beq.n	80039ec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	4798      	blx	r3
 800399a:	e027      	b.n	80039ec <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d023      	beq.n	80039ec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	4798      	blx	r3
 80039ac:	e01e      	b.n	80039ec <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d10f      	bne.n	80039dc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 0210 	bic.w	r2, r2, #16
 80039ca:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d003      	beq.n	80039ec <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 8306 	beq.w	8004002 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	f000 8088 	beq.w	8003b14 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2204      	movs	r2, #4
 8003a08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a7a      	ldr	r2, [pc, #488]	; (8003bfc <HAL_DMA_IRQHandler+0xa08>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d04a      	beq.n	8003aac <HAL_DMA_IRQHandler+0x8b8>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a79      	ldr	r2, [pc, #484]	; (8003c00 <HAL_DMA_IRQHandler+0xa0c>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d045      	beq.n	8003aac <HAL_DMA_IRQHandler+0x8b8>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a77      	ldr	r2, [pc, #476]	; (8003c04 <HAL_DMA_IRQHandler+0xa10>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d040      	beq.n	8003aac <HAL_DMA_IRQHandler+0x8b8>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a76      	ldr	r2, [pc, #472]	; (8003c08 <HAL_DMA_IRQHandler+0xa14>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d03b      	beq.n	8003aac <HAL_DMA_IRQHandler+0x8b8>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a74      	ldr	r2, [pc, #464]	; (8003c0c <HAL_DMA_IRQHandler+0xa18>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d036      	beq.n	8003aac <HAL_DMA_IRQHandler+0x8b8>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a73      	ldr	r2, [pc, #460]	; (8003c10 <HAL_DMA_IRQHandler+0xa1c>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d031      	beq.n	8003aac <HAL_DMA_IRQHandler+0x8b8>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a71      	ldr	r2, [pc, #452]	; (8003c14 <HAL_DMA_IRQHandler+0xa20>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d02c      	beq.n	8003aac <HAL_DMA_IRQHandler+0x8b8>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a70      	ldr	r2, [pc, #448]	; (8003c18 <HAL_DMA_IRQHandler+0xa24>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d027      	beq.n	8003aac <HAL_DMA_IRQHandler+0x8b8>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a6e      	ldr	r2, [pc, #440]	; (8003c1c <HAL_DMA_IRQHandler+0xa28>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d022      	beq.n	8003aac <HAL_DMA_IRQHandler+0x8b8>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a6d      	ldr	r2, [pc, #436]	; (8003c20 <HAL_DMA_IRQHandler+0xa2c>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d01d      	beq.n	8003aac <HAL_DMA_IRQHandler+0x8b8>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a6b      	ldr	r2, [pc, #428]	; (8003c24 <HAL_DMA_IRQHandler+0xa30>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d018      	beq.n	8003aac <HAL_DMA_IRQHandler+0x8b8>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a6a      	ldr	r2, [pc, #424]	; (8003c28 <HAL_DMA_IRQHandler+0xa34>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d013      	beq.n	8003aac <HAL_DMA_IRQHandler+0x8b8>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a68      	ldr	r2, [pc, #416]	; (8003c2c <HAL_DMA_IRQHandler+0xa38>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d00e      	beq.n	8003aac <HAL_DMA_IRQHandler+0x8b8>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a67      	ldr	r2, [pc, #412]	; (8003c30 <HAL_DMA_IRQHandler+0xa3c>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d009      	beq.n	8003aac <HAL_DMA_IRQHandler+0x8b8>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a65      	ldr	r2, [pc, #404]	; (8003c34 <HAL_DMA_IRQHandler+0xa40>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d004      	beq.n	8003aac <HAL_DMA_IRQHandler+0x8b8>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a64      	ldr	r2, [pc, #400]	; (8003c38 <HAL_DMA_IRQHandler+0xa44>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d108      	bne.n	8003abe <HAL_DMA_IRQHandler+0x8ca>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0201 	bic.w	r2, r2, #1
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	e007      	b.n	8003ace <HAL_DMA_IRQHandler+0x8da>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 0201 	bic.w	r2, r2, #1
 8003acc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	60fb      	str	r3, [r7, #12]
 8003ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d307      	bcc.n	8003aea <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1f2      	bne.n	8003ace <HAL_DMA_IRQHandler+0x8da>
 8003ae8:	e000      	b.n	8003aec <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003aea:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d004      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2203      	movs	r2, #3
 8003afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003b02:	e003      	b.n	8003b0c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 8272 	beq.w	8004002 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	4798      	blx	r3
 8003b26:	e26c      	b.n	8004002 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a43      	ldr	r2, [pc, #268]	; (8003c3c <HAL_DMA_IRQHandler+0xa48>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d022      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x984>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a42      	ldr	r2, [pc, #264]	; (8003c40 <HAL_DMA_IRQHandler+0xa4c>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d01d      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x984>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a40      	ldr	r2, [pc, #256]	; (8003c44 <HAL_DMA_IRQHandler+0xa50>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d018      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x984>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a3f      	ldr	r2, [pc, #252]	; (8003c48 <HAL_DMA_IRQHandler+0xa54>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d013      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x984>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a3d      	ldr	r2, [pc, #244]	; (8003c4c <HAL_DMA_IRQHandler+0xa58>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d00e      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x984>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a3c      	ldr	r2, [pc, #240]	; (8003c50 <HAL_DMA_IRQHandler+0xa5c>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d009      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x984>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a3a      	ldr	r2, [pc, #232]	; (8003c54 <HAL_DMA_IRQHandler+0xa60>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d004      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x984>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a39      	ldr	r2, [pc, #228]	; (8003c58 <HAL_DMA_IRQHandler+0xa64>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d101      	bne.n	8003b7c <HAL_DMA_IRQHandler+0x988>
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e000      	b.n	8003b7e <HAL_DMA_IRQHandler+0x98a>
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f000 823f 	beq.w	8004002 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b90:	f003 031f 	and.w	r3, r3, #31
 8003b94:	2204      	movs	r2, #4
 8003b96:	409a      	lsls	r2, r3
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 80cd 	beq.w	8003d3c <HAL_DMA_IRQHandler+0xb48>
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 80c7 	beq.w	8003d3c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb2:	f003 031f 	and.w	r3, r3, #31
 8003bb6:	2204      	movs	r2, #4
 8003bb8:	409a      	lsls	r2, r3
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d049      	beq.n	8003c5c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d109      	bne.n	8003be6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f000 8210 	beq.w	8003ffc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003be4:	e20a      	b.n	8003ffc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f000 8206 	beq.w	8003ffc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bf8:	e200      	b.n	8003ffc <HAL_DMA_IRQHandler+0xe08>
 8003bfa:	bf00      	nop
 8003bfc:	40020010 	.word	0x40020010
 8003c00:	40020028 	.word	0x40020028
 8003c04:	40020040 	.word	0x40020040
 8003c08:	40020058 	.word	0x40020058
 8003c0c:	40020070 	.word	0x40020070
 8003c10:	40020088 	.word	0x40020088
 8003c14:	400200a0 	.word	0x400200a0
 8003c18:	400200b8 	.word	0x400200b8
 8003c1c:	40020410 	.word	0x40020410
 8003c20:	40020428 	.word	0x40020428
 8003c24:	40020440 	.word	0x40020440
 8003c28:	40020458 	.word	0x40020458
 8003c2c:	40020470 	.word	0x40020470
 8003c30:	40020488 	.word	0x40020488
 8003c34:	400204a0 	.word	0x400204a0
 8003c38:	400204b8 	.word	0x400204b8
 8003c3c:	58025408 	.word	0x58025408
 8003c40:	5802541c 	.word	0x5802541c
 8003c44:	58025430 	.word	0x58025430
 8003c48:	58025444 	.word	0x58025444
 8003c4c:	58025458 	.word	0x58025458
 8003c50:	5802546c 	.word	0x5802546c
 8003c54:	58025480 	.word	0x58025480
 8003c58:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	f003 0320 	and.w	r3, r3, #32
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d160      	bne.n	8003d28 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a7f      	ldr	r2, [pc, #508]	; (8003e68 <HAL_DMA_IRQHandler+0xc74>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d04a      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xb12>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a7d      	ldr	r2, [pc, #500]	; (8003e6c <HAL_DMA_IRQHandler+0xc78>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d045      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xb12>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a7c      	ldr	r2, [pc, #496]	; (8003e70 <HAL_DMA_IRQHandler+0xc7c>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d040      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xb12>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a7a      	ldr	r2, [pc, #488]	; (8003e74 <HAL_DMA_IRQHandler+0xc80>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d03b      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xb12>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a79      	ldr	r2, [pc, #484]	; (8003e78 <HAL_DMA_IRQHandler+0xc84>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d036      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xb12>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a77      	ldr	r2, [pc, #476]	; (8003e7c <HAL_DMA_IRQHandler+0xc88>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d031      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xb12>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a76      	ldr	r2, [pc, #472]	; (8003e80 <HAL_DMA_IRQHandler+0xc8c>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d02c      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xb12>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a74      	ldr	r2, [pc, #464]	; (8003e84 <HAL_DMA_IRQHandler+0xc90>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d027      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xb12>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a73      	ldr	r2, [pc, #460]	; (8003e88 <HAL_DMA_IRQHandler+0xc94>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d022      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xb12>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a71      	ldr	r2, [pc, #452]	; (8003e8c <HAL_DMA_IRQHandler+0xc98>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d01d      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xb12>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a70      	ldr	r2, [pc, #448]	; (8003e90 <HAL_DMA_IRQHandler+0xc9c>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d018      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xb12>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a6e      	ldr	r2, [pc, #440]	; (8003e94 <HAL_DMA_IRQHandler+0xca0>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d013      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xb12>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a6d      	ldr	r2, [pc, #436]	; (8003e98 <HAL_DMA_IRQHandler+0xca4>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d00e      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xb12>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a6b      	ldr	r2, [pc, #428]	; (8003e9c <HAL_DMA_IRQHandler+0xca8>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d009      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xb12>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a6a      	ldr	r2, [pc, #424]	; (8003ea0 <HAL_DMA_IRQHandler+0xcac>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d004      	beq.n	8003d06 <HAL_DMA_IRQHandler+0xb12>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a68      	ldr	r2, [pc, #416]	; (8003ea4 <HAL_DMA_IRQHandler+0xcb0>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d108      	bne.n	8003d18 <HAL_DMA_IRQHandler+0xb24>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 0208 	bic.w	r2, r2, #8
 8003d14:	601a      	str	r2, [r3, #0]
 8003d16:	e007      	b.n	8003d28 <HAL_DMA_IRQHandler+0xb34>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 0204 	bic.w	r2, r2, #4
 8003d26:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 8165 	beq.w	8003ffc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d3a:	e15f      	b.n	8003ffc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d40:	f003 031f 	and.w	r3, r3, #31
 8003d44:	2202      	movs	r2, #2
 8003d46:	409a      	lsls	r2, r3
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 80c5 	beq.w	8003edc <HAL_DMA_IRQHandler+0xce8>
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 80bf 	beq.w	8003edc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d62:	f003 031f 	and.w	r3, r3, #31
 8003d66:	2202      	movs	r2, #2
 8003d68:	409a      	lsls	r2, r3
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d018      	beq.n	8003daa <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d109      	bne.n	8003d96 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f000 813a 	beq.w	8004000 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d94:	e134      	b.n	8004000 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f000 8130 	beq.w	8004000 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003da8:	e12a      	b.n	8004000 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	f003 0320 	and.w	r3, r3, #32
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f040 8089 	bne.w	8003ec8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a2b      	ldr	r2, [pc, #172]	; (8003e68 <HAL_DMA_IRQHandler+0xc74>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d04a      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xc62>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a29      	ldr	r2, [pc, #164]	; (8003e6c <HAL_DMA_IRQHandler+0xc78>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d045      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xc62>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a28      	ldr	r2, [pc, #160]	; (8003e70 <HAL_DMA_IRQHandler+0xc7c>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d040      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xc62>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a26      	ldr	r2, [pc, #152]	; (8003e74 <HAL_DMA_IRQHandler+0xc80>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d03b      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xc62>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a25      	ldr	r2, [pc, #148]	; (8003e78 <HAL_DMA_IRQHandler+0xc84>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d036      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xc62>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a23      	ldr	r2, [pc, #140]	; (8003e7c <HAL_DMA_IRQHandler+0xc88>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d031      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xc62>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a22      	ldr	r2, [pc, #136]	; (8003e80 <HAL_DMA_IRQHandler+0xc8c>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d02c      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xc62>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a20      	ldr	r2, [pc, #128]	; (8003e84 <HAL_DMA_IRQHandler+0xc90>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d027      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xc62>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a1f      	ldr	r2, [pc, #124]	; (8003e88 <HAL_DMA_IRQHandler+0xc94>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d022      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xc62>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a1d      	ldr	r2, [pc, #116]	; (8003e8c <HAL_DMA_IRQHandler+0xc98>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d01d      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xc62>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a1c      	ldr	r2, [pc, #112]	; (8003e90 <HAL_DMA_IRQHandler+0xc9c>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d018      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xc62>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a1a      	ldr	r2, [pc, #104]	; (8003e94 <HAL_DMA_IRQHandler+0xca0>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d013      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xc62>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a19      	ldr	r2, [pc, #100]	; (8003e98 <HAL_DMA_IRQHandler+0xca4>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d00e      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xc62>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a17      	ldr	r2, [pc, #92]	; (8003e9c <HAL_DMA_IRQHandler+0xca8>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d009      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xc62>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a16      	ldr	r2, [pc, #88]	; (8003ea0 <HAL_DMA_IRQHandler+0xcac>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d004      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xc62>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a14      	ldr	r2, [pc, #80]	; (8003ea4 <HAL_DMA_IRQHandler+0xcb0>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d128      	bne.n	8003ea8 <HAL_DMA_IRQHandler+0xcb4>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f022 0214 	bic.w	r2, r2, #20
 8003e64:	601a      	str	r2, [r3, #0]
 8003e66:	e027      	b.n	8003eb8 <HAL_DMA_IRQHandler+0xcc4>
 8003e68:	40020010 	.word	0x40020010
 8003e6c:	40020028 	.word	0x40020028
 8003e70:	40020040 	.word	0x40020040
 8003e74:	40020058 	.word	0x40020058
 8003e78:	40020070 	.word	0x40020070
 8003e7c:	40020088 	.word	0x40020088
 8003e80:	400200a0 	.word	0x400200a0
 8003e84:	400200b8 	.word	0x400200b8
 8003e88:	40020410 	.word	0x40020410
 8003e8c:	40020428 	.word	0x40020428
 8003e90:	40020440 	.word	0x40020440
 8003e94:	40020458 	.word	0x40020458
 8003e98:	40020470 	.word	0x40020470
 8003e9c:	40020488 	.word	0x40020488
 8003ea0:	400204a0 	.word	0x400204a0
 8003ea4:	400204b8 	.word	0x400204b8
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f022 020a 	bic.w	r2, r2, #10
 8003eb6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 8097 	beq.w	8004000 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003eda:	e091      	b.n	8004000 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee0:	f003 031f 	and.w	r3, r3, #31
 8003ee4:	2208      	movs	r2, #8
 8003ee6:	409a      	lsls	r2, r3
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	4013      	ands	r3, r2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f000 8088 	beq.w	8004002 <HAL_DMA_IRQHandler+0xe0e>
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	f003 0308 	and.w	r3, r3, #8
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f000 8082 	beq.w	8004002 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a41      	ldr	r2, [pc, #260]	; (8004008 <HAL_DMA_IRQHandler+0xe14>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d04a      	beq.n	8003f9e <HAL_DMA_IRQHandler+0xdaa>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a3f      	ldr	r2, [pc, #252]	; (800400c <HAL_DMA_IRQHandler+0xe18>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d045      	beq.n	8003f9e <HAL_DMA_IRQHandler+0xdaa>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a3e      	ldr	r2, [pc, #248]	; (8004010 <HAL_DMA_IRQHandler+0xe1c>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d040      	beq.n	8003f9e <HAL_DMA_IRQHandler+0xdaa>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a3c      	ldr	r2, [pc, #240]	; (8004014 <HAL_DMA_IRQHandler+0xe20>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d03b      	beq.n	8003f9e <HAL_DMA_IRQHandler+0xdaa>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a3b      	ldr	r2, [pc, #236]	; (8004018 <HAL_DMA_IRQHandler+0xe24>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d036      	beq.n	8003f9e <HAL_DMA_IRQHandler+0xdaa>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a39      	ldr	r2, [pc, #228]	; (800401c <HAL_DMA_IRQHandler+0xe28>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d031      	beq.n	8003f9e <HAL_DMA_IRQHandler+0xdaa>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a38      	ldr	r2, [pc, #224]	; (8004020 <HAL_DMA_IRQHandler+0xe2c>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d02c      	beq.n	8003f9e <HAL_DMA_IRQHandler+0xdaa>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a36      	ldr	r2, [pc, #216]	; (8004024 <HAL_DMA_IRQHandler+0xe30>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d027      	beq.n	8003f9e <HAL_DMA_IRQHandler+0xdaa>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a35      	ldr	r2, [pc, #212]	; (8004028 <HAL_DMA_IRQHandler+0xe34>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d022      	beq.n	8003f9e <HAL_DMA_IRQHandler+0xdaa>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a33      	ldr	r2, [pc, #204]	; (800402c <HAL_DMA_IRQHandler+0xe38>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d01d      	beq.n	8003f9e <HAL_DMA_IRQHandler+0xdaa>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a32      	ldr	r2, [pc, #200]	; (8004030 <HAL_DMA_IRQHandler+0xe3c>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d018      	beq.n	8003f9e <HAL_DMA_IRQHandler+0xdaa>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a30      	ldr	r2, [pc, #192]	; (8004034 <HAL_DMA_IRQHandler+0xe40>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d013      	beq.n	8003f9e <HAL_DMA_IRQHandler+0xdaa>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a2f      	ldr	r2, [pc, #188]	; (8004038 <HAL_DMA_IRQHandler+0xe44>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d00e      	beq.n	8003f9e <HAL_DMA_IRQHandler+0xdaa>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a2d      	ldr	r2, [pc, #180]	; (800403c <HAL_DMA_IRQHandler+0xe48>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d009      	beq.n	8003f9e <HAL_DMA_IRQHandler+0xdaa>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a2c      	ldr	r2, [pc, #176]	; (8004040 <HAL_DMA_IRQHandler+0xe4c>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d004      	beq.n	8003f9e <HAL_DMA_IRQHandler+0xdaa>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a2a      	ldr	r2, [pc, #168]	; (8004044 <HAL_DMA_IRQHandler+0xe50>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d108      	bne.n	8003fb0 <HAL_DMA_IRQHandler+0xdbc>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 021c 	bic.w	r2, r2, #28
 8003fac:	601a      	str	r2, [r3, #0]
 8003fae:	e007      	b.n	8003fc0 <HAL_DMA_IRQHandler+0xdcc>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 020e 	bic.w	r2, r2, #14
 8003fbe:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc4:	f003 031f 	and.w	r3, r3, #31
 8003fc8:	2201      	movs	r2, #1
 8003fca:	409a      	lsls	r2, r3
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d009      	beq.n	8004002 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	4798      	blx	r3
 8003ff6:	e004      	b.n	8004002 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003ff8:	bf00      	nop
 8003ffa:	e002      	b.n	8004002 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ffc:	bf00      	nop
 8003ffe:	e000      	b.n	8004002 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004000:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004002:	3728      	adds	r7, #40	; 0x28
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	40020010 	.word	0x40020010
 800400c:	40020028 	.word	0x40020028
 8004010:	40020040 	.word	0x40020040
 8004014:	40020058 	.word	0x40020058
 8004018:	40020070 	.word	0x40020070
 800401c:	40020088 	.word	0x40020088
 8004020:	400200a0 	.word	0x400200a0
 8004024:	400200b8 	.word	0x400200b8
 8004028:	40020410 	.word	0x40020410
 800402c:	40020428 	.word	0x40020428
 8004030:	40020440 	.word	0x40020440
 8004034:	40020458 	.word	0x40020458
 8004038:	40020470 	.word	0x40020470
 800403c:	40020488 	.word	0x40020488
 8004040:	400204a0 	.word	0x400204a0
 8004044:	400204b8 	.word	0x400204b8

08004048 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004048:	b480      	push	{r7}
 800404a:	b087      	sub	sp, #28
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
 8004054:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800405a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004060:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a7f      	ldr	r2, [pc, #508]	; (8004264 <DMA_SetConfig+0x21c>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d072      	beq.n	8004152 <DMA_SetConfig+0x10a>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a7d      	ldr	r2, [pc, #500]	; (8004268 <DMA_SetConfig+0x220>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d06d      	beq.n	8004152 <DMA_SetConfig+0x10a>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a7c      	ldr	r2, [pc, #496]	; (800426c <DMA_SetConfig+0x224>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d068      	beq.n	8004152 <DMA_SetConfig+0x10a>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a7a      	ldr	r2, [pc, #488]	; (8004270 <DMA_SetConfig+0x228>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d063      	beq.n	8004152 <DMA_SetConfig+0x10a>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a79      	ldr	r2, [pc, #484]	; (8004274 <DMA_SetConfig+0x22c>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d05e      	beq.n	8004152 <DMA_SetConfig+0x10a>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a77      	ldr	r2, [pc, #476]	; (8004278 <DMA_SetConfig+0x230>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d059      	beq.n	8004152 <DMA_SetConfig+0x10a>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a76      	ldr	r2, [pc, #472]	; (800427c <DMA_SetConfig+0x234>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d054      	beq.n	8004152 <DMA_SetConfig+0x10a>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a74      	ldr	r2, [pc, #464]	; (8004280 <DMA_SetConfig+0x238>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d04f      	beq.n	8004152 <DMA_SetConfig+0x10a>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a73      	ldr	r2, [pc, #460]	; (8004284 <DMA_SetConfig+0x23c>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d04a      	beq.n	8004152 <DMA_SetConfig+0x10a>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a71      	ldr	r2, [pc, #452]	; (8004288 <DMA_SetConfig+0x240>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d045      	beq.n	8004152 <DMA_SetConfig+0x10a>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a70      	ldr	r2, [pc, #448]	; (800428c <DMA_SetConfig+0x244>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d040      	beq.n	8004152 <DMA_SetConfig+0x10a>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a6e      	ldr	r2, [pc, #440]	; (8004290 <DMA_SetConfig+0x248>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d03b      	beq.n	8004152 <DMA_SetConfig+0x10a>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a6d      	ldr	r2, [pc, #436]	; (8004294 <DMA_SetConfig+0x24c>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d036      	beq.n	8004152 <DMA_SetConfig+0x10a>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a6b      	ldr	r2, [pc, #428]	; (8004298 <DMA_SetConfig+0x250>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d031      	beq.n	8004152 <DMA_SetConfig+0x10a>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a6a      	ldr	r2, [pc, #424]	; (800429c <DMA_SetConfig+0x254>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d02c      	beq.n	8004152 <DMA_SetConfig+0x10a>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a68      	ldr	r2, [pc, #416]	; (80042a0 <DMA_SetConfig+0x258>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d027      	beq.n	8004152 <DMA_SetConfig+0x10a>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a67      	ldr	r2, [pc, #412]	; (80042a4 <DMA_SetConfig+0x25c>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d022      	beq.n	8004152 <DMA_SetConfig+0x10a>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a65      	ldr	r2, [pc, #404]	; (80042a8 <DMA_SetConfig+0x260>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d01d      	beq.n	8004152 <DMA_SetConfig+0x10a>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a64      	ldr	r2, [pc, #400]	; (80042ac <DMA_SetConfig+0x264>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d018      	beq.n	8004152 <DMA_SetConfig+0x10a>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a62      	ldr	r2, [pc, #392]	; (80042b0 <DMA_SetConfig+0x268>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d013      	beq.n	8004152 <DMA_SetConfig+0x10a>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a61      	ldr	r2, [pc, #388]	; (80042b4 <DMA_SetConfig+0x26c>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d00e      	beq.n	8004152 <DMA_SetConfig+0x10a>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a5f      	ldr	r2, [pc, #380]	; (80042b8 <DMA_SetConfig+0x270>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d009      	beq.n	8004152 <DMA_SetConfig+0x10a>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a5e      	ldr	r2, [pc, #376]	; (80042bc <DMA_SetConfig+0x274>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d004      	beq.n	8004152 <DMA_SetConfig+0x10a>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a5c      	ldr	r2, [pc, #368]	; (80042c0 <DMA_SetConfig+0x278>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d101      	bne.n	8004156 <DMA_SetConfig+0x10e>
 8004152:	2301      	movs	r3, #1
 8004154:	e000      	b.n	8004158 <DMA_SetConfig+0x110>
 8004156:	2300      	movs	r3, #0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00d      	beq.n	8004178 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004164:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800416a:	2b00      	cmp	r3, #0
 800416c:	d004      	beq.n	8004178 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004176:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a39      	ldr	r2, [pc, #228]	; (8004264 <DMA_SetConfig+0x21c>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d04a      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a38      	ldr	r2, [pc, #224]	; (8004268 <DMA_SetConfig+0x220>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d045      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a36      	ldr	r2, [pc, #216]	; (800426c <DMA_SetConfig+0x224>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d040      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a35      	ldr	r2, [pc, #212]	; (8004270 <DMA_SetConfig+0x228>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d03b      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a33      	ldr	r2, [pc, #204]	; (8004274 <DMA_SetConfig+0x22c>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d036      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a32      	ldr	r2, [pc, #200]	; (8004278 <DMA_SetConfig+0x230>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d031      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a30      	ldr	r2, [pc, #192]	; (800427c <DMA_SetConfig+0x234>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d02c      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a2f      	ldr	r2, [pc, #188]	; (8004280 <DMA_SetConfig+0x238>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d027      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a2d      	ldr	r2, [pc, #180]	; (8004284 <DMA_SetConfig+0x23c>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d022      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a2c      	ldr	r2, [pc, #176]	; (8004288 <DMA_SetConfig+0x240>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d01d      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a2a      	ldr	r2, [pc, #168]	; (800428c <DMA_SetConfig+0x244>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d018      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a29      	ldr	r2, [pc, #164]	; (8004290 <DMA_SetConfig+0x248>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d013      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a27      	ldr	r2, [pc, #156]	; (8004294 <DMA_SetConfig+0x24c>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d00e      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a26      	ldr	r2, [pc, #152]	; (8004298 <DMA_SetConfig+0x250>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d009      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a24      	ldr	r2, [pc, #144]	; (800429c <DMA_SetConfig+0x254>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d004      	beq.n	8004218 <DMA_SetConfig+0x1d0>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a23      	ldr	r2, [pc, #140]	; (80042a0 <DMA_SetConfig+0x258>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d101      	bne.n	800421c <DMA_SetConfig+0x1d4>
 8004218:	2301      	movs	r3, #1
 800421a:	e000      	b.n	800421e <DMA_SetConfig+0x1d6>
 800421c:	2300      	movs	r3, #0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d059      	beq.n	80042d6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004226:	f003 031f 	and.w	r3, r3, #31
 800422a:	223f      	movs	r2, #63	; 0x3f
 800422c:	409a      	lsls	r2, r3
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004240:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	2b40      	cmp	r3, #64	; 0x40
 8004250:	d138      	bne.n	80042c4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004262:	e086      	b.n	8004372 <DMA_SetConfig+0x32a>
 8004264:	40020010 	.word	0x40020010
 8004268:	40020028 	.word	0x40020028
 800426c:	40020040 	.word	0x40020040
 8004270:	40020058 	.word	0x40020058
 8004274:	40020070 	.word	0x40020070
 8004278:	40020088 	.word	0x40020088
 800427c:	400200a0 	.word	0x400200a0
 8004280:	400200b8 	.word	0x400200b8
 8004284:	40020410 	.word	0x40020410
 8004288:	40020428 	.word	0x40020428
 800428c:	40020440 	.word	0x40020440
 8004290:	40020458 	.word	0x40020458
 8004294:	40020470 	.word	0x40020470
 8004298:	40020488 	.word	0x40020488
 800429c:	400204a0 	.word	0x400204a0
 80042a0:	400204b8 	.word	0x400204b8
 80042a4:	58025408 	.word	0x58025408
 80042a8:	5802541c 	.word	0x5802541c
 80042ac:	58025430 	.word	0x58025430
 80042b0:	58025444 	.word	0x58025444
 80042b4:	58025458 	.word	0x58025458
 80042b8:	5802546c 	.word	0x5802546c
 80042bc:	58025480 	.word	0x58025480
 80042c0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	60da      	str	r2, [r3, #12]
}
 80042d4:	e04d      	b.n	8004372 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a29      	ldr	r2, [pc, #164]	; (8004380 <DMA_SetConfig+0x338>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d022      	beq.n	8004326 <DMA_SetConfig+0x2de>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a27      	ldr	r2, [pc, #156]	; (8004384 <DMA_SetConfig+0x33c>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d01d      	beq.n	8004326 <DMA_SetConfig+0x2de>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a26      	ldr	r2, [pc, #152]	; (8004388 <DMA_SetConfig+0x340>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d018      	beq.n	8004326 <DMA_SetConfig+0x2de>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a24      	ldr	r2, [pc, #144]	; (800438c <DMA_SetConfig+0x344>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d013      	beq.n	8004326 <DMA_SetConfig+0x2de>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a23      	ldr	r2, [pc, #140]	; (8004390 <DMA_SetConfig+0x348>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d00e      	beq.n	8004326 <DMA_SetConfig+0x2de>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a21      	ldr	r2, [pc, #132]	; (8004394 <DMA_SetConfig+0x34c>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d009      	beq.n	8004326 <DMA_SetConfig+0x2de>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a20      	ldr	r2, [pc, #128]	; (8004398 <DMA_SetConfig+0x350>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d004      	beq.n	8004326 <DMA_SetConfig+0x2de>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a1e      	ldr	r2, [pc, #120]	; (800439c <DMA_SetConfig+0x354>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d101      	bne.n	800432a <DMA_SetConfig+0x2e2>
 8004326:	2301      	movs	r3, #1
 8004328:	e000      	b.n	800432c <DMA_SetConfig+0x2e4>
 800432a:	2300      	movs	r3, #0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d020      	beq.n	8004372 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004334:	f003 031f 	and.w	r3, r3, #31
 8004338:	2201      	movs	r2, #1
 800433a:	409a      	lsls	r2, r3
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	2b40      	cmp	r3, #64	; 0x40
 800434e:	d108      	bne.n	8004362 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	60da      	str	r2, [r3, #12]
}
 8004360:	e007      	b.n	8004372 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68ba      	ldr	r2, [r7, #8]
 8004368:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	60da      	str	r2, [r3, #12]
}
 8004372:	bf00      	nop
 8004374:	371c      	adds	r7, #28
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	58025408 	.word	0x58025408
 8004384:	5802541c 	.word	0x5802541c
 8004388:	58025430 	.word	0x58025430
 800438c:	58025444 	.word	0x58025444
 8004390:	58025458 	.word	0x58025458
 8004394:	5802546c 	.word	0x5802546c
 8004398:	58025480 	.word	0x58025480
 800439c:	58025494 	.word	0x58025494

080043a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a42      	ldr	r2, [pc, #264]	; (80044b8 <DMA_CalcBaseAndBitshift+0x118>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d04a      	beq.n	8004448 <DMA_CalcBaseAndBitshift+0xa8>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a41      	ldr	r2, [pc, #260]	; (80044bc <DMA_CalcBaseAndBitshift+0x11c>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d045      	beq.n	8004448 <DMA_CalcBaseAndBitshift+0xa8>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a3f      	ldr	r2, [pc, #252]	; (80044c0 <DMA_CalcBaseAndBitshift+0x120>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d040      	beq.n	8004448 <DMA_CalcBaseAndBitshift+0xa8>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a3e      	ldr	r2, [pc, #248]	; (80044c4 <DMA_CalcBaseAndBitshift+0x124>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d03b      	beq.n	8004448 <DMA_CalcBaseAndBitshift+0xa8>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a3c      	ldr	r2, [pc, #240]	; (80044c8 <DMA_CalcBaseAndBitshift+0x128>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d036      	beq.n	8004448 <DMA_CalcBaseAndBitshift+0xa8>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a3b      	ldr	r2, [pc, #236]	; (80044cc <DMA_CalcBaseAndBitshift+0x12c>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d031      	beq.n	8004448 <DMA_CalcBaseAndBitshift+0xa8>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a39      	ldr	r2, [pc, #228]	; (80044d0 <DMA_CalcBaseAndBitshift+0x130>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d02c      	beq.n	8004448 <DMA_CalcBaseAndBitshift+0xa8>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a38      	ldr	r2, [pc, #224]	; (80044d4 <DMA_CalcBaseAndBitshift+0x134>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d027      	beq.n	8004448 <DMA_CalcBaseAndBitshift+0xa8>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a36      	ldr	r2, [pc, #216]	; (80044d8 <DMA_CalcBaseAndBitshift+0x138>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d022      	beq.n	8004448 <DMA_CalcBaseAndBitshift+0xa8>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a35      	ldr	r2, [pc, #212]	; (80044dc <DMA_CalcBaseAndBitshift+0x13c>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d01d      	beq.n	8004448 <DMA_CalcBaseAndBitshift+0xa8>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a33      	ldr	r2, [pc, #204]	; (80044e0 <DMA_CalcBaseAndBitshift+0x140>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d018      	beq.n	8004448 <DMA_CalcBaseAndBitshift+0xa8>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a32      	ldr	r2, [pc, #200]	; (80044e4 <DMA_CalcBaseAndBitshift+0x144>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d013      	beq.n	8004448 <DMA_CalcBaseAndBitshift+0xa8>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a30      	ldr	r2, [pc, #192]	; (80044e8 <DMA_CalcBaseAndBitshift+0x148>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d00e      	beq.n	8004448 <DMA_CalcBaseAndBitshift+0xa8>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a2f      	ldr	r2, [pc, #188]	; (80044ec <DMA_CalcBaseAndBitshift+0x14c>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d009      	beq.n	8004448 <DMA_CalcBaseAndBitshift+0xa8>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a2d      	ldr	r2, [pc, #180]	; (80044f0 <DMA_CalcBaseAndBitshift+0x150>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d004      	beq.n	8004448 <DMA_CalcBaseAndBitshift+0xa8>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a2c      	ldr	r2, [pc, #176]	; (80044f4 <DMA_CalcBaseAndBitshift+0x154>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d101      	bne.n	800444c <DMA_CalcBaseAndBitshift+0xac>
 8004448:	2301      	movs	r3, #1
 800444a:	e000      	b.n	800444e <DMA_CalcBaseAndBitshift+0xae>
 800444c:	2300      	movs	r3, #0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d024      	beq.n	800449c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	b2db      	uxtb	r3, r3
 8004458:	3b10      	subs	r3, #16
 800445a:	4a27      	ldr	r2, [pc, #156]	; (80044f8 <DMA_CalcBaseAndBitshift+0x158>)
 800445c:	fba2 2303 	umull	r2, r3, r2, r3
 8004460:	091b      	lsrs	r3, r3, #4
 8004462:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f003 0307 	and.w	r3, r3, #7
 800446a:	4a24      	ldr	r2, [pc, #144]	; (80044fc <DMA_CalcBaseAndBitshift+0x15c>)
 800446c:	5cd3      	ldrb	r3, [r2, r3]
 800446e:	461a      	mov	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2b03      	cmp	r3, #3
 8004478:	d908      	bls.n	800448c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	461a      	mov	r2, r3
 8004480:	4b1f      	ldr	r3, [pc, #124]	; (8004500 <DMA_CalcBaseAndBitshift+0x160>)
 8004482:	4013      	ands	r3, r2
 8004484:	1d1a      	adds	r2, r3, #4
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	659a      	str	r2, [r3, #88]	; 0x58
 800448a:	e00d      	b.n	80044a8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	461a      	mov	r2, r3
 8004492:	4b1b      	ldr	r3, [pc, #108]	; (8004500 <DMA_CalcBaseAndBitshift+0x160>)
 8004494:	4013      	ands	r3, r2
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	6593      	str	r3, [r2, #88]	; 0x58
 800449a:	e005      	b.n	80044a8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3714      	adds	r7, #20
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr
 80044b8:	40020010 	.word	0x40020010
 80044bc:	40020028 	.word	0x40020028
 80044c0:	40020040 	.word	0x40020040
 80044c4:	40020058 	.word	0x40020058
 80044c8:	40020070 	.word	0x40020070
 80044cc:	40020088 	.word	0x40020088
 80044d0:	400200a0 	.word	0x400200a0
 80044d4:	400200b8 	.word	0x400200b8
 80044d8:	40020410 	.word	0x40020410
 80044dc:	40020428 	.word	0x40020428
 80044e0:	40020440 	.word	0x40020440
 80044e4:	40020458 	.word	0x40020458
 80044e8:	40020470 	.word	0x40020470
 80044ec:	40020488 	.word	0x40020488
 80044f0:	400204a0 	.word	0x400204a0
 80044f4:	400204b8 	.word	0x400204b8
 80044f8:	aaaaaaab 	.word	0xaaaaaaab
 80044fc:	0800b4fc 	.word	0x0800b4fc
 8004500:	fffffc00 	.word	0xfffffc00

08004504 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800450c:	2300      	movs	r3, #0
 800450e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d120      	bne.n	800455a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451c:	2b03      	cmp	r3, #3
 800451e:	d858      	bhi.n	80045d2 <DMA_CheckFifoParam+0xce>
 8004520:	a201      	add	r2, pc, #4	; (adr r2, 8004528 <DMA_CheckFifoParam+0x24>)
 8004522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004526:	bf00      	nop
 8004528:	08004539 	.word	0x08004539
 800452c:	0800454b 	.word	0x0800454b
 8004530:	08004539 	.word	0x08004539
 8004534:	080045d3 	.word	0x080045d3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d048      	beq.n	80045d6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004548:	e045      	b.n	80045d6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004552:	d142      	bne.n	80045da <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004558:	e03f      	b.n	80045da <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004562:	d123      	bne.n	80045ac <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004568:	2b03      	cmp	r3, #3
 800456a:	d838      	bhi.n	80045de <DMA_CheckFifoParam+0xda>
 800456c:	a201      	add	r2, pc, #4	; (adr r2, 8004574 <DMA_CheckFifoParam+0x70>)
 800456e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004572:	bf00      	nop
 8004574:	08004585 	.word	0x08004585
 8004578:	0800458b 	.word	0x0800458b
 800457c:	08004585 	.word	0x08004585
 8004580:	0800459d 	.word	0x0800459d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	73fb      	strb	r3, [r7, #15]
        break;
 8004588:	e030      	b.n	80045ec <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d025      	beq.n	80045e2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800459a:	e022      	b.n	80045e2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045a4:	d11f      	bne.n	80045e6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80045aa:	e01c      	b.n	80045e6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d902      	bls.n	80045ba <DMA_CheckFifoParam+0xb6>
 80045b4:	2b03      	cmp	r3, #3
 80045b6:	d003      	beq.n	80045c0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80045b8:	e018      	b.n	80045ec <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	73fb      	strb	r3, [r7, #15]
        break;
 80045be:	e015      	b.n	80045ec <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00e      	beq.n	80045ea <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	73fb      	strb	r3, [r7, #15]
    break;
 80045d0:	e00b      	b.n	80045ea <DMA_CheckFifoParam+0xe6>
        break;
 80045d2:	bf00      	nop
 80045d4:	e00a      	b.n	80045ec <DMA_CheckFifoParam+0xe8>
        break;
 80045d6:	bf00      	nop
 80045d8:	e008      	b.n	80045ec <DMA_CheckFifoParam+0xe8>
        break;
 80045da:	bf00      	nop
 80045dc:	e006      	b.n	80045ec <DMA_CheckFifoParam+0xe8>
        break;
 80045de:	bf00      	nop
 80045e0:	e004      	b.n	80045ec <DMA_CheckFifoParam+0xe8>
        break;
 80045e2:	bf00      	nop
 80045e4:	e002      	b.n	80045ec <DMA_CheckFifoParam+0xe8>
        break;
 80045e6:	bf00      	nop
 80045e8:	e000      	b.n	80045ec <DMA_CheckFifoParam+0xe8>
    break;
 80045ea:	bf00      	nop
    }
  }

  return status;
 80045ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3714      	adds	r7, #20
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop

080045fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a38      	ldr	r2, [pc, #224]	; (80046f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d022      	beq.n	800465a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a36      	ldr	r2, [pc, #216]	; (80046f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d01d      	beq.n	800465a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a35      	ldr	r2, [pc, #212]	; (80046f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d018      	beq.n	800465a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a33      	ldr	r2, [pc, #204]	; (80046fc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d013      	beq.n	800465a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a32      	ldr	r2, [pc, #200]	; (8004700 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d00e      	beq.n	800465a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a30      	ldr	r2, [pc, #192]	; (8004704 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d009      	beq.n	800465a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a2f      	ldr	r2, [pc, #188]	; (8004708 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d004      	beq.n	800465a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a2d      	ldr	r2, [pc, #180]	; (800470c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d101      	bne.n	800465e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800465a:	2301      	movs	r3, #1
 800465c:	e000      	b.n	8004660 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800465e:	2300      	movs	r3, #0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d01a      	beq.n	800469a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	b2db      	uxtb	r3, r3
 800466a:	3b08      	subs	r3, #8
 800466c:	4a28      	ldr	r2, [pc, #160]	; (8004710 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800466e:	fba2 2303 	umull	r2, r3, r2, r3
 8004672:	091b      	lsrs	r3, r3, #4
 8004674:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	4b26      	ldr	r3, [pc, #152]	; (8004714 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800467a:	4413      	add	r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	461a      	mov	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a24      	ldr	r2, [pc, #144]	; (8004718 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004688:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f003 031f 	and.w	r3, r3, #31
 8004690:	2201      	movs	r2, #1
 8004692:	409a      	lsls	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004698:	e024      	b.n	80046e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	3b10      	subs	r3, #16
 80046a2:	4a1e      	ldr	r2, [pc, #120]	; (800471c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80046a4:	fba2 2303 	umull	r2, r3, r2, r3
 80046a8:	091b      	lsrs	r3, r3, #4
 80046aa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	4a1c      	ldr	r2, [pc, #112]	; (8004720 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d806      	bhi.n	80046c2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	4a1b      	ldr	r2, [pc, #108]	; (8004724 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d902      	bls.n	80046c2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	3308      	adds	r3, #8
 80046c0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	4b18      	ldr	r3, [pc, #96]	; (8004728 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80046c6:	4413      	add	r3, r2
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	461a      	mov	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a16      	ldr	r2, [pc, #88]	; (800472c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80046d4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f003 031f 	and.w	r3, r3, #31
 80046dc:	2201      	movs	r2, #1
 80046de:	409a      	lsls	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80046e4:	bf00      	nop
 80046e6:	3714      	adds	r7, #20
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr
 80046f0:	58025408 	.word	0x58025408
 80046f4:	5802541c 	.word	0x5802541c
 80046f8:	58025430 	.word	0x58025430
 80046fc:	58025444 	.word	0x58025444
 8004700:	58025458 	.word	0x58025458
 8004704:	5802546c 	.word	0x5802546c
 8004708:	58025480 	.word	0x58025480
 800470c:	58025494 	.word	0x58025494
 8004710:	cccccccd 	.word	0xcccccccd
 8004714:	16009600 	.word	0x16009600
 8004718:	58025880 	.word	0x58025880
 800471c:	aaaaaaab 	.word	0xaaaaaaab
 8004720:	400204b8 	.word	0x400204b8
 8004724:	4002040f 	.word	0x4002040f
 8004728:	10008200 	.word	0x10008200
 800472c:	40020880 	.word	0x40020880

08004730 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	b2db      	uxtb	r3, r3
 800473e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d04a      	beq.n	80047dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2b08      	cmp	r3, #8
 800474a:	d847      	bhi.n	80047dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a25      	ldr	r2, [pc, #148]	; (80047e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d022      	beq.n	800479c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a24      	ldr	r2, [pc, #144]	; (80047ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d01d      	beq.n	800479c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a22      	ldr	r2, [pc, #136]	; (80047f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d018      	beq.n	800479c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a21      	ldr	r2, [pc, #132]	; (80047f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d013      	beq.n	800479c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a1f      	ldr	r2, [pc, #124]	; (80047f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d00e      	beq.n	800479c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a1e      	ldr	r2, [pc, #120]	; (80047fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d009      	beq.n	800479c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a1c      	ldr	r2, [pc, #112]	; (8004800 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d004      	beq.n	800479c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a1b      	ldr	r2, [pc, #108]	; (8004804 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d101      	bne.n	80047a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800479c:	2301      	movs	r3, #1
 800479e:	e000      	b.n	80047a2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80047a0:	2300      	movs	r3, #0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00a      	beq.n	80047bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	4b17      	ldr	r3, [pc, #92]	; (8004808 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80047aa:	4413      	add	r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	461a      	mov	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a15      	ldr	r2, [pc, #84]	; (800480c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80047b8:	671a      	str	r2, [r3, #112]	; 0x70
 80047ba:	e009      	b.n	80047d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	4b14      	ldr	r3, [pc, #80]	; (8004810 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80047c0:	4413      	add	r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	461a      	mov	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a11      	ldr	r2, [pc, #68]	; (8004814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80047ce:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	3b01      	subs	r3, #1
 80047d4:	2201      	movs	r2, #1
 80047d6:	409a      	lsls	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80047dc:	bf00      	nop
 80047de:	3714      	adds	r7, #20
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr
 80047e8:	58025408 	.word	0x58025408
 80047ec:	5802541c 	.word	0x5802541c
 80047f0:	58025430 	.word	0x58025430
 80047f4:	58025444 	.word	0x58025444
 80047f8:	58025458 	.word	0x58025458
 80047fc:	5802546c 	.word	0x5802546c
 8004800:	58025480 	.word	0x58025480
 8004804:	58025494 	.word	0x58025494
 8004808:	1600963f 	.word	0x1600963f
 800480c:	58025940 	.word	0x58025940
 8004810:	1000823f 	.word	0x1000823f
 8004814:	40020940 	.word	0x40020940

08004818 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004818:	b480      	push	{r7}
 800481a:	b089      	sub	sp, #36	; 0x24
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004822:	2300      	movs	r3, #0
 8004824:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004826:	4b89      	ldr	r3, [pc, #548]	; (8004a4c <HAL_GPIO_Init+0x234>)
 8004828:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800482a:	e194      	b.n	8004b56 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	2101      	movs	r1, #1
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	fa01 f303 	lsl.w	r3, r1, r3
 8004838:	4013      	ands	r3, r2
 800483a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	2b00      	cmp	r3, #0
 8004840:	f000 8186 	beq.w	8004b50 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f003 0303 	and.w	r3, r3, #3
 800484c:	2b01      	cmp	r3, #1
 800484e:	d005      	beq.n	800485c <HAL_GPIO_Init+0x44>
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f003 0303 	and.w	r3, r3, #3
 8004858:	2b02      	cmp	r3, #2
 800485a:	d130      	bne.n	80048be <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	005b      	lsls	r3, r3, #1
 8004866:	2203      	movs	r2, #3
 8004868:	fa02 f303 	lsl.w	r3, r2, r3
 800486c:	43db      	mvns	r3, r3
 800486e:	69ba      	ldr	r2, [r7, #24]
 8004870:	4013      	ands	r3, r2
 8004872:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	68da      	ldr	r2, [r3, #12]
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	005b      	lsls	r3, r3, #1
 800487c:	fa02 f303 	lsl.w	r3, r2, r3
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	4313      	orrs	r3, r2
 8004884:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004892:	2201      	movs	r2, #1
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	fa02 f303 	lsl.w	r3, r2, r3
 800489a:	43db      	mvns	r3, r3
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	4013      	ands	r3, r2
 80048a0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	091b      	lsrs	r3, r3, #4
 80048a8:	f003 0201 	and.w	r2, r3, #1
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	fa02 f303 	lsl.w	r3, r2, r3
 80048b2:	69ba      	ldr	r2, [r7, #24]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	69ba      	ldr	r2, [r7, #24]
 80048bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f003 0303 	and.w	r3, r3, #3
 80048c6:	2b03      	cmp	r3, #3
 80048c8:	d017      	beq.n	80048fa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	005b      	lsls	r3, r3, #1
 80048d4:	2203      	movs	r2, #3
 80048d6:	fa02 f303 	lsl.w	r3, r2, r3
 80048da:	43db      	mvns	r3, r3
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	4013      	ands	r3, r2
 80048e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	689a      	ldr	r2, [r3, #8]
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	005b      	lsls	r3, r3, #1
 80048ea:	fa02 f303 	lsl.w	r3, r2, r3
 80048ee:	69ba      	ldr	r2, [r7, #24]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	69ba      	ldr	r2, [r7, #24]
 80048f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f003 0303 	and.w	r3, r3, #3
 8004902:	2b02      	cmp	r3, #2
 8004904:	d123      	bne.n	800494e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	08da      	lsrs	r2, r3, #3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	3208      	adds	r2, #8
 800490e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004912:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	f003 0307 	and.w	r3, r3, #7
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	220f      	movs	r2, #15
 800491e:	fa02 f303 	lsl.w	r3, r2, r3
 8004922:	43db      	mvns	r3, r3
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	4013      	ands	r3, r2
 8004928:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	691a      	ldr	r2, [r3, #16]
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	f003 0307 	and.w	r3, r3, #7
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	fa02 f303 	lsl.w	r3, r2, r3
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	4313      	orrs	r3, r2
 800493e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	08da      	lsrs	r2, r3, #3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	3208      	adds	r2, #8
 8004948:	69b9      	ldr	r1, [r7, #24]
 800494a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	005b      	lsls	r3, r3, #1
 8004958:	2203      	movs	r2, #3
 800495a:	fa02 f303 	lsl.w	r3, r2, r3
 800495e:	43db      	mvns	r3, r3
 8004960:	69ba      	ldr	r2, [r7, #24]
 8004962:	4013      	ands	r3, r2
 8004964:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f003 0203 	and.w	r2, r3, #3
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	005b      	lsls	r3, r3, #1
 8004972:	fa02 f303 	lsl.w	r3, r2, r3
 8004976:	69ba      	ldr	r2, [r7, #24]
 8004978:	4313      	orrs	r3, r2
 800497a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	69ba      	ldr	r2, [r7, #24]
 8004980:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800498a:	2b00      	cmp	r3, #0
 800498c:	f000 80e0 	beq.w	8004b50 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004990:	4b2f      	ldr	r3, [pc, #188]	; (8004a50 <HAL_GPIO_Init+0x238>)
 8004992:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004996:	4a2e      	ldr	r2, [pc, #184]	; (8004a50 <HAL_GPIO_Init+0x238>)
 8004998:	f043 0302 	orr.w	r3, r3, #2
 800499c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80049a0:	4b2b      	ldr	r3, [pc, #172]	; (8004a50 <HAL_GPIO_Init+0x238>)
 80049a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	60fb      	str	r3, [r7, #12]
 80049ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049ae:	4a29      	ldr	r2, [pc, #164]	; (8004a54 <HAL_GPIO_Init+0x23c>)
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	089b      	lsrs	r3, r3, #2
 80049b4:	3302      	adds	r3, #2
 80049b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	f003 0303 	and.w	r3, r3, #3
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	220f      	movs	r2, #15
 80049c6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ca:	43db      	mvns	r3, r3
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	4013      	ands	r3, r2
 80049d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a20      	ldr	r2, [pc, #128]	; (8004a58 <HAL_GPIO_Init+0x240>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d052      	beq.n	8004a80 <HAL_GPIO_Init+0x268>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a1f      	ldr	r2, [pc, #124]	; (8004a5c <HAL_GPIO_Init+0x244>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d031      	beq.n	8004a46 <HAL_GPIO_Init+0x22e>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a1e      	ldr	r2, [pc, #120]	; (8004a60 <HAL_GPIO_Init+0x248>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d02b      	beq.n	8004a42 <HAL_GPIO_Init+0x22a>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a1d      	ldr	r2, [pc, #116]	; (8004a64 <HAL_GPIO_Init+0x24c>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d025      	beq.n	8004a3e <HAL_GPIO_Init+0x226>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a1c      	ldr	r2, [pc, #112]	; (8004a68 <HAL_GPIO_Init+0x250>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d01f      	beq.n	8004a3a <HAL_GPIO_Init+0x222>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a1b      	ldr	r2, [pc, #108]	; (8004a6c <HAL_GPIO_Init+0x254>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d019      	beq.n	8004a36 <HAL_GPIO_Init+0x21e>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a1a      	ldr	r2, [pc, #104]	; (8004a70 <HAL_GPIO_Init+0x258>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d013      	beq.n	8004a32 <HAL_GPIO_Init+0x21a>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a19      	ldr	r2, [pc, #100]	; (8004a74 <HAL_GPIO_Init+0x25c>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d00d      	beq.n	8004a2e <HAL_GPIO_Init+0x216>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a18      	ldr	r2, [pc, #96]	; (8004a78 <HAL_GPIO_Init+0x260>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d007      	beq.n	8004a2a <HAL_GPIO_Init+0x212>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a17      	ldr	r2, [pc, #92]	; (8004a7c <HAL_GPIO_Init+0x264>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d101      	bne.n	8004a26 <HAL_GPIO_Init+0x20e>
 8004a22:	2309      	movs	r3, #9
 8004a24:	e02d      	b.n	8004a82 <HAL_GPIO_Init+0x26a>
 8004a26:	230a      	movs	r3, #10
 8004a28:	e02b      	b.n	8004a82 <HAL_GPIO_Init+0x26a>
 8004a2a:	2308      	movs	r3, #8
 8004a2c:	e029      	b.n	8004a82 <HAL_GPIO_Init+0x26a>
 8004a2e:	2307      	movs	r3, #7
 8004a30:	e027      	b.n	8004a82 <HAL_GPIO_Init+0x26a>
 8004a32:	2306      	movs	r3, #6
 8004a34:	e025      	b.n	8004a82 <HAL_GPIO_Init+0x26a>
 8004a36:	2305      	movs	r3, #5
 8004a38:	e023      	b.n	8004a82 <HAL_GPIO_Init+0x26a>
 8004a3a:	2304      	movs	r3, #4
 8004a3c:	e021      	b.n	8004a82 <HAL_GPIO_Init+0x26a>
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e01f      	b.n	8004a82 <HAL_GPIO_Init+0x26a>
 8004a42:	2302      	movs	r3, #2
 8004a44:	e01d      	b.n	8004a82 <HAL_GPIO_Init+0x26a>
 8004a46:	2301      	movs	r3, #1
 8004a48:	e01b      	b.n	8004a82 <HAL_GPIO_Init+0x26a>
 8004a4a:	bf00      	nop
 8004a4c:	58000080 	.word	0x58000080
 8004a50:	58024400 	.word	0x58024400
 8004a54:	58000400 	.word	0x58000400
 8004a58:	58020000 	.word	0x58020000
 8004a5c:	58020400 	.word	0x58020400
 8004a60:	58020800 	.word	0x58020800
 8004a64:	58020c00 	.word	0x58020c00
 8004a68:	58021000 	.word	0x58021000
 8004a6c:	58021400 	.word	0x58021400
 8004a70:	58021800 	.word	0x58021800
 8004a74:	58021c00 	.word	0x58021c00
 8004a78:	58022000 	.word	0x58022000
 8004a7c:	58022400 	.word	0x58022400
 8004a80:	2300      	movs	r3, #0
 8004a82:	69fa      	ldr	r2, [r7, #28]
 8004a84:	f002 0203 	and.w	r2, r2, #3
 8004a88:	0092      	lsls	r2, r2, #2
 8004a8a:	4093      	lsls	r3, r2
 8004a8c:	69ba      	ldr	r2, [r7, #24]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a92:	4938      	ldr	r1, [pc, #224]	; (8004b74 <HAL_GPIO_Init+0x35c>)
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	089b      	lsrs	r3, r3, #2
 8004a98:	3302      	adds	r3, #2
 8004a9a:	69ba      	ldr	r2, [r7, #24]
 8004a9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	43db      	mvns	r3, r3
 8004aac:	69ba      	ldr	r2, [r7, #24]
 8004aae:	4013      	ands	r3, r2
 8004ab0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004abe:	69ba      	ldr	r2, [r7, #24]
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004ac6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004ace:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	43db      	mvns	r3, r3
 8004ada:	69ba      	ldr	r2, [r7, #24]
 8004adc:	4013      	ands	r3, r2
 8004ade:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d003      	beq.n	8004af4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004aec:	69ba      	ldr	r2, [r7, #24]
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004af4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	43db      	mvns	r3, r3
 8004b06:	69ba      	ldr	r2, [r7, #24]
 8004b08:	4013      	ands	r3, r2
 8004b0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d003      	beq.n	8004b20 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004b18:	69ba      	ldr	r2, [r7, #24]
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	69ba      	ldr	r2, [r7, #24]
 8004b24:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	43db      	mvns	r3, r3
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	4013      	ands	r3, r2
 8004b34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004b42:	69ba      	ldr	r2, [r7, #24]
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	69ba      	ldr	r2, [r7, #24]
 8004b4e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	3301      	adds	r3, #1
 8004b54:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f47f ae63 	bne.w	800482c <HAL_GPIO_Init+0x14>
  }
}
 8004b66:	bf00      	nop
 8004b68:	bf00      	nop
 8004b6a:	3724      	adds	r7, #36	; 0x24
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	58000400 	.word	0x58000400

08004b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	460b      	mov	r3, r1
 8004b82:	807b      	strh	r3, [r7, #2]
 8004b84:	4613      	mov	r3, r2
 8004b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b88:	787b      	ldrb	r3, [r7, #1]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d003      	beq.n	8004b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b8e:	887a      	ldrh	r2, [r7, #2]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004b94:	e003      	b.n	8004b9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004b96:	887b      	ldrh	r3, [r7, #2]
 8004b98:	041a      	lsls	r2, r3, #16
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	619a      	str	r2, [r3, #24]
}
 8004b9e:	bf00      	nop
 8004ba0:	370c      	adds	r7, #12
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr

08004baa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004baa:	b480      	push	{r7}
 8004bac:	b085      	sub	sp, #20
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004bbc:	887a      	ldrh	r2, [r7, #2]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	041a      	lsls	r2, r3, #16
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	43d9      	mvns	r1, r3
 8004bc8:	887b      	ldrh	r3, [r7, #2]
 8004bca:	400b      	ands	r3, r1
 8004bcc:	431a      	orrs	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	619a      	str	r2, [r3, #24]
}
 8004bd2:	bf00      	nop
 8004bd4:	3714      	adds	r7, #20
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
	...

08004be0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004be8:	4b29      	ldr	r3, [pc, #164]	; (8004c90 <HAL_PWREx_ConfigSupply+0xb0>)
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	f003 0307 	and.w	r3, r3, #7
 8004bf0:	2b06      	cmp	r3, #6
 8004bf2:	d00a      	beq.n	8004c0a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004bf4:	4b26      	ldr	r3, [pc, #152]	; (8004c90 <HAL_PWREx_ConfigSupply+0xb0>)
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d001      	beq.n	8004c06 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e040      	b.n	8004c88 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004c06:	2300      	movs	r3, #0
 8004c08:	e03e      	b.n	8004c88 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004c0a:	4b21      	ldr	r3, [pc, #132]	; (8004c90 <HAL_PWREx_ConfigSupply+0xb0>)
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004c12:	491f      	ldr	r1, [pc, #124]	; (8004c90 <HAL_PWREx_ConfigSupply+0xb0>)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004c1a:	f7fc fe09 	bl	8001830 <HAL_GetTick>
 8004c1e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c20:	e009      	b.n	8004c36 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004c22:	f7fc fe05 	bl	8001830 <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c30:	d901      	bls.n	8004c36 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e028      	b.n	8004c88 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004c36:	4b16      	ldr	r3, [pc, #88]	; (8004c90 <HAL_PWREx_ConfigSupply+0xb0>)
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c42:	d1ee      	bne.n	8004c22 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b1e      	cmp	r3, #30
 8004c48:	d008      	beq.n	8004c5c <HAL_PWREx_ConfigSupply+0x7c>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2b2e      	cmp	r3, #46	; 0x2e
 8004c4e:	d005      	beq.n	8004c5c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2b1d      	cmp	r3, #29
 8004c54:	d002      	beq.n	8004c5c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2b2d      	cmp	r3, #45	; 0x2d
 8004c5a:	d114      	bne.n	8004c86 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004c5c:	f7fc fde8 	bl	8001830 <HAL_GetTick>
 8004c60:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004c62:	e009      	b.n	8004c78 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004c64:	f7fc fde4 	bl	8001830 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c72:	d901      	bls.n	8004c78 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e007      	b.n	8004c88 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004c78:	4b05      	ldr	r3, [pc, #20]	; (8004c90 <HAL_PWREx_ConfigSupply+0xb0>)
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c84:	d1ee      	bne.n	8004c64 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	58024800 	.word	0x58024800

08004c94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b08c      	sub	sp, #48	; 0x30
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d102      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	f000 bc1d 	b.w	80054e2 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0301 	and.w	r3, r3, #1
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 8087 	beq.w	8004dc4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cb6:	4b99      	ldr	r3, [pc, #612]	; (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004cc0:	4b96      	ldr	r3, [pc, #600]	; (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc8:	2b10      	cmp	r3, #16
 8004cca:	d007      	beq.n	8004cdc <HAL_RCC_OscConfig+0x48>
 8004ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cce:	2b18      	cmp	r3, #24
 8004cd0:	d110      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x60>
 8004cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd4:	f003 0303 	and.w	r3, r3, #3
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d10b      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cdc:	4b8f      	ldr	r3, [pc, #572]	; (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d06c      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x12e>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d168      	bne.n	8004dc2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e3f6      	b.n	80054e2 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cfc:	d106      	bne.n	8004d0c <HAL_RCC_OscConfig+0x78>
 8004cfe:	4b87      	ldr	r3, [pc, #540]	; (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a86      	ldr	r2, [pc, #536]	; (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d08:	6013      	str	r3, [r2, #0]
 8004d0a:	e02e      	b.n	8004d6a <HAL_RCC_OscConfig+0xd6>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d10c      	bne.n	8004d2e <HAL_RCC_OscConfig+0x9a>
 8004d14:	4b81      	ldr	r3, [pc, #516]	; (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a80      	ldr	r2, [pc, #512]	; (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004d1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d1e:	6013      	str	r3, [r2, #0]
 8004d20:	4b7e      	ldr	r3, [pc, #504]	; (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a7d      	ldr	r2, [pc, #500]	; (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004d26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d2a:	6013      	str	r3, [r2, #0]
 8004d2c:	e01d      	b.n	8004d6a <HAL_RCC_OscConfig+0xd6>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d36:	d10c      	bne.n	8004d52 <HAL_RCC_OscConfig+0xbe>
 8004d38:	4b78      	ldr	r3, [pc, #480]	; (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a77      	ldr	r2, [pc, #476]	; (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004d3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d42:	6013      	str	r3, [r2, #0]
 8004d44:	4b75      	ldr	r3, [pc, #468]	; (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a74      	ldr	r2, [pc, #464]	; (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004d4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d4e:	6013      	str	r3, [r2, #0]
 8004d50:	e00b      	b.n	8004d6a <HAL_RCC_OscConfig+0xd6>
 8004d52:	4b72      	ldr	r3, [pc, #456]	; (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a71      	ldr	r2, [pc, #452]	; (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004d58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d5c:	6013      	str	r3, [r2, #0]
 8004d5e:	4b6f      	ldr	r3, [pc, #444]	; (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a6e      	ldr	r2, [pc, #440]	; (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004d64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d68:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d013      	beq.n	8004d9a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d72:	f7fc fd5d 	bl	8001830 <HAL_GetTick>
 8004d76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d78:	e008      	b.n	8004d8c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d7a:	f7fc fd59 	bl	8001830 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	2b64      	cmp	r3, #100	; 0x64
 8004d86:	d901      	bls.n	8004d8c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e3aa      	b.n	80054e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d8c:	4b63      	ldr	r3, [pc, #396]	; (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d0f0      	beq.n	8004d7a <HAL_RCC_OscConfig+0xe6>
 8004d98:	e014      	b.n	8004dc4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d9a:	f7fc fd49 	bl	8001830 <HAL_GetTick>
 8004d9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004da0:	e008      	b.n	8004db4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004da2:	f7fc fd45 	bl	8001830 <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	2b64      	cmp	r3, #100	; 0x64
 8004dae:	d901      	bls.n	8004db4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e396      	b.n	80054e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004db4:	4b59      	ldr	r3, [pc, #356]	; (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1f0      	bne.n	8004da2 <HAL_RCC_OscConfig+0x10e>
 8004dc0:	e000      	b.n	8004dc4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dc2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f000 80cb 	beq.w	8004f68 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dd2:	4b52      	ldr	r3, [pc, #328]	; (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004dda:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ddc:	4b4f      	ldr	r3, [pc, #316]	; (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004de2:	6a3b      	ldr	r3, [r7, #32]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d007      	beq.n	8004df8 <HAL_RCC_OscConfig+0x164>
 8004de8:	6a3b      	ldr	r3, [r7, #32]
 8004dea:	2b18      	cmp	r3, #24
 8004dec:	d156      	bne.n	8004e9c <HAL_RCC_OscConfig+0x208>
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	f003 0303 	and.w	r3, r3, #3
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d151      	bne.n	8004e9c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004df8:	4b48      	ldr	r3, [pc, #288]	; (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0304 	and.w	r3, r3, #4
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d005      	beq.n	8004e10 <HAL_RCC_OscConfig+0x17c>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d101      	bne.n	8004e10 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e368      	b.n	80054e2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004e10:	4b42      	ldr	r3, [pc, #264]	; (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f023 0219 	bic.w	r2, r3, #25
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	493f      	ldr	r1, [pc, #252]	; (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e22:	f7fc fd05 	bl	8001830 <HAL_GetTick>
 8004e26:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e28:	e008      	b.n	8004e3c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e2a:	f7fc fd01 	bl	8001830 <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d901      	bls.n	8004e3c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e352      	b.n	80054e2 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e3c:	4b37      	ldr	r3, [pc, #220]	; (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0304 	and.w	r3, r3, #4
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d0f0      	beq.n	8004e2a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e48:	f7fc fcfe 	bl	8001848 <HAL_GetREVID>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	f241 0203 	movw	r2, #4099	; 0x1003
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d817      	bhi.n	8004e86 <HAL_RCC_OscConfig+0x1f2>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	2b40      	cmp	r3, #64	; 0x40
 8004e5c:	d108      	bne.n	8004e70 <HAL_RCC_OscConfig+0x1dc>
 8004e5e:	4b2f      	ldr	r3, [pc, #188]	; (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004e66:	4a2d      	ldr	r2, [pc, #180]	; (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e6c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e6e:	e07b      	b.n	8004f68 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e70:	4b2a      	ldr	r3, [pc, #168]	; (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	031b      	lsls	r3, r3, #12
 8004e7e:	4927      	ldr	r1, [pc, #156]	; (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e84:	e070      	b.n	8004f68 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e86:	4b25      	ldr	r3, [pc, #148]	; (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	061b      	lsls	r3, r3, #24
 8004e94:	4921      	ldr	r1, [pc, #132]	; (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e9a:	e065      	b.n	8004f68 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d048      	beq.n	8004f36 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004ea4:	4b1d      	ldr	r3, [pc, #116]	; (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f023 0219 	bic.w	r2, r3, #25
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	491a      	ldr	r1, [pc, #104]	; (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb6:	f7fc fcbb 	bl	8001830 <HAL_GetTick>
 8004eba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ebc:	e008      	b.n	8004ed0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ebe:	f7fc fcb7 	bl	8001830 <HAL_GetTick>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d901      	bls.n	8004ed0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e308      	b.n	80054e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ed0:	4b12      	ldr	r3, [pc, #72]	; (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d0f0      	beq.n	8004ebe <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004edc:	f7fc fcb4 	bl	8001848 <HAL_GetREVID>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	f241 0203 	movw	r2, #4099	; 0x1003
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d81a      	bhi.n	8004f20 <HAL_RCC_OscConfig+0x28c>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	2b40      	cmp	r3, #64	; 0x40
 8004ef0:	d108      	bne.n	8004f04 <HAL_RCC_OscConfig+0x270>
 8004ef2:	4b0a      	ldr	r3, [pc, #40]	; (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004efa:	4a08      	ldr	r2, [pc, #32]	; (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f00:	6053      	str	r3, [r2, #4]
 8004f02:	e031      	b.n	8004f68 <HAL_RCC_OscConfig+0x2d4>
 8004f04:	4b05      	ldr	r3, [pc, #20]	; (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	031b      	lsls	r3, r3, #12
 8004f12:	4902      	ldr	r1, [pc, #8]	; (8004f1c <HAL_RCC_OscConfig+0x288>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	604b      	str	r3, [r1, #4]
 8004f18:	e026      	b.n	8004f68 <HAL_RCC_OscConfig+0x2d4>
 8004f1a:	bf00      	nop
 8004f1c:	58024400 	.word	0x58024400
 8004f20:	4b9a      	ldr	r3, [pc, #616]	; (800518c <HAL_RCC_OscConfig+0x4f8>)
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	061b      	lsls	r3, r3, #24
 8004f2e:	4997      	ldr	r1, [pc, #604]	; (800518c <HAL_RCC_OscConfig+0x4f8>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	604b      	str	r3, [r1, #4]
 8004f34:	e018      	b.n	8004f68 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f36:	4b95      	ldr	r3, [pc, #596]	; (800518c <HAL_RCC_OscConfig+0x4f8>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a94      	ldr	r2, [pc, #592]	; (800518c <HAL_RCC_OscConfig+0x4f8>)
 8004f3c:	f023 0301 	bic.w	r3, r3, #1
 8004f40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f42:	f7fc fc75 	bl	8001830 <HAL_GetTick>
 8004f46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004f48:	e008      	b.n	8004f5c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f4a:	f7fc fc71 	bl	8001830 <HAL_GetTick>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f52:	1ad3      	subs	r3, r2, r3
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d901      	bls.n	8004f5c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e2c2      	b.n	80054e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004f5c:	4b8b      	ldr	r3, [pc, #556]	; (800518c <HAL_RCC_OscConfig+0x4f8>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0304 	and.w	r3, r3, #4
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1f0      	bne.n	8004f4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0310 	and.w	r3, r3, #16
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f000 80a9 	beq.w	80050c8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f76:	4b85      	ldr	r3, [pc, #532]	; (800518c <HAL_RCC_OscConfig+0x4f8>)
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f7e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f80:	4b82      	ldr	r3, [pc, #520]	; (800518c <HAL_RCC_OscConfig+0x4f8>)
 8004f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f84:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	2b08      	cmp	r3, #8
 8004f8a:	d007      	beq.n	8004f9c <HAL_RCC_OscConfig+0x308>
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	2b18      	cmp	r3, #24
 8004f90:	d13a      	bne.n	8005008 <HAL_RCC_OscConfig+0x374>
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f003 0303 	and.w	r3, r3, #3
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d135      	bne.n	8005008 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004f9c:	4b7b      	ldr	r3, [pc, #492]	; (800518c <HAL_RCC_OscConfig+0x4f8>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d005      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x320>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	69db      	ldr	r3, [r3, #28]
 8004fac:	2b80      	cmp	r3, #128	; 0x80
 8004fae:	d001      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e296      	b.n	80054e2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004fb4:	f7fc fc48 	bl	8001848 <HAL_GetREVID>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	f241 0203 	movw	r2, #4099	; 0x1003
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d817      	bhi.n	8004ff2 <HAL_RCC_OscConfig+0x35e>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	2b20      	cmp	r3, #32
 8004fc8:	d108      	bne.n	8004fdc <HAL_RCC_OscConfig+0x348>
 8004fca:	4b70      	ldr	r3, [pc, #448]	; (800518c <HAL_RCC_OscConfig+0x4f8>)
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004fd2:	4a6e      	ldr	r2, [pc, #440]	; (800518c <HAL_RCC_OscConfig+0x4f8>)
 8004fd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fd8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004fda:	e075      	b.n	80050c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004fdc:	4b6b      	ldr	r3, [pc, #428]	; (800518c <HAL_RCC_OscConfig+0x4f8>)
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a1b      	ldr	r3, [r3, #32]
 8004fe8:	069b      	lsls	r3, r3, #26
 8004fea:	4968      	ldr	r1, [pc, #416]	; (800518c <HAL_RCC_OscConfig+0x4f8>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ff0:	e06a      	b.n	80050c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ff2:	4b66      	ldr	r3, [pc, #408]	; (800518c <HAL_RCC_OscConfig+0x4f8>)
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	061b      	lsls	r3, r3, #24
 8005000:	4962      	ldr	r1, [pc, #392]	; (800518c <HAL_RCC_OscConfig+0x4f8>)
 8005002:	4313      	orrs	r3, r2
 8005004:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005006:	e05f      	b.n	80050c8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	69db      	ldr	r3, [r3, #28]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d042      	beq.n	8005096 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005010:	4b5e      	ldr	r3, [pc, #376]	; (800518c <HAL_RCC_OscConfig+0x4f8>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a5d      	ldr	r2, [pc, #372]	; (800518c <HAL_RCC_OscConfig+0x4f8>)
 8005016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800501a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800501c:	f7fc fc08 	bl	8001830 <HAL_GetTick>
 8005020:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005022:	e008      	b.n	8005036 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005024:	f7fc fc04 	bl	8001830 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b02      	cmp	r3, #2
 8005030:	d901      	bls.n	8005036 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e255      	b.n	80054e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005036:	4b55      	ldr	r3, [pc, #340]	; (800518c <HAL_RCC_OscConfig+0x4f8>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800503e:	2b00      	cmp	r3, #0
 8005040:	d0f0      	beq.n	8005024 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005042:	f7fc fc01 	bl	8001848 <HAL_GetREVID>
 8005046:	4603      	mov	r3, r0
 8005048:	f241 0203 	movw	r2, #4099	; 0x1003
 800504c:	4293      	cmp	r3, r2
 800504e:	d817      	bhi.n	8005080 <HAL_RCC_OscConfig+0x3ec>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a1b      	ldr	r3, [r3, #32]
 8005054:	2b20      	cmp	r3, #32
 8005056:	d108      	bne.n	800506a <HAL_RCC_OscConfig+0x3d6>
 8005058:	4b4c      	ldr	r3, [pc, #304]	; (800518c <HAL_RCC_OscConfig+0x4f8>)
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005060:	4a4a      	ldr	r2, [pc, #296]	; (800518c <HAL_RCC_OscConfig+0x4f8>)
 8005062:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005066:	6053      	str	r3, [r2, #4]
 8005068:	e02e      	b.n	80050c8 <HAL_RCC_OscConfig+0x434>
 800506a:	4b48      	ldr	r3, [pc, #288]	; (800518c <HAL_RCC_OscConfig+0x4f8>)
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	069b      	lsls	r3, r3, #26
 8005078:	4944      	ldr	r1, [pc, #272]	; (800518c <HAL_RCC_OscConfig+0x4f8>)
 800507a:	4313      	orrs	r3, r2
 800507c:	604b      	str	r3, [r1, #4]
 800507e:	e023      	b.n	80050c8 <HAL_RCC_OscConfig+0x434>
 8005080:	4b42      	ldr	r3, [pc, #264]	; (800518c <HAL_RCC_OscConfig+0x4f8>)
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a1b      	ldr	r3, [r3, #32]
 800508c:	061b      	lsls	r3, r3, #24
 800508e:	493f      	ldr	r1, [pc, #252]	; (800518c <HAL_RCC_OscConfig+0x4f8>)
 8005090:	4313      	orrs	r3, r2
 8005092:	60cb      	str	r3, [r1, #12]
 8005094:	e018      	b.n	80050c8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005096:	4b3d      	ldr	r3, [pc, #244]	; (800518c <HAL_RCC_OscConfig+0x4f8>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a3c      	ldr	r2, [pc, #240]	; (800518c <HAL_RCC_OscConfig+0x4f8>)
 800509c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a2:	f7fc fbc5 	bl	8001830 <HAL_GetTick>
 80050a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80050a8:	e008      	b.n	80050bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80050aa:	f7fc fbc1 	bl	8001830 <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d901      	bls.n	80050bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e212      	b.n	80054e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80050bc:	4b33      	ldr	r3, [pc, #204]	; (800518c <HAL_RCC_OscConfig+0x4f8>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1f0      	bne.n	80050aa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0308 	and.w	r3, r3, #8
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d036      	beq.n	8005142 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	695b      	ldr	r3, [r3, #20]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d019      	beq.n	8005110 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050dc:	4b2b      	ldr	r3, [pc, #172]	; (800518c <HAL_RCC_OscConfig+0x4f8>)
 80050de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050e0:	4a2a      	ldr	r2, [pc, #168]	; (800518c <HAL_RCC_OscConfig+0x4f8>)
 80050e2:	f043 0301 	orr.w	r3, r3, #1
 80050e6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050e8:	f7fc fba2 	bl	8001830 <HAL_GetTick>
 80050ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80050ee:	e008      	b.n	8005102 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050f0:	f7fc fb9e 	bl	8001830 <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d901      	bls.n	8005102 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e1ef      	b.n	80054e2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005102:	4b22      	ldr	r3, [pc, #136]	; (800518c <HAL_RCC_OscConfig+0x4f8>)
 8005104:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d0f0      	beq.n	80050f0 <HAL_RCC_OscConfig+0x45c>
 800510e:	e018      	b.n	8005142 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005110:	4b1e      	ldr	r3, [pc, #120]	; (800518c <HAL_RCC_OscConfig+0x4f8>)
 8005112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005114:	4a1d      	ldr	r2, [pc, #116]	; (800518c <HAL_RCC_OscConfig+0x4f8>)
 8005116:	f023 0301 	bic.w	r3, r3, #1
 800511a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800511c:	f7fc fb88 	bl	8001830 <HAL_GetTick>
 8005120:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005122:	e008      	b.n	8005136 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005124:	f7fc fb84 	bl	8001830 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	2b02      	cmp	r3, #2
 8005130:	d901      	bls.n	8005136 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e1d5      	b.n	80054e2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005136:	4b15      	ldr	r3, [pc, #84]	; (800518c <HAL_RCC_OscConfig+0x4f8>)
 8005138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1f0      	bne.n	8005124 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0320 	and.w	r3, r3, #32
 800514a:	2b00      	cmp	r3, #0
 800514c:	d039      	beq.n	80051c2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d01c      	beq.n	8005190 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005156:	4b0d      	ldr	r3, [pc, #52]	; (800518c <HAL_RCC_OscConfig+0x4f8>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a0c      	ldr	r2, [pc, #48]	; (800518c <HAL_RCC_OscConfig+0x4f8>)
 800515c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005160:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005162:	f7fc fb65 	bl	8001830 <HAL_GetTick>
 8005166:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005168:	e008      	b.n	800517c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800516a:	f7fc fb61 	bl	8001830 <HAL_GetTick>
 800516e:	4602      	mov	r2, r0
 8005170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	2b02      	cmp	r3, #2
 8005176:	d901      	bls.n	800517c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e1b2      	b.n	80054e2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800517c:	4b03      	ldr	r3, [pc, #12]	; (800518c <HAL_RCC_OscConfig+0x4f8>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d0f0      	beq.n	800516a <HAL_RCC_OscConfig+0x4d6>
 8005188:	e01b      	b.n	80051c2 <HAL_RCC_OscConfig+0x52e>
 800518a:	bf00      	nop
 800518c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005190:	4b9b      	ldr	r3, [pc, #620]	; (8005400 <HAL_RCC_OscConfig+0x76c>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a9a      	ldr	r2, [pc, #616]	; (8005400 <HAL_RCC_OscConfig+0x76c>)
 8005196:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800519a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800519c:	f7fc fb48 	bl	8001830 <HAL_GetTick>
 80051a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80051a2:	e008      	b.n	80051b6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80051a4:	f7fc fb44 	bl	8001830 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d901      	bls.n	80051b6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e195      	b.n	80054e2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80051b6:	4b92      	ldr	r3, [pc, #584]	; (8005400 <HAL_RCC_OscConfig+0x76c>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1f0      	bne.n	80051a4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0304 	and.w	r3, r3, #4
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f000 8081 	beq.w	80052d2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80051d0:	4b8c      	ldr	r3, [pc, #560]	; (8005404 <HAL_RCC_OscConfig+0x770>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a8b      	ldr	r2, [pc, #556]	; (8005404 <HAL_RCC_OscConfig+0x770>)
 80051d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80051dc:	f7fc fb28 	bl	8001830 <HAL_GetTick>
 80051e0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051e2:	e008      	b.n	80051f6 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80051e4:	f7fc fb24 	bl	8001830 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b64      	cmp	r3, #100	; 0x64
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e175      	b.n	80054e2 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051f6:	4b83      	ldr	r3, [pc, #524]	; (8005404 <HAL_RCC_OscConfig+0x770>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d0f0      	beq.n	80051e4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	2b01      	cmp	r3, #1
 8005208:	d106      	bne.n	8005218 <HAL_RCC_OscConfig+0x584>
 800520a:	4b7d      	ldr	r3, [pc, #500]	; (8005400 <HAL_RCC_OscConfig+0x76c>)
 800520c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800520e:	4a7c      	ldr	r2, [pc, #496]	; (8005400 <HAL_RCC_OscConfig+0x76c>)
 8005210:	f043 0301 	orr.w	r3, r3, #1
 8005214:	6713      	str	r3, [r2, #112]	; 0x70
 8005216:	e02d      	b.n	8005274 <HAL_RCC_OscConfig+0x5e0>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10c      	bne.n	800523a <HAL_RCC_OscConfig+0x5a6>
 8005220:	4b77      	ldr	r3, [pc, #476]	; (8005400 <HAL_RCC_OscConfig+0x76c>)
 8005222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005224:	4a76      	ldr	r2, [pc, #472]	; (8005400 <HAL_RCC_OscConfig+0x76c>)
 8005226:	f023 0301 	bic.w	r3, r3, #1
 800522a:	6713      	str	r3, [r2, #112]	; 0x70
 800522c:	4b74      	ldr	r3, [pc, #464]	; (8005400 <HAL_RCC_OscConfig+0x76c>)
 800522e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005230:	4a73      	ldr	r2, [pc, #460]	; (8005400 <HAL_RCC_OscConfig+0x76c>)
 8005232:	f023 0304 	bic.w	r3, r3, #4
 8005236:	6713      	str	r3, [r2, #112]	; 0x70
 8005238:	e01c      	b.n	8005274 <HAL_RCC_OscConfig+0x5e0>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	2b05      	cmp	r3, #5
 8005240:	d10c      	bne.n	800525c <HAL_RCC_OscConfig+0x5c8>
 8005242:	4b6f      	ldr	r3, [pc, #444]	; (8005400 <HAL_RCC_OscConfig+0x76c>)
 8005244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005246:	4a6e      	ldr	r2, [pc, #440]	; (8005400 <HAL_RCC_OscConfig+0x76c>)
 8005248:	f043 0304 	orr.w	r3, r3, #4
 800524c:	6713      	str	r3, [r2, #112]	; 0x70
 800524e:	4b6c      	ldr	r3, [pc, #432]	; (8005400 <HAL_RCC_OscConfig+0x76c>)
 8005250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005252:	4a6b      	ldr	r2, [pc, #428]	; (8005400 <HAL_RCC_OscConfig+0x76c>)
 8005254:	f043 0301 	orr.w	r3, r3, #1
 8005258:	6713      	str	r3, [r2, #112]	; 0x70
 800525a:	e00b      	b.n	8005274 <HAL_RCC_OscConfig+0x5e0>
 800525c:	4b68      	ldr	r3, [pc, #416]	; (8005400 <HAL_RCC_OscConfig+0x76c>)
 800525e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005260:	4a67      	ldr	r2, [pc, #412]	; (8005400 <HAL_RCC_OscConfig+0x76c>)
 8005262:	f023 0301 	bic.w	r3, r3, #1
 8005266:	6713      	str	r3, [r2, #112]	; 0x70
 8005268:	4b65      	ldr	r3, [pc, #404]	; (8005400 <HAL_RCC_OscConfig+0x76c>)
 800526a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800526c:	4a64      	ldr	r2, [pc, #400]	; (8005400 <HAL_RCC_OscConfig+0x76c>)
 800526e:	f023 0304 	bic.w	r3, r3, #4
 8005272:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d015      	beq.n	80052a8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800527c:	f7fc fad8 	bl	8001830 <HAL_GetTick>
 8005280:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005282:	e00a      	b.n	800529a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005284:	f7fc fad4 	bl	8001830 <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005292:	4293      	cmp	r3, r2
 8005294:	d901      	bls.n	800529a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e123      	b.n	80054e2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800529a:	4b59      	ldr	r3, [pc, #356]	; (8005400 <HAL_RCC_OscConfig+0x76c>)
 800529c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800529e:	f003 0302 	and.w	r3, r3, #2
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d0ee      	beq.n	8005284 <HAL_RCC_OscConfig+0x5f0>
 80052a6:	e014      	b.n	80052d2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052a8:	f7fc fac2 	bl	8001830 <HAL_GetTick>
 80052ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80052ae:	e00a      	b.n	80052c6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052b0:	f7fc fabe 	bl	8001830 <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80052be:	4293      	cmp	r3, r2
 80052c0:	d901      	bls.n	80052c6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e10d      	b.n	80054e2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80052c6:	4b4e      	ldr	r3, [pc, #312]	; (8005400 <HAL_RCC_OscConfig+0x76c>)
 80052c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ca:	f003 0302 	and.w	r3, r3, #2
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1ee      	bne.n	80052b0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	f000 8102 	beq.w	80054e0 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80052dc:	4b48      	ldr	r3, [pc, #288]	; (8005400 <HAL_RCC_OscConfig+0x76c>)
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052e4:	2b18      	cmp	r3, #24
 80052e6:	f000 80bd 	beq.w	8005464 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	f040 809e 	bne.w	8005430 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052f4:	4b42      	ldr	r3, [pc, #264]	; (8005400 <HAL_RCC_OscConfig+0x76c>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a41      	ldr	r2, [pc, #260]	; (8005400 <HAL_RCC_OscConfig+0x76c>)
 80052fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005300:	f7fc fa96 	bl	8001830 <HAL_GetTick>
 8005304:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005306:	e008      	b.n	800531a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005308:	f7fc fa92 	bl	8001830 <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	2b02      	cmp	r3, #2
 8005314:	d901      	bls.n	800531a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e0e3      	b.n	80054e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800531a:	4b39      	ldr	r3, [pc, #228]	; (8005400 <HAL_RCC_OscConfig+0x76c>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1f0      	bne.n	8005308 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005326:	4b36      	ldr	r3, [pc, #216]	; (8005400 <HAL_RCC_OscConfig+0x76c>)
 8005328:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800532a:	4b37      	ldr	r3, [pc, #220]	; (8005408 <HAL_RCC_OscConfig+0x774>)
 800532c:	4013      	ands	r3, r2
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005336:	0112      	lsls	r2, r2, #4
 8005338:	430a      	orrs	r2, r1
 800533a:	4931      	ldr	r1, [pc, #196]	; (8005400 <HAL_RCC_OscConfig+0x76c>)
 800533c:	4313      	orrs	r3, r2
 800533e:	628b      	str	r3, [r1, #40]	; 0x28
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005344:	3b01      	subs	r3, #1
 8005346:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800534e:	3b01      	subs	r3, #1
 8005350:	025b      	lsls	r3, r3, #9
 8005352:	b29b      	uxth	r3, r3
 8005354:	431a      	orrs	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535a:	3b01      	subs	r3, #1
 800535c:	041b      	lsls	r3, r3, #16
 800535e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005362:	431a      	orrs	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005368:	3b01      	subs	r3, #1
 800536a:	061b      	lsls	r3, r3, #24
 800536c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005370:	4923      	ldr	r1, [pc, #140]	; (8005400 <HAL_RCC_OscConfig+0x76c>)
 8005372:	4313      	orrs	r3, r2
 8005374:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005376:	4b22      	ldr	r3, [pc, #136]	; (8005400 <HAL_RCC_OscConfig+0x76c>)
 8005378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537a:	4a21      	ldr	r2, [pc, #132]	; (8005400 <HAL_RCC_OscConfig+0x76c>)
 800537c:	f023 0301 	bic.w	r3, r3, #1
 8005380:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005382:	4b1f      	ldr	r3, [pc, #124]	; (8005400 <HAL_RCC_OscConfig+0x76c>)
 8005384:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005386:	4b21      	ldr	r3, [pc, #132]	; (800540c <HAL_RCC_OscConfig+0x778>)
 8005388:	4013      	ands	r3, r2
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800538e:	00d2      	lsls	r2, r2, #3
 8005390:	491b      	ldr	r1, [pc, #108]	; (8005400 <HAL_RCC_OscConfig+0x76c>)
 8005392:	4313      	orrs	r3, r2
 8005394:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005396:	4b1a      	ldr	r3, [pc, #104]	; (8005400 <HAL_RCC_OscConfig+0x76c>)
 8005398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539a:	f023 020c 	bic.w	r2, r3, #12
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a2:	4917      	ldr	r1, [pc, #92]	; (8005400 <HAL_RCC_OscConfig+0x76c>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80053a8:	4b15      	ldr	r3, [pc, #84]	; (8005400 <HAL_RCC_OscConfig+0x76c>)
 80053aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ac:	f023 0202 	bic.w	r2, r3, #2
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b4:	4912      	ldr	r1, [pc, #72]	; (8005400 <HAL_RCC_OscConfig+0x76c>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80053ba:	4b11      	ldr	r3, [pc, #68]	; (8005400 <HAL_RCC_OscConfig+0x76c>)
 80053bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053be:	4a10      	ldr	r2, [pc, #64]	; (8005400 <HAL_RCC_OscConfig+0x76c>)
 80053c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053c6:	4b0e      	ldr	r3, [pc, #56]	; (8005400 <HAL_RCC_OscConfig+0x76c>)
 80053c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ca:	4a0d      	ldr	r2, [pc, #52]	; (8005400 <HAL_RCC_OscConfig+0x76c>)
 80053cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80053d2:	4b0b      	ldr	r3, [pc, #44]	; (8005400 <HAL_RCC_OscConfig+0x76c>)
 80053d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d6:	4a0a      	ldr	r2, [pc, #40]	; (8005400 <HAL_RCC_OscConfig+0x76c>)
 80053d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80053de:	4b08      	ldr	r3, [pc, #32]	; (8005400 <HAL_RCC_OscConfig+0x76c>)
 80053e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e2:	4a07      	ldr	r2, [pc, #28]	; (8005400 <HAL_RCC_OscConfig+0x76c>)
 80053e4:	f043 0301 	orr.w	r3, r3, #1
 80053e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053ea:	4b05      	ldr	r3, [pc, #20]	; (8005400 <HAL_RCC_OscConfig+0x76c>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a04      	ldr	r2, [pc, #16]	; (8005400 <HAL_RCC_OscConfig+0x76c>)
 80053f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053f6:	f7fc fa1b 	bl	8001830 <HAL_GetTick>
 80053fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80053fc:	e011      	b.n	8005422 <HAL_RCC_OscConfig+0x78e>
 80053fe:	bf00      	nop
 8005400:	58024400 	.word	0x58024400
 8005404:	58024800 	.word	0x58024800
 8005408:	fffffc0c 	.word	0xfffffc0c
 800540c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005410:	f7fc fa0e 	bl	8001830 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	2b02      	cmp	r3, #2
 800541c:	d901      	bls.n	8005422 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e05f      	b.n	80054e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005422:	4b32      	ldr	r3, [pc, #200]	; (80054ec <HAL_RCC_OscConfig+0x858>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d0f0      	beq.n	8005410 <HAL_RCC_OscConfig+0x77c>
 800542e:	e057      	b.n	80054e0 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005430:	4b2e      	ldr	r3, [pc, #184]	; (80054ec <HAL_RCC_OscConfig+0x858>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a2d      	ldr	r2, [pc, #180]	; (80054ec <HAL_RCC_OscConfig+0x858>)
 8005436:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800543a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800543c:	f7fc f9f8 	bl	8001830 <HAL_GetTick>
 8005440:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005442:	e008      	b.n	8005456 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005444:	f7fc f9f4 	bl	8001830 <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	2b02      	cmp	r3, #2
 8005450:	d901      	bls.n	8005456 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005452:	2303      	movs	r3, #3
 8005454:	e045      	b.n	80054e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005456:	4b25      	ldr	r3, [pc, #148]	; (80054ec <HAL_RCC_OscConfig+0x858>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1f0      	bne.n	8005444 <HAL_RCC_OscConfig+0x7b0>
 8005462:	e03d      	b.n	80054e0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005464:	4b21      	ldr	r3, [pc, #132]	; (80054ec <HAL_RCC_OscConfig+0x858>)
 8005466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005468:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800546a:	4b20      	ldr	r3, [pc, #128]	; (80054ec <HAL_RCC_OscConfig+0x858>)
 800546c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005474:	2b01      	cmp	r3, #1
 8005476:	d031      	beq.n	80054dc <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	f003 0203 	and.w	r2, r3, #3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005482:	429a      	cmp	r2, r3
 8005484:	d12a      	bne.n	80054dc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	091b      	lsrs	r3, r3, #4
 800548a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005492:	429a      	cmp	r2, r3
 8005494:	d122      	bne.n	80054dc <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d11a      	bne.n	80054dc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	0a5b      	lsrs	r3, r3, #9
 80054aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d111      	bne.n	80054dc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	0c1b      	lsrs	r3, r3, #16
 80054bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d108      	bne.n	80054dc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	0e1b      	lsrs	r3, r3, #24
 80054ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054d6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80054d8:	429a      	cmp	r2, r3
 80054da:	d001      	beq.n	80054e0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e000      	b.n	80054e2 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3730      	adds	r7, #48	; 0x30
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	58024400 	.word	0x58024400

080054f0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b086      	sub	sp, #24
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d101      	bne.n	8005504 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e19c      	b.n	800583e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005504:	4b8a      	ldr	r3, [pc, #552]	; (8005730 <HAL_RCC_ClockConfig+0x240>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 030f 	and.w	r3, r3, #15
 800550c:	683a      	ldr	r2, [r7, #0]
 800550e:	429a      	cmp	r2, r3
 8005510:	d910      	bls.n	8005534 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005512:	4b87      	ldr	r3, [pc, #540]	; (8005730 <HAL_RCC_ClockConfig+0x240>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f023 020f 	bic.w	r2, r3, #15
 800551a:	4985      	ldr	r1, [pc, #532]	; (8005730 <HAL_RCC_ClockConfig+0x240>)
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	4313      	orrs	r3, r2
 8005520:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005522:	4b83      	ldr	r3, [pc, #524]	; (8005730 <HAL_RCC_ClockConfig+0x240>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 030f 	and.w	r3, r3, #15
 800552a:	683a      	ldr	r2, [r7, #0]
 800552c:	429a      	cmp	r2, r3
 800552e:	d001      	beq.n	8005534 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e184      	b.n	800583e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0304 	and.w	r3, r3, #4
 800553c:	2b00      	cmp	r3, #0
 800553e:	d010      	beq.n	8005562 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	691a      	ldr	r2, [r3, #16]
 8005544:	4b7b      	ldr	r3, [pc, #492]	; (8005734 <HAL_RCC_ClockConfig+0x244>)
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800554c:	429a      	cmp	r2, r3
 800554e:	d908      	bls.n	8005562 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005550:	4b78      	ldr	r3, [pc, #480]	; (8005734 <HAL_RCC_ClockConfig+0x244>)
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	4975      	ldr	r1, [pc, #468]	; (8005734 <HAL_RCC_ClockConfig+0x244>)
 800555e:	4313      	orrs	r3, r2
 8005560:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0308 	and.w	r3, r3, #8
 800556a:	2b00      	cmp	r3, #0
 800556c:	d010      	beq.n	8005590 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	695a      	ldr	r2, [r3, #20]
 8005572:	4b70      	ldr	r3, [pc, #448]	; (8005734 <HAL_RCC_ClockConfig+0x244>)
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800557a:	429a      	cmp	r2, r3
 800557c:	d908      	bls.n	8005590 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800557e:	4b6d      	ldr	r3, [pc, #436]	; (8005734 <HAL_RCC_ClockConfig+0x244>)
 8005580:	69db      	ldr	r3, [r3, #28]
 8005582:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	496a      	ldr	r1, [pc, #424]	; (8005734 <HAL_RCC_ClockConfig+0x244>)
 800558c:	4313      	orrs	r3, r2
 800558e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0310 	and.w	r3, r3, #16
 8005598:	2b00      	cmp	r3, #0
 800559a:	d010      	beq.n	80055be <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	699a      	ldr	r2, [r3, #24]
 80055a0:	4b64      	ldr	r3, [pc, #400]	; (8005734 <HAL_RCC_ClockConfig+0x244>)
 80055a2:	69db      	ldr	r3, [r3, #28]
 80055a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d908      	bls.n	80055be <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80055ac:	4b61      	ldr	r3, [pc, #388]	; (8005734 <HAL_RCC_ClockConfig+0x244>)
 80055ae:	69db      	ldr	r3, [r3, #28]
 80055b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	495e      	ldr	r1, [pc, #376]	; (8005734 <HAL_RCC_ClockConfig+0x244>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0320 	and.w	r3, r3, #32
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d010      	beq.n	80055ec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	69da      	ldr	r2, [r3, #28]
 80055ce:	4b59      	ldr	r3, [pc, #356]	; (8005734 <HAL_RCC_ClockConfig+0x244>)
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d908      	bls.n	80055ec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80055da:	4b56      	ldr	r3, [pc, #344]	; (8005734 <HAL_RCC_ClockConfig+0x244>)
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	69db      	ldr	r3, [r3, #28]
 80055e6:	4953      	ldr	r1, [pc, #332]	; (8005734 <HAL_RCC_ClockConfig+0x244>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0302 	and.w	r3, r3, #2
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d010      	beq.n	800561a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	68da      	ldr	r2, [r3, #12]
 80055fc:	4b4d      	ldr	r3, [pc, #308]	; (8005734 <HAL_RCC_ClockConfig+0x244>)
 80055fe:	699b      	ldr	r3, [r3, #24]
 8005600:	f003 030f 	and.w	r3, r3, #15
 8005604:	429a      	cmp	r2, r3
 8005606:	d908      	bls.n	800561a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005608:	4b4a      	ldr	r3, [pc, #296]	; (8005734 <HAL_RCC_ClockConfig+0x244>)
 800560a:	699b      	ldr	r3, [r3, #24]
 800560c:	f023 020f 	bic.w	r2, r3, #15
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	4947      	ldr	r1, [pc, #284]	; (8005734 <HAL_RCC_ClockConfig+0x244>)
 8005616:	4313      	orrs	r3, r2
 8005618:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	2b00      	cmp	r3, #0
 8005624:	d055      	beq.n	80056d2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005626:	4b43      	ldr	r3, [pc, #268]	; (8005734 <HAL_RCC_ClockConfig+0x244>)
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	4940      	ldr	r1, [pc, #256]	; (8005734 <HAL_RCC_ClockConfig+0x244>)
 8005634:	4313      	orrs	r3, r2
 8005636:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	2b02      	cmp	r3, #2
 800563e:	d107      	bne.n	8005650 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005640:	4b3c      	ldr	r3, [pc, #240]	; (8005734 <HAL_RCC_ClockConfig+0x244>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d121      	bne.n	8005690 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e0f6      	b.n	800583e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	2b03      	cmp	r3, #3
 8005656:	d107      	bne.n	8005668 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005658:	4b36      	ldr	r3, [pc, #216]	; (8005734 <HAL_RCC_ClockConfig+0x244>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d115      	bne.n	8005690 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e0ea      	b.n	800583e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d107      	bne.n	8005680 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005670:	4b30      	ldr	r3, [pc, #192]	; (8005734 <HAL_RCC_ClockConfig+0x244>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005678:	2b00      	cmp	r3, #0
 800567a:	d109      	bne.n	8005690 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e0de      	b.n	800583e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005680:	4b2c      	ldr	r3, [pc, #176]	; (8005734 <HAL_RCC_ClockConfig+0x244>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0304 	and.w	r3, r3, #4
 8005688:	2b00      	cmp	r3, #0
 800568a:	d101      	bne.n	8005690 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e0d6      	b.n	800583e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005690:	4b28      	ldr	r3, [pc, #160]	; (8005734 <HAL_RCC_ClockConfig+0x244>)
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	f023 0207 	bic.w	r2, r3, #7
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	4925      	ldr	r1, [pc, #148]	; (8005734 <HAL_RCC_ClockConfig+0x244>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056a2:	f7fc f8c5 	bl	8001830 <HAL_GetTick>
 80056a6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056a8:	e00a      	b.n	80056c0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056aa:	f7fc f8c1 	bl	8001830 <HAL_GetTick>
 80056ae:	4602      	mov	r2, r0
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d901      	bls.n	80056c0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e0be      	b.n	800583e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056c0:	4b1c      	ldr	r3, [pc, #112]	; (8005734 <HAL_RCC_ClockConfig+0x244>)
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	00db      	lsls	r3, r3, #3
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d1eb      	bne.n	80056aa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0302 	and.w	r3, r3, #2
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d010      	beq.n	8005700 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	68da      	ldr	r2, [r3, #12]
 80056e2:	4b14      	ldr	r3, [pc, #80]	; (8005734 <HAL_RCC_ClockConfig+0x244>)
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	f003 030f 	and.w	r3, r3, #15
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d208      	bcs.n	8005700 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056ee:	4b11      	ldr	r3, [pc, #68]	; (8005734 <HAL_RCC_ClockConfig+0x244>)
 80056f0:	699b      	ldr	r3, [r3, #24]
 80056f2:	f023 020f 	bic.w	r2, r3, #15
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	490e      	ldr	r1, [pc, #56]	; (8005734 <HAL_RCC_ClockConfig+0x244>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005700:	4b0b      	ldr	r3, [pc, #44]	; (8005730 <HAL_RCC_ClockConfig+0x240>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 030f 	and.w	r3, r3, #15
 8005708:	683a      	ldr	r2, [r7, #0]
 800570a:	429a      	cmp	r2, r3
 800570c:	d214      	bcs.n	8005738 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800570e:	4b08      	ldr	r3, [pc, #32]	; (8005730 <HAL_RCC_ClockConfig+0x240>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f023 020f 	bic.w	r2, r3, #15
 8005716:	4906      	ldr	r1, [pc, #24]	; (8005730 <HAL_RCC_ClockConfig+0x240>)
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	4313      	orrs	r3, r2
 800571c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800571e:	4b04      	ldr	r3, [pc, #16]	; (8005730 <HAL_RCC_ClockConfig+0x240>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 030f 	and.w	r3, r3, #15
 8005726:	683a      	ldr	r2, [r7, #0]
 8005728:	429a      	cmp	r2, r3
 800572a:	d005      	beq.n	8005738 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e086      	b.n	800583e <HAL_RCC_ClockConfig+0x34e>
 8005730:	52002000 	.word	0x52002000
 8005734:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0304 	and.w	r3, r3, #4
 8005740:	2b00      	cmp	r3, #0
 8005742:	d010      	beq.n	8005766 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	691a      	ldr	r2, [r3, #16]
 8005748:	4b3f      	ldr	r3, [pc, #252]	; (8005848 <HAL_RCC_ClockConfig+0x358>)
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005750:	429a      	cmp	r2, r3
 8005752:	d208      	bcs.n	8005766 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005754:	4b3c      	ldr	r3, [pc, #240]	; (8005848 <HAL_RCC_ClockConfig+0x358>)
 8005756:	699b      	ldr	r3, [r3, #24]
 8005758:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	4939      	ldr	r1, [pc, #228]	; (8005848 <HAL_RCC_ClockConfig+0x358>)
 8005762:	4313      	orrs	r3, r2
 8005764:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0308 	and.w	r3, r3, #8
 800576e:	2b00      	cmp	r3, #0
 8005770:	d010      	beq.n	8005794 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	695a      	ldr	r2, [r3, #20]
 8005776:	4b34      	ldr	r3, [pc, #208]	; (8005848 <HAL_RCC_ClockConfig+0x358>)
 8005778:	69db      	ldr	r3, [r3, #28]
 800577a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800577e:	429a      	cmp	r2, r3
 8005780:	d208      	bcs.n	8005794 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005782:	4b31      	ldr	r3, [pc, #196]	; (8005848 <HAL_RCC_ClockConfig+0x358>)
 8005784:	69db      	ldr	r3, [r3, #28]
 8005786:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	492e      	ldr	r1, [pc, #184]	; (8005848 <HAL_RCC_ClockConfig+0x358>)
 8005790:	4313      	orrs	r3, r2
 8005792:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0310 	and.w	r3, r3, #16
 800579c:	2b00      	cmp	r3, #0
 800579e:	d010      	beq.n	80057c2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	699a      	ldr	r2, [r3, #24]
 80057a4:	4b28      	ldr	r3, [pc, #160]	; (8005848 <HAL_RCC_ClockConfig+0x358>)
 80057a6:	69db      	ldr	r3, [r3, #28]
 80057a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d208      	bcs.n	80057c2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80057b0:	4b25      	ldr	r3, [pc, #148]	; (8005848 <HAL_RCC_ClockConfig+0x358>)
 80057b2:	69db      	ldr	r3, [r3, #28]
 80057b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	4922      	ldr	r1, [pc, #136]	; (8005848 <HAL_RCC_ClockConfig+0x358>)
 80057be:	4313      	orrs	r3, r2
 80057c0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0320 	and.w	r3, r3, #32
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d010      	beq.n	80057f0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	69da      	ldr	r2, [r3, #28]
 80057d2:	4b1d      	ldr	r3, [pc, #116]	; (8005848 <HAL_RCC_ClockConfig+0x358>)
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80057da:	429a      	cmp	r2, r3
 80057dc:	d208      	bcs.n	80057f0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80057de:	4b1a      	ldr	r3, [pc, #104]	; (8005848 <HAL_RCC_ClockConfig+0x358>)
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	69db      	ldr	r3, [r3, #28]
 80057ea:	4917      	ldr	r1, [pc, #92]	; (8005848 <HAL_RCC_ClockConfig+0x358>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80057f0:	f000 f834 	bl	800585c <HAL_RCC_GetSysClockFreq>
 80057f4:	4602      	mov	r2, r0
 80057f6:	4b14      	ldr	r3, [pc, #80]	; (8005848 <HAL_RCC_ClockConfig+0x358>)
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	0a1b      	lsrs	r3, r3, #8
 80057fc:	f003 030f 	and.w	r3, r3, #15
 8005800:	4912      	ldr	r1, [pc, #72]	; (800584c <HAL_RCC_ClockConfig+0x35c>)
 8005802:	5ccb      	ldrb	r3, [r1, r3]
 8005804:	f003 031f 	and.w	r3, r3, #31
 8005808:	fa22 f303 	lsr.w	r3, r2, r3
 800580c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800580e:	4b0e      	ldr	r3, [pc, #56]	; (8005848 <HAL_RCC_ClockConfig+0x358>)
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	f003 030f 	and.w	r3, r3, #15
 8005816:	4a0d      	ldr	r2, [pc, #52]	; (800584c <HAL_RCC_ClockConfig+0x35c>)
 8005818:	5cd3      	ldrb	r3, [r2, r3]
 800581a:	f003 031f 	and.w	r3, r3, #31
 800581e:	693a      	ldr	r2, [r7, #16]
 8005820:	fa22 f303 	lsr.w	r3, r2, r3
 8005824:	4a0a      	ldr	r2, [pc, #40]	; (8005850 <HAL_RCC_ClockConfig+0x360>)
 8005826:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005828:	4a0a      	ldr	r2, [pc, #40]	; (8005854 <HAL_RCC_ClockConfig+0x364>)
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800582e:	4b0a      	ldr	r3, [pc, #40]	; (8005858 <HAL_RCC_ClockConfig+0x368>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4618      	mov	r0, r3
 8005834:	f7fb ffb2 	bl	800179c <HAL_InitTick>
 8005838:	4603      	mov	r3, r0
 800583a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800583c:	7bfb      	ldrb	r3, [r7, #15]
}
 800583e:	4618      	mov	r0, r3
 8005840:	3718      	adds	r7, #24
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	58024400 	.word	0x58024400
 800584c:	0800b4ec 	.word	0x0800b4ec
 8005850:	24000004 	.word	0x24000004
 8005854:	24000000 	.word	0x24000000
 8005858:	2400000c 	.word	0x2400000c

0800585c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800585c:	b480      	push	{r7}
 800585e:	b089      	sub	sp, #36	; 0x24
 8005860:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005862:	4bb3      	ldr	r3, [pc, #716]	; (8005b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800586a:	2b18      	cmp	r3, #24
 800586c:	f200 8155 	bhi.w	8005b1a <HAL_RCC_GetSysClockFreq+0x2be>
 8005870:	a201      	add	r2, pc, #4	; (adr r2, 8005878 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005876:	bf00      	nop
 8005878:	080058dd 	.word	0x080058dd
 800587c:	08005b1b 	.word	0x08005b1b
 8005880:	08005b1b 	.word	0x08005b1b
 8005884:	08005b1b 	.word	0x08005b1b
 8005888:	08005b1b 	.word	0x08005b1b
 800588c:	08005b1b 	.word	0x08005b1b
 8005890:	08005b1b 	.word	0x08005b1b
 8005894:	08005b1b 	.word	0x08005b1b
 8005898:	08005903 	.word	0x08005903
 800589c:	08005b1b 	.word	0x08005b1b
 80058a0:	08005b1b 	.word	0x08005b1b
 80058a4:	08005b1b 	.word	0x08005b1b
 80058a8:	08005b1b 	.word	0x08005b1b
 80058ac:	08005b1b 	.word	0x08005b1b
 80058b0:	08005b1b 	.word	0x08005b1b
 80058b4:	08005b1b 	.word	0x08005b1b
 80058b8:	08005909 	.word	0x08005909
 80058bc:	08005b1b 	.word	0x08005b1b
 80058c0:	08005b1b 	.word	0x08005b1b
 80058c4:	08005b1b 	.word	0x08005b1b
 80058c8:	08005b1b 	.word	0x08005b1b
 80058cc:	08005b1b 	.word	0x08005b1b
 80058d0:	08005b1b 	.word	0x08005b1b
 80058d4:	08005b1b 	.word	0x08005b1b
 80058d8:	0800590f 	.word	0x0800590f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058dc:	4b94      	ldr	r3, [pc, #592]	; (8005b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0320 	and.w	r3, r3, #32
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d009      	beq.n	80058fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80058e8:	4b91      	ldr	r3, [pc, #580]	; (8005b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	08db      	lsrs	r3, r3, #3
 80058ee:	f003 0303 	and.w	r3, r3, #3
 80058f2:	4a90      	ldr	r2, [pc, #576]	; (8005b34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80058f4:	fa22 f303 	lsr.w	r3, r2, r3
 80058f8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80058fa:	e111      	b.n	8005b20 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80058fc:	4b8d      	ldr	r3, [pc, #564]	; (8005b34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80058fe:	61bb      	str	r3, [r7, #24]
    break;
 8005900:	e10e      	b.n	8005b20 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005902:	4b8d      	ldr	r3, [pc, #564]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005904:	61bb      	str	r3, [r7, #24]
    break;
 8005906:	e10b      	b.n	8005b20 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005908:	4b8c      	ldr	r3, [pc, #560]	; (8005b3c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800590a:	61bb      	str	r3, [r7, #24]
    break;
 800590c:	e108      	b.n	8005b20 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800590e:	4b88      	ldr	r3, [pc, #544]	; (8005b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005912:	f003 0303 	and.w	r3, r3, #3
 8005916:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005918:	4b85      	ldr	r3, [pc, #532]	; (8005b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800591a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800591c:	091b      	lsrs	r3, r3, #4
 800591e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005922:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005924:	4b82      	ldr	r3, [pc, #520]	; (8005b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005928:	f003 0301 	and.w	r3, r3, #1
 800592c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800592e:	4b80      	ldr	r3, [pc, #512]	; (8005b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005932:	08db      	lsrs	r3, r3, #3
 8005934:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	fb02 f303 	mul.w	r3, r2, r3
 800593e:	ee07 3a90 	vmov	s15, r3
 8005942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005946:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	2b00      	cmp	r3, #0
 800594e:	f000 80e1 	beq.w	8005b14 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	2b02      	cmp	r3, #2
 8005956:	f000 8083 	beq.w	8005a60 <HAL_RCC_GetSysClockFreq+0x204>
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	2b02      	cmp	r3, #2
 800595e:	f200 80a1 	bhi.w	8005aa4 <HAL_RCC_GetSysClockFreq+0x248>
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d003      	beq.n	8005970 <HAL_RCC_GetSysClockFreq+0x114>
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	2b01      	cmp	r3, #1
 800596c:	d056      	beq.n	8005a1c <HAL_RCC_GetSysClockFreq+0x1c0>
 800596e:	e099      	b.n	8005aa4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005970:	4b6f      	ldr	r3, [pc, #444]	; (8005b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0320 	and.w	r3, r3, #32
 8005978:	2b00      	cmp	r3, #0
 800597a:	d02d      	beq.n	80059d8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800597c:	4b6c      	ldr	r3, [pc, #432]	; (8005b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	08db      	lsrs	r3, r3, #3
 8005982:	f003 0303 	and.w	r3, r3, #3
 8005986:	4a6b      	ldr	r2, [pc, #428]	; (8005b34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005988:	fa22 f303 	lsr.w	r3, r2, r3
 800598c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	ee07 3a90 	vmov	s15, r3
 8005994:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	ee07 3a90 	vmov	s15, r3
 800599e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059a6:	4b62      	ldr	r3, [pc, #392]	; (8005b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ae:	ee07 3a90 	vmov	s15, r3
 80059b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80059ba:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005b40 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80059d6:	e087      	b.n	8005ae8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	ee07 3a90 	vmov	s15, r3
 80059de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059e2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005b44 <HAL_RCC_GetSysClockFreq+0x2e8>
 80059e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059ea:	4b51      	ldr	r3, [pc, #324]	; (8005b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059f2:	ee07 3a90 	vmov	s15, r3
 80059f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80059fe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005b40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a1a:	e065      	b.n	8005ae8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	ee07 3a90 	vmov	s15, r3
 8005a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a26:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005b48 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a2e:	4b40      	ldr	r3, [pc, #256]	; (8005b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a36:	ee07 3a90 	vmov	s15, r3
 8005a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a42:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005b40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a5e:	e043      	b.n	8005ae8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	ee07 3a90 	vmov	s15, r3
 8005a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a6a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005b4c <HAL_RCC_GetSysClockFreq+0x2f0>
 8005a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a72:	4b2f      	ldr	r3, [pc, #188]	; (8005b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a7a:	ee07 3a90 	vmov	s15, r3
 8005a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a82:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a86:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005b40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005aa2:	e021      	b.n	8005ae8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	ee07 3a90 	vmov	s15, r3
 8005aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aae:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005b48 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ab6:	4b1e      	ldr	r3, [pc, #120]	; (8005b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005abe:	ee07 3a90 	vmov	s15, r3
 8005ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ac6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005aca:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005b40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ad6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ae2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ae6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005ae8:	4b11      	ldr	r3, [pc, #68]	; (8005b30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aec:	0a5b      	lsrs	r3, r3, #9
 8005aee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005af2:	3301      	adds	r3, #1
 8005af4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	ee07 3a90 	vmov	s15, r3
 8005afc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b00:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b0c:	ee17 3a90 	vmov	r3, s15
 8005b10:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005b12:	e005      	b.n	8005b20 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005b14:	2300      	movs	r3, #0
 8005b16:	61bb      	str	r3, [r7, #24]
    break;
 8005b18:	e002      	b.n	8005b20 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005b1a:	4b07      	ldr	r3, [pc, #28]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005b1c:	61bb      	str	r3, [r7, #24]
    break;
 8005b1e:	bf00      	nop
  }

  return sysclockfreq;
 8005b20:	69bb      	ldr	r3, [r7, #24]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3724      	adds	r7, #36	; 0x24
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	58024400 	.word	0x58024400
 8005b34:	03d09000 	.word	0x03d09000
 8005b38:	003d0900 	.word	0x003d0900
 8005b3c:	017d7840 	.word	0x017d7840
 8005b40:	46000000 	.word	0x46000000
 8005b44:	4c742400 	.word	0x4c742400
 8005b48:	4a742400 	.word	0x4a742400
 8005b4c:	4bbebc20 	.word	0x4bbebc20

08005b50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005b56:	f7ff fe81 	bl	800585c <HAL_RCC_GetSysClockFreq>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	4b10      	ldr	r3, [pc, #64]	; (8005ba0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	0a1b      	lsrs	r3, r3, #8
 8005b62:	f003 030f 	and.w	r3, r3, #15
 8005b66:	490f      	ldr	r1, [pc, #60]	; (8005ba4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005b68:	5ccb      	ldrb	r3, [r1, r3]
 8005b6a:	f003 031f 	and.w	r3, r3, #31
 8005b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b72:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005b74:	4b0a      	ldr	r3, [pc, #40]	; (8005ba0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	f003 030f 	and.w	r3, r3, #15
 8005b7c:	4a09      	ldr	r2, [pc, #36]	; (8005ba4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005b7e:	5cd3      	ldrb	r3, [r2, r3]
 8005b80:	f003 031f 	and.w	r3, r3, #31
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	fa22 f303 	lsr.w	r3, r2, r3
 8005b8a:	4a07      	ldr	r2, [pc, #28]	; (8005ba8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005b8c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005b8e:	4a07      	ldr	r2, [pc, #28]	; (8005bac <HAL_RCC_GetHCLKFreq+0x5c>)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005b94:	4b04      	ldr	r3, [pc, #16]	; (8005ba8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005b96:	681b      	ldr	r3, [r3, #0]
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3708      	adds	r7, #8
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	58024400 	.word	0x58024400
 8005ba4:	0800b4ec 	.word	0x0800b4ec
 8005ba8:	24000004 	.word	0x24000004
 8005bac:	24000000 	.word	0x24000000

08005bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005bb4:	f7ff ffcc 	bl	8005b50 <HAL_RCC_GetHCLKFreq>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	4b06      	ldr	r3, [pc, #24]	; (8005bd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bbc:	69db      	ldr	r3, [r3, #28]
 8005bbe:	091b      	lsrs	r3, r3, #4
 8005bc0:	f003 0307 	and.w	r3, r3, #7
 8005bc4:	4904      	ldr	r1, [pc, #16]	; (8005bd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005bc6:	5ccb      	ldrb	r3, [r1, r3]
 8005bc8:	f003 031f 	and.w	r3, r3, #31
 8005bcc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	58024400 	.word	0x58024400
 8005bd8:	0800b4ec 	.word	0x0800b4ec

08005bdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005be0:	f7ff ffb6 	bl	8005b50 <HAL_RCC_GetHCLKFreq>
 8005be4:	4602      	mov	r2, r0
 8005be6:	4b06      	ldr	r3, [pc, #24]	; (8005c00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005be8:	69db      	ldr	r3, [r3, #28]
 8005bea:	0a1b      	lsrs	r3, r3, #8
 8005bec:	f003 0307 	and.w	r3, r3, #7
 8005bf0:	4904      	ldr	r1, [pc, #16]	; (8005c04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005bf2:	5ccb      	ldrb	r3, [r1, r3]
 8005bf4:	f003 031f 	and.w	r3, r3, #31
 8005bf8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	bd80      	pop	{r7, pc}
 8005c00:	58024400 	.word	0x58024400
 8005c04:	0800b4ec 	.word	0x0800b4ec

08005c08 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b086      	sub	sp, #24
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c10:	2300      	movs	r3, #0
 8005c12:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c14:	2300      	movs	r3, #0
 8005c16:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d03f      	beq.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c28:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005c2c:	d02a      	beq.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005c2e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005c32:	d824      	bhi.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005c34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c38:	d018      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005c3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c3e:	d81e      	bhi.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d003      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005c44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c48:	d007      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005c4a:	e018      	b.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c4c:	4ba3      	ldr	r3, [pc, #652]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c50:	4aa2      	ldr	r2, [pc, #648]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005c52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005c58:	e015      	b.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	3304      	adds	r3, #4
 8005c5e:	2102      	movs	r1, #2
 8005c60:	4618      	mov	r0, r3
 8005c62:	f001 f9d5 	bl	8007010 <RCCEx_PLL2_Config>
 8005c66:	4603      	mov	r3, r0
 8005c68:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005c6a:	e00c      	b.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	3324      	adds	r3, #36	; 0x24
 8005c70:	2102      	movs	r1, #2
 8005c72:	4618      	mov	r0, r3
 8005c74:	f001 fa7e 	bl	8007174 <RCCEx_PLL3_Config>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005c7c:	e003      	b.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	75fb      	strb	r3, [r7, #23]
      break;
 8005c82:	e000      	b.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005c84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c86:	7dfb      	ldrb	r3, [r7, #23]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d109      	bne.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005c8c:	4b93      	ldr	r3, [pc, #588]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c98:	4990      	ldr	r1, [pc, #576]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	650b      	str	r3, [r1, #80]	; 0x50
 8005c9e:	e001      	b.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ca0:	7dfb      	ldrb	r3, [r7, #23]
 8005ca2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d03d      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cb4:	2b04      	cmp	r3, #4
 8005cb6:	d826      	bhi.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005cb8:	a201      	add	r2, pc, #4	; (adr r2, 8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cbe:	bf00      	nop
 8005cc0:	08005cd5 	.word	0x08005cd5
 8005cc4:	08005ce3 	.word	0x08005ce3
 8005cc8:	08005cf5 	.word	0x08005cf5
 8005ccc:	08005d0d 	.word	0x08005d0d
 8005cd0:	08005d0d 	.word	0x08005d0d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cd4:	4b81      	ldr	r3, [pc, #516]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd8:	4a80      	ldr	r2, [pc, #512]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005cda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cde:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005ce0:	e015      	b.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	3304      	adds	r3, #4
 8005ce6:	2100      	movs	r1, #0
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f001 f991 	bl	8007010 <RCCEx_PLL2_Config>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005cf2:	e00c      	b.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	3324      	adds	r3, #36	; 0x24
 8005cf8:	2100      	movs	r1, #0
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f001 fa3a 	bl	8007174 <RCCEx_PLL3_Config>
 8005d00:	4603      	mov	r3, r0
 8005d02:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005d04:	e003      	b.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	75fb      	strb	r3, [r7, #23]
      break;
 8005d0a:	e000      	b.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005d0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d0e:	7dfb      	ldrb	r3, [r7, #23]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d109      	bne.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d14:	4b71      	ldr	r3, [pc, #452]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d18:	f023 0207 	bic.w	r2, r3, #7
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d20:	496e      	ldr	r1, [pc, #440]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	650b      	str	r3, [r1, #80]	; 0x50
 8005d26:	e001      	b.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d28:	7dfb      	ldrb	r3, [r7, #23]
 8005d2a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d042      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d40:	d02b      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005d42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d46:	d825      	bhi.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005d48:	2bc0      	cmp	r3, #192	; 0xc0
 8005d4a:	d028      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005d4c:	2bc0      	cmp	r3, #192	; 0xc0
 8005d4e:	d821      	bhi.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005d50:	2b80      	cmp	r3, #128	; 0x80
 8005d52:	d016      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005d54:	2b80      	cmp	r3, #128	; 0x80
 8005d56:	d81d      	bhi.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d002      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005d5c:	2b40      	cmp	r3, #64	; 0x40
 8005d5e:	d007      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005d60:	e018      	b.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d62:	4b5e      	ldr	r3, [pc, #376]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d66:	4a5d      	ldr	r2, [pc, #372]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005d6e:	e017      	b.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	3304      	adds	r3, #4
 8005d74:	2100      	movs	r1, #0
 8005d76:	4618      	mov	r0, r3
 8005d78:	f001 f94a 	bl	8007010 <RCCEx_PLL2_Config>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005d80:	e00e      	b.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	3324      	adds	r3, #36	; 0x24
 8005d86:	2100      	movs	r1, #0
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f001 f9f3 	bl	8007174 <RCCEx_PLL3_Config>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005d92:	e005      	b.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	75fb      	strb	r3, [r7, #23]
      break;
 8005d98:	e002      	b.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005d9a:	bf00      	nop
 8005d9c:	e000      	b.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005d9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005da0:	7dfb      	ldrb	r3, [r7, #23]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d109      	bne.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005da6:	4b4d      	ldr	r3, [pc, #308]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005daa:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005db2:	494a      	ldr	r1, [pc, #296]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005db4:	4313      	orrs	r3, r2
 8005db6:	650b      	str	r3, [r1, #80]	; 0x50
 8005db8:	e001      	b.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dba:	7dfb      	ldrb	r3, [r7, #23]
 8005dbc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d049      	beq.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005dd0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005dd4:	d030      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005dd6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005dda:	d82a      	bhi.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005ddc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005de0:	d02c      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005de2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005de6:	d824      	bhi.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005de8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dec:	d018      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005dee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005df2:	d81e      	bhi.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d003      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005df8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005dfc:	d007      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005dfe:	e018      	b.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e00:	4b36      	ldr	r3, [pc, #216]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e04:	4a35      	ldr	r2, [pc, #212]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005e06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005e0c:	e017      	b.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	3304      	adds	r3, #4
 8005e12:	2100      	movs	r1, #0
 8005e14:	4618      	mov	r0, r3
 8005e16:	f001 f8fb 	bl	8007010 <RCCEx_PLL2_Config>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005e1e:	e00e      	b.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	3324      	adds	r3, #36	; 0x24
 8005e24:	2100      	movs	r1, #0
 8005e26:	4618      	mov	r0, r3
 8005e28:	f001 f9a4 	bl	8007174 <RCCEx_PLL3_Config>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005e30:	e005      	b.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	75fb      	strb	r3, [r7, #23]
      break;
 8005e36:	e002      	b.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005e38:	bf00      	nop
 8005e3a:	e000      	b.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005e3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e3e:	7dfb      	ldrb	r3, [r7, #23]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d10a      	bne.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005e44:	4b25      	ldr	r3, [pc, #148]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e48:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005e52:	4922      	ldr	r1, [pc, #136]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005e54:	4313      	orrs	r3, r2
 8005e56:	658b      	str	r3, [r1, #88]	; 0x58
 8005e58:	e001      	b.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e5a:	7dfb      	ldrb	r3, [r7, #23]
 8005e5c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d04b      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005e70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e74:	d030      	beq.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005e76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e7a:	d82a      	bhi.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005e7c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005e80:	d02e      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8005e82:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005e86:	d824      	bhi.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005e88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e8c:	d018      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005e8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e92:	d81e      	bhi.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d003      	beq.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005e98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e9c:	d007      	beq.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005e9e:	e018      	b.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ea0:	4b0e      	ldr	r3, [pc, #56]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea4:	4a0d      	ldr	r2, [pc, #52]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005ea6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005eaa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005eac:	e019      	b.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	3304      	adds	r3, #4
 8005eb2:	2100      	movs	r1, #0
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f001 f8ab 	bl	8007010 <RCCEx_PLL2_Config>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005ebe:	e010      	b.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	3324      	adds	r3, #36	; 0x24
 8005ec4:	2100      	movs	r1, #0
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f001 f954 	bl	8007174 <RCCEx_PLL3_Config>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005ed0:	e007      	b.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	75fb      	strb	r3, [r7, #23]
      break;
 8005ed6:	e004      	b.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8005ed8:	bf00      	nop
 8005eda:	e002      	b.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005edc:	58024400 	.word	0x58024400
      break;
 8005ee0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ee2:	7dfb      	ldrb	r3, [r7, #23]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d10a      	bne.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005ee8:	4b99      	ldr	r3, [pc, #612]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eec:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005ef6:	4996      	ldr	r1, [pc, #600]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	658b      	str	r3, [r1, #88]	; 0x58
 8005efc:	e001      	b.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005efe:	7dfb      	ldrb	r3, [r7, #23]
 8005f00:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d032      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f12:	2b30      	cmp	r3, #48	; 0x30
 8005f14:	d01c      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8005f16:	2b30      	cmp	r3, #48	; 0x30
 8005f18:	d817      	bhi.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005f1a:	2b20      	cmp	r3, #32
 8005f1c:	d00c      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8005f1e:	2b20      	cmp	r3, #32
 8005f20:	d813      	bhi.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d016      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8005f26:	2b10      	cmp	r3, #16
 8005f28:	d10f      	bne.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f2a:	4b89      	ldr	r3, [pc, #548]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f2e:	4a88      	ldr	r2, [pc, #544]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f34:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005f36:	e00e      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	3304      	adds	r3, #4
 8005f3c:	2102      	movs	r1, #2
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f001 f866 	bl	8007010 <RCCEx_PLL2_Config>
 8005f44:	4603      	mov	r3, r0
 8005f46:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005f48:	e005      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	75fb      	strb	r3, [r7, #23]
      break;
 8005f4e:	e002      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005f50:	bf00      	nop
 8005f52:	e000      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005f54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f56:	7dfb      	ldrb	r3, [r7, #23]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d109      	bne.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005f5c:	4b7c      	ldr	r3, [pc, #496]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f60:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f68:	4979      	ldr	r1, [pc, #484]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005f6e:	e001      	b.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f70:	7dfb      	ldrb	r3, [r7, #23]
 8005f72:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d047      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f88:	d030      	beq.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005f8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f8e:	d82a      	bhi.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005f90:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f94:	d02c      	beq.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005f96:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f9a:	d824      	bhi.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005f9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fa0:	d018      	beq.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8005fa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fa6:	d81e      	bhi.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d003      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8005fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fb0:	d007      	beq.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8005fb2:	e018      	b.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fb4:	4b66      	ldr	r3, [pc, #408]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb8:	4a65      	ldr	r2, [pc, #404]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005fba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005fc0:	e017      	b.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	3304      	adds	r3, #4
 8005fc6:	2100      	movs	r1, #0
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f001 f821 	bl	8007010 <RCCEx_PLL2_Config>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005fd2:	e00e      	b.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	3324      	adds	r3, #36	; 0x24
 8005fd8:	2100      	movs	r1, #0
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f001 f8ca 	bl	8007174 <RCCEx_PLL3_Config>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005fe4:	e005      	b.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	75fb      	strb	r3, [r7, #23]
      break;
 8005fea:	e002      	b.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005fec:	bf00      	nop
 8005fee:	e000      	b.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005ff0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ff2:	7dfb      	ldrb	r3, [r7, #23]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d109      	bne.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005ff8:	4b55      	ldr	r3, [pc, #340]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005ffa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ffc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006004:	4952      	ldr	r1, [pc, #328]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006006:	4313      	orrs	r3, r2
 8006008:	650b      	str	r3, [r1, #80]	; 0x50
 800600a:	e001      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800600c:	7dfb      	ldrb	r3, [r7, #23]
 800600e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d049      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006020:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006024:	d02e      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006026:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800602a:	d828      	bhi.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800602c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006030:	d02a      	beq.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8006032:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006036:	d822      	bhi.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006038:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800603c:	d026      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x484>
 800603e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006042:	d81c      	bhi.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006044:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006048:	d010      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800604a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800604e:	d816      	bhi.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006050:	2b00      	cmp	r3, #0
 8006052:	d01d      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8006054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006058:	d111      	bne.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	3304      	adds	r3, #4
 800605e:	2101      	movs	r1, #1
 8006060:	4618      	mov	r0, r3
 8006062:	f000 ffd5 	bl	8007010 <RCCEx_PLL2_Config>
 8006066:	4603      	mov	r3, r0
 8006068:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800606a:	e012      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	3324      	adds	r3, #36	; 0x24
 8006070:	2101      	movs	r1, #1
 8006072:	4618      	mov	r0, r3
 8006074:	f001 f87e 	bl	8007174 <RCCEx_PLL3_Config>
 8006078:	4603      	mov	r3, r0
 800607a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800607c:	e009      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	75fb      	strb	r3, [r7, #23]
      break;
 8006082:	e006      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006084:	bf00      	nop
 8006086:	e004      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006088:	bf00      	nop
 800608a:	e002      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800608c:	bf00      	nop
 800608e:	e000      	b.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006090:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006092:	7dfb      	ldrb	r3, [r7, #23]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d109      	bne.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006098:	4b2d      	ldr	r3, [pc, #180]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800609a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800609c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060a4:	492a      	ldr	r1, [pc, #168]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	650b      	str	r3, [r1, #80]	; 0x50
 80060aa:	e001      	b.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060ac:	7dfb      	ldrb	r3, [r7, #23]
 80060ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d04d      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80060c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80060c6:	d02e      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80060c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80060cc:	d828      	bhi.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80060ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060d2:	d02a      	beq.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x522>
 80060d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060d8:	d822      	bhi.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80060da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80060de:	d026      	beq.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x526>
 80060e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80060e4:	d81c      	bhi.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80060e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060ea:	d010      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x506>
 80060ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060f0:	d816      	bhi.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d01d      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80060f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80060fa:	d111      	bne.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	3304      	adds	r3, #4
 8006100:	2101      	movs	r1, #1
 8006102:	4618      	mov	r0, r3
 8006104:	f000 ff84 	bl	8007010 <RCCEx_PLL2_Config>
 8006108:	4603      	mov	r3, r0
 800610a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800610c:	e012      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	3324      	adds	r3, #36	; 0x24
 8006112:	2101      	movs	r1, #1
 8006114:	4618      	mov	r0, r3
 8006116:	f001 f82d 	bl	8007174 <RCCEx_PLL3_Config>
 800611a:	4603      	mov	r3, r0
 800611c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800611e:	e009      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	75fb      	strb	r3, [r7, #23]
      break;
 8006124:	e006      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006126:	bf00      	nop
 8006128:	e004      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800612a:	bf00      	nop
 800612c:	e002      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800612e:	bf00      	nop
 8006130:	e000      	b.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006132:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006134:	7dfb      	ldrb	r3, [r7, #23]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d10c      	bne.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800613a:	4b05      	ldr	r3, [pc, #20]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800613c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800613e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006148:	4901      	ldr	r1, [pc, #4]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800614a:	4313      	orrs	r3, r2
 800614c:	658b      	str	r3, [r1, #88]	; 0x58
 800614e:	e003      	b.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006150:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006154:	7dfb      	ldrb	r3, [r7, #23]
 8006156:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d02f      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006168:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800616c:	d00e      	beq.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x584>
 800616e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006172:	d814      	bhi.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8006174:	2b00      	cmp	r3, #0
 8006176:	d015      	beq.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8006178:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800617c:	d10f      	bne.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800617e:	4baf      	ldr	r3, [pc, #700]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006182:	4aae      	ldr	r2, [pc, #696]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006188:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800618a:	e00c      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	3304      	adds	r3, #4
 8006190:	2101      	movs	r1, #1
 8006192:	4618      	mov	r0, r3
 8006194:	f000 ff3c 	bl	8007010 <RCCEx_PLL2_Config>
 8006198:	4603      	mov	r3, r0
 800619a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800619c:	e003      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	75fb      	strb	r3, [r7, #23]
      break;
 80061a2:	e000      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80061a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061a6:	7dfb      	ldrb	r3, [r7, #23]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d109      	bne.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80061ac:	4ba3      	ldr	r3, [pc, #652]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80061ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061b0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061b8:	49a0      	ldr	r1, [pc, #640]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80061ba:	4313      	orrs	r3, r2
 80061bc:	650b      	str	r3, [r1, #80]	; 0x50
 80061be:	e001      	b.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061c0:	7dfb      	ldrb	r3, [r7, #23]
 80061c2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d032      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061d4:	2b03      	cmp	r3, #3
 80061d6:	d81b      	bhi.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80061d8:	a201      	add	r2, pc, #4	; (adr r2, 80061e0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80061da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061de:	bf00      	nop
 80061e0:	08006217 	.word	0x08006217
 80061e4:	080061f1 	.word	0x080061f1
 80061e8:	080061ff 	.word	0x080061ff
 80061ec:	08006217 	.word	0x08006217
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061f0:	4b92      	ldr	r3, [pc, #584]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80061f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f4:	4a91      	ldr	r2, [pc, #580]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80061f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80061fc:	e00c      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	3304      	adds	r3, #4
 8006202:	2102      	movs	r1, #2
 8006204:	4618      	mov	r0, r3
 8006206:	f000 ff03 	bl	8007010 <RCCEx_PLL2_Config>
 800620a:	4603      	mov	r3, r0
 800620c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800620e:	e003      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	75fb      	strb	r3, [r7, #23]
      break;
 8006214:	e000      	b.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8006216:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006218:	7dfb      	ldrb	r3, [r7, #23]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d109      	bne.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800621e:	4b87      	ldr	r3, [pc, #540]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006222:	f023 0203 	bic.w	r2, r3, #3
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800622a:	4984      	ldr	r1, [pc, #528]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800622c:	4313      	orrs	r3, r2
 800622e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006230:	e001      	b.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006232:	7dfb      	ldrb	r3, [r7, #23]
 8006234:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800623e:	2b00      	cmp	r3, #0
 8006240:	f000 8086 	beq.w	8006350 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006244:	4b7e      	ldr	r3, [pc, #504]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a7d      	ldr	r2, [pc, #500]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800624a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800624e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006250:	f7fb faee 	bl	8001830 <HAL_GetTick>
 8006254:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006256:	e009      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006258:	f7fb faea 	bl	8001830 <HAL_GetTick>
 800625c:	4602      	mov	r2, r0
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	2b64      	cmp	r3, #100	; 0x64
 8006264:	d902      	bls.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006266:	2303      	movs	r3, #3
 8006268:	75fb      	strb	r3, [r7, #23]
        break;
 800626a:	e005      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800626c:	4b74      	ldr	r3, [pc, #464]	; (8006440 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006274:	2b00      	cmp	r3, #0
 8006276:	d0ef      	beq.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006278:	7dfb      	ldrb	r3, [r7, #23]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d166      	bne.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800627e:	4b6f      	ldr	r3, [pc, #444]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006280:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006288:	4053      	eors	r3, r2
 800628a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800628e:	2b00      	cmp	r3, #0
 8006290:	d013      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006292:	4b6a      	ldr	r3, [pc, #424]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006296:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800629a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800629c:	4b67      	ldr	r3, [pc, #412]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800629e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062a0:	4a66      	ldr	r2, [pc, #408]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80062a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062a6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80062a8:	4b64      	ldr	r3, [pc, #400]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80062aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ac:	4a63      	ldr	r2, [pc, #396]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80062ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062b2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80062b4:	4a61      	ldr	r2, [pc, #388]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80062c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062c4:	d115      	bne.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062c6:	f7fb fab3 	bl	8001830 <HAL_GetTick>
 80062ca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062cc:	e00b      	b.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062ce:	f7fb faaf 	bl	8001830 <HAL_GetTick>
 80062d2:	4602      	mov	r2, r0
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80062dc:	4293      	cmp	r3, r2
 80062de:	d902      	bls.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80062e0:	2303      	movs	r3, #3
 80062e2:	75fb      	strb	r3, [r7, #23]
            break;
 80062e4:	e005      	b.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062e6:	4b55      	ldr	r3, [pc, #340]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80062e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ea:	f003 0302 	and.w	r3, r3, #2
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d0ed      	beq.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80062f2:	7dfb      	ldrb	r3, [r7, #23]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d126      	bne.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80062fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006302:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006306:	d10d      	bne.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006308:	4b4c      	ldr	r3, [pc, #304]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006316:	0919      	lsrs	r1, r3, #4
 8006318:	4b4a      	ldr	r3, [pc, #296]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800631a:	400b      	ands	r3, r1
 800631c:	4947      	ldr	r1, [pc, #284]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800631e:	4313      	orrs	r3, r2
 8006320:	610b      	str	r3, [r1, #16]
 8006322:	e005      	b.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006324:	4b45      	ldr	r3, [pc, #276]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	4a44      	ldr	r2, [pc, #272]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800632a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800632e:	6113      	str	r3, [r2, #16]
 8006330:	4b42      	ldr	r3, [pc, #264]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006332:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800633a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800633e:	493f      	ldr	r1, [pc, #252]	; (800643c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006340:	4313      	orrs	r3, r2
 8006342:	670b      	str	r3, [r1, #112]	; 0x70
 8006344:	e004      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006346:	7dfb      	ldrb	r3, [r7, #23]
 8006348:	75bb      	strb	r3, [r7, #22]
 800634a:	e001      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800634c:	7dfb      	ldrb	r3, [r7, #23]
 800634e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0301 	and.w	r3, r3, #1
 8006358:	2b00      	cmp	r3, #0
 800635a:	f000 8085 	beq.w	8006468 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006362:	2b28      	cmp	r3, #40	; 0x28
 8006364:	d866      	bhi.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006366:	a201      	add	r2, pc, #4	; (adr r2, 800636c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800636c:	08006449 	.word	0x08006449
 8006370:	08006435 	.word	0x08006435
 8006374:	08006435 	.word	0x08006435
 8006378:	08006435 	.word	0x08006435
 800637c:	08006435 	.word	0x08006435
 8006380:	08006435 	.word	0x08006435
 8006384:	08006435 	.word	0x08006435
 8006388:	08006435 	.word	0x08006435
 800638c:	08006411 	.word	0x08006411
 8006390:	08006435 	.word	0x08006435
 8006394:	08006435 	.word	0x08006435
 8006398:	08006435 	.word	0x08006435
 800639c:	08006435 	.word	0x08006435
 80063a0:	08006435 	.word	0x08006435
 80063a4:	08006435 	.word	0x08006435
 80063a8:	08006435 	.word	0x08006435
 80063ac:	08006423 	.word	0x08006423
 80063b0:	08006435 	.word	0x08006435
 80063b4:	08006435 	.word	0x08006435
 80063b8:	08006435 	.word	0x08006435
 80063bc:	08006435 	.word	0x08006435
 80063c0:	08006435 	.word	0x08006435
 80063c4:	08006435 	.word	0x08006435
 80063c8:	08006435 	.word	0x08006435
 80063cc:	08006449 	.word	0x08006449
 80063d0:	08006435 	.word	0x08006435
 80063d4:	08006435 	.word	0x08006435
 80063d8:	08006435 	.word	0x08006435
 80063dc:	08006435 	.word	0x08006435
 80063e0:	08006435 	.word	0x08006435
 80063e4:	08006435 	.word	0x08006435
 80063e8:	08006435 	.word	0x08006435
 80063ec:	08006449 	.word	0x08006449
 80063f0:	08006435 	.word	0x08006435
 80063f4:	08006435 	.word	0x08006435
 80063f8:	08006435 	.word	0x08006435
 80063fc:	08006435 	.word	0x08006435
 8006400:	08006435 	.word	0x08006435
 8006404:	08006435 	.word	0x08006435
 8006408:	08006435 	.word	0x08006435
 800640c:	08006449 	.word	0x08006449
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	3304      	adds	r3, #4
 8006414:	2101      	movs	r1, #1
 8006416:	4618      	mov	r0, r3
 8006418:	f000 fdfa 	bl	8007010 <RCCEx_PLL2_Config>
 800641c:	4603      	mov	r3, r0
 800641e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006420:	e013      	b.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	3324      	adds	r3, #36	; 0x24
 8006426:	2101      	movs	r1, #1
 8006428:	4618      	mov	r0, r3
 800642a:	f000 fea3 	bl	8007174 <RCCEx_PLL3_Config>
 800642e:	4603      	mov	r3, r0
 8006430:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006432:	e00a      	b.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	75fb      	strb	r3, [r7, #23]
      break;
 8006438:	e007      	b.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x842>
 800643a:	bf00      	nop
 800643c:	58024400 	.word	0x58024400
 8006440:	58024800 	.word	0x58024800
 8006444:	00ffffcf 	.word	0x00ffffcf
      break;
 8006448:	bf00      	nop
    }

    if(ret == HAL_OK)
 800644a:	7dfb      	ldrb	r3, [r7, #23]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d109      	bne.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006450:	4b96      	ldr	r3, [pc, #600]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006454:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800645c:	4993      	ldr	r1, [pc, #588]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800645e:	4313      	orrs	r3, r2
 8006460:	654b      	str	r3, [r1, #84]	; 0x54
 8006462:	e001      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006464:	7dfb      	ldrb	r3, [r7, #23]
 8006466:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 0302 	and.w	r3, r3, #2
 8006470:	2b00      	cmp	r3, #0
 8006472:	d038      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006478:	2b05      	cmp	r3, #5
 800647a:	d821      	bhi.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800647c:	a201      	add	r2, pc, #4	; (adr r2, 8006484 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800647e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006482:	bf00      	nop
 8006484:	080064c7 	.word	0x080064c7
 8006488:	0800649d 	.word	0x0800649d
 800648c:	080064af 	.word	0x080064af
 8006490:	080064c7 	.word	0x080064c7
 8006494:	080064c7 	.word	0x080064c7
 8006498:	080064c7 	.word	0x080064c7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	3304      	adds	r3, #4
 80064a0:	2101      	movs	r1, #1
 80064a2:	4618      	mov	r0, r3
 80064a4:	f000 fdb4 	bl	8007010 <RCCEx_PLL2_Config>
 80064a8:	4603      	mov	r3, r0
 80064aa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80064ac:	e00c      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	3324      	adds	r3, #36	; 0x24
 80064b2:	2101      	movs	r1, #1
 80064b4:	4618      	mov	r0, r3
 80064b6:	f000 fe5d 	bl	8007174 <RCCEx_PLL3_Config>
 80064ba:	4603      	mov	r3, r0
 80064bc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80064be:	e003      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	75fb      	strb	r3, [r7, #23]
      break;
 80064c4:	e000      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80064c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064c8:	7dfb      	ldrb	r3, [r7, #23]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d109      	bne.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80064ce:	4b77      	ldr	r3, [pc, #476]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80064d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064d2:	f023 0207 	bic.w	r2, r3, #7
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064da:	4974      	ldr	r1, [pc, #464]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80064dc:	4313      	orrs	r3, r2
 80064de:	654b      	str	r3, [r1, #84]	; 0x54
 80064e0:	e001      	b.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064e2:	7dfb      	ldrb	r3, [r7, #23]
 80064e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0304 	and.w	r3, r3, #4
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d03a      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064f8:	2b05      	cmp	r3, #5
 80064fa:	d821      	bhi.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80064fc:	a201      	add	r2, pc, #4	; (adr r2, 8006504 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80064fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006502:	bf00      	nop
 8006504:	08006547 	.word	0x08006547
 8006508:	0800651d 	.word	0x0800651d
 800650c:	0800652f 	.word	0x0800652f
 8006510:	08006547 	.word	0x08006547
 8006514:	08006547 	.word	0x08006547
 8006518:	08006547 	.word	0x08006547
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	3304      	adds	r3, #4
 8006520:	2101      	movs	r1, #1
 8006522:	4618      	mov	r0, r3
 8006524:	f000 fd74 	bl	8007010 <RCCEx_PLL2_Config>
 8006528:	4603      	mov	r3, r0
 800652a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800652c:	e00c      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	3324      	adds	r3, #36	; 0x24
 8006532:	2101      	movs	r1, #1
 8006534:	4618      	mov	r0, r3
 8006536:	f000 fe1d 	bl	8007174 <RCCEx_PLL3_Config>
 800653a:	4603      	mov	r3, r0
 800653c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800653e:	e003      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	75fb      	strb	r3, [r7, #23]
      break;
 8006544:	e000      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8006546:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006548:	7dfb      	ldrb	r3, [r7, #23]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d10a      	bne.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800654e:	4b57      	ldr	r3, [pc, #348]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006552:	f023 0207 	bic.w	r2, r3, #7
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800655c:	4953      	ldr	r1, [pc, #332]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800655e:	4313      	orrs	r3, r2
 8006560:	658b      	str	r3, [r1, #88]	; 0x58
 8006562:	e001      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006564:	7dfb      	ldrb	r3, [r7, #23]
 8006566:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 0320 	and.w	r3, r3, #32
 8006570:	2b00      	cmp	r3, #0
 8006572:	d04b      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800657a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800657e:	d02e      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006580:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006584:	d828      	bhi.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800658a:	d02a      	beq.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800658c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006590:	d822      	bhi.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006592:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006596:	d026      	beq.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006598:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800659c:	d81c      	bhi.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800659e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065a2:	d010      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80065a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065a8:	d816      	bhi.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d01d      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80065ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065b2:	d111      	bne.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	3304      	adds	r3, #4
 80065b8:	2100      	movs	r1, #0
 80065ba:	4618      	mov	r0, r3
 80065bc:	f000 fd28 	bl	8007010 <RCCEx_PLL2_Config>
 80065c0:	4603      	mov	r3, r0
 80065c2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80065c4:	e012      	b.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	3324      	adds	r3, #36	; 0x24
 80065ca:	2102      	movs	r1, #2
 80065cc:	4618      	mov	r0, r3
 80065ce:	f000 fdd1 	bl	8007174 <RCCEx_PLL3_Config>
 80065d2:	4603      	mov	r3, r0
 80065d4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80065d6:	e009      	b.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	75fb      	strb	r3, [r7, #23]
      break;
 80065dc:	e006      	b.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80065de:	bf00      	nop
 80065e0:	e004      	b.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80065e2:	bf00      	nop
 80065e4:	e002      	b.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80065e6:	bf00      	nop
 80065e8:	e000      	b.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80065ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065ec:	7dfb      	ldrb	r3, [r7, #23]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d10a      	bne.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80065f2:	4b2e      	ldr	r3, [pc, #184]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80065f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065f6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006600:	492a      	ldr	r1, [pc, #168]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006602:	4313      	orrs	r3, r2
 8006604:	654b      	str	r3, [r1, #84]	; 0x54
 8006606:	e001      	b.n	800660c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006608:	7dfb      	ldrb	r3, [r7, #23]
 800660a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006614:	2b00      	cmp	r3, #0
 8006616:	d04d      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800661e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006622:	d02e      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006624:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006628:	d828      	bhi.n	800667c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800662a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800662e:	d02a      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006630:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006634:	d822      	bhi.n	800667c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006636:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800663a:	d026      	beq.n	800668a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800663c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006640:	d81c      	bhi.n	800667c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006642:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006646:	d010      	beq.n	800666a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8006648:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800664c:	d816      	bhi.n	800667c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800664e:	2b00      	cmp	r3, #0
 8006650:	d01d      	beq.n	800668e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8006652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006656:	d111      	bne.n	800667c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	3304      	adds	r3, #4
 800665c:	2100      	movs	r1, #0
 800665e:	4618      	mov	r0, r3
 8006660:	f000 fcd6 	bl	8007010 <RCCEx_PLL2_Config>
 8006664:	4603      	mov	r3, r0
 8006666:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006668:	e012      	b.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	3324      	adds	r3, #36	; 0x24
 800666e:	2102      	movs	r1, #2
 8006670:	4618      	mov	r0, r3
 8006672:	f000 fd7f 	bl	8007174 <RCCEx_PLL3_Config>
 8006676:	4603      	mov	r3, r0
 8006678:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800667a:	e009      	b.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	75fb      	strb	r3, [r7, #23]
      break;
 8006680:	e006      	b.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006682:	bf00      	nop
 8006684:	e004      	b.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006686:	bf00      	nop
 8006688:	e002      	b.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800668a:	bf00      	nop
 800668c:	e000      	b.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800668e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006690:	7dfb      	ldrb	r3, [r7, #23]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d10c      	bne.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006696:	4b05      	ldr	r3, [pc, #20]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800669a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80066a4:	4901      	ldr	r1, [pc, #4]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80066a6:	4313      	orrs	r3, r2
 80066a8:	658b      	str	r3, [r1, #88]	; 0x58
 80066aa:	e003      	b.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80066ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066b0:	7dfb      	ldrb	r3, [r7, #23]
 80066b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d04b      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80066c6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80066ca:	d02e      	beq.n	800672a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80066cc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80066d0:	d828      	bhi.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80066d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066d6:	d02a      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80066d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066dc:	d822      	bhi.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80066de:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80066e2:	d026      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80066e4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80066e8:	d81c      	bhi.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80066ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066ee:	d010      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80066f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066f4:	d816      	bhi.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d01d      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80066fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066fe:	d111      	bne.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	3304      	adds	r3, #4
 8006704:	2100      	movs	r1, #0
 8006706:	4618      	mov	r0, r3
 8006708:	f000 fc82 	bl	8007010 <RCCEx_PLL2_Config>
 800670c:	4603      	mov	r3, r0
 800670e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006710:	e012      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	3324      	adds	r3, #36	; 0x24
 8006716:	2102      	movs	r1, #2
 8006718:	4618      	mov	r0, r3
 800671a:	f000 fd2b 	bl	8007174 <RCCEx_PLL3_Config>
 800671e:	4603      	mov	r3, r0
 8006720:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006722:	e009      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	75fb      	strb	r3, [r7, #23]
      break;
 8006728:	e006      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800672a:	bf00      	nop
 800672c:	e004      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800672e:	bf00      	nop
 8006730:	e002      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006732:	bf00      	nop
 8006734:	e000      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006736:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006738:	7dfb      	ldrb	r3, [r7, #23]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d10a      	bne.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800673e:	4b9d      	ldr	r3, [pc, #628]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006742:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800674c:	4999      	ldr	r1, [pc, #612]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800674e:	4313      	orrs	r3, r2
 8006750:	658b      	str	r3, [r1, #88]	; 0x58
 8006752:	e001      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006754:	7dfb      	ldrb	r3, [r7, #23]
 8006756:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 0308 	and.w	r3, r3, #8
 8006760:	2b00      	cmp	r3, #0
 8006762:	d01a      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800676a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800676e:	d10a      	bne.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	3324      	adds	r3, #36	; 0x24
 8006774:	2102      	movs	r1, #2
 8006776:	4618      	mov	r0, r3
 8006778:	f000 fcfc 	bl	8007174 <RCCEx_PLL3_Config>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d001      	beq.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006786:	4b8b      	ldr	r3, [pc, #556]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800678a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006794:	4987      	ldr	r1, [pc, #540]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006796:	4313      	orrs	r3, r2
 8006798:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 0310 	and.w	r3, r3, #16
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d01a      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067b0:	d10a      	bne.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	3324      	adds	r3, #36	; 0x24
 80067b6:	2102      	movs	r1, #2
 80067b8:	4618      	mov	r0, r3
 80067ba:	f000 fcdb 	bl	8007174 <RCCEx_PLL3_Config>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d001      	beq.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80067c8:	4b7a      	ldr	r3, [pc, #488]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80067ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067d6:	4977      	ldr	r1, [pc, #476]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80067d8:	4313      	orrs	r3, r2
 80067da:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d034      	beq.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80067ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067f2:	d01d      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80067f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067f8:	d817      	bhi.n	800682a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d003      	beq.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80067fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006802:	d009      	beq.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8006804:	e011      	b.n	800682a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	3304      	adds	r3, #4
 800680a:	2100      	movs	r1, #0
 800680c:	4618      	mov	r0, r3
 800680e:	f000 fbff 	bl	8007010 <RCCEx_PLL2_Config>
 8006812:	4603      	mov	r3, r0
 8006814:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006816:	e00c      	b.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	3324      	adds	r3, #36	; 0x24
 800681c:	2102      	movs	r1, #2
 800681e:	4618      	mov	r0, r3
 8006820:	f000 fca8 	bl	8007174 <RCCEx_PLL3_Config>
 8006824:	4603      	mov	r3, r0
 8006826:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006828:	e003      	b.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	75fb      	strb	r3, [r7, #23]
      break;
 800682e:	e000      	b.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8006830:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006832:	7dfb      	ldrb	r3, [r7, #23]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d10a      	bne.n	800684e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006838:	4b5e      	ldr	r3, [pc, #376]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800683a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800683c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006846:	495b      	ldr	r1, [pc, #364]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006848:	4313      	orrs	r3, r2
 800684a:	658b      	str	r3, [r1, #88]	; 0x58
 800684c:	e001      	b.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800684e:	7dfb      	ldrb	r3, [r7, #23]
 8006850:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800685a:	2b00      	cmp	r3, #0
 800685c:	d033      	beq.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006864:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006868:	d01c      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800686a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800686e:	d816      	bhi.n	800689e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8006870:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006874:	d003      	beq.n	800687e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8006876:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800687a:	d007      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800687c:	e00f      	b.n	800689e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800687e:	4b4d      	ldr	r3, [pc, #308]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006882:	4a4c      	ldr	r2, [pc, #304]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006888:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800688a:	e00c      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	3324      	adds	r3, #36	; 0x24
 8006890:	2101      	movs	r1, #1
 8006892:	4618      	mov	r0, r3
 8006894:	f000 fc6e 	bl	8007174 <RCCEx_PLL3_Config>
 8006898:	4603      	mov	r3, r0
 800689a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800689c:	e003      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	75fb      	strb	r3, [r7, #23]
      break;
 80068a2:	e000      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80068a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068a6:	7dfb      	ldrb	r3, [r7, #23]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d10a      	bne.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80068ac:	4b41      	ldr	r3, [pc, #260]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80068ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068ba:	493e      	ldr	r1, [pc, #248]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80068bc:	4313      	orrs	r3, r2
 80068be:	654b      	str	r3, [r1, #84]	; 0x54
 80068c0:	e001      	b.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068c2:	7dfb      	ldrb	r3, [r7, #23]
 80068c4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d029      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d003      	beq.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80068da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068de:	d007      	beq.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80068e0:	e00f      	b.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068e2:	4b34      	ldr	r3, [pc, #208]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80068e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e6:	4a33      	ldr	r2, [pc, #204]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80068e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80068ee:	e00b      	b.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	3304      	adds	r3, #4
 80068f4:	2102      	movs	r1, #2
 80068f6:	4618      	mov	r0, r3
 80068f8:	f000 fb8a 	bl	8007010 <RCCEx_PLL2_Config>
 80068fc:	4603      	mov	r3, r0
 80068fe:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006900:	e002      	b.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	75fb      	strb	r3, [r7, #23]
      break;
 8006906:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006908:	7dfb      	ldrb	r3, [r7, #23]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d109      	bne.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800690e:	4b29      	ldr	r3, [pc, #164]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006912:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800691a:	4926      	ldr	r1, [pc, #152]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800691c:	4313      	orrs	r3, r2
 800691e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006920:	e001      	b.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006922:	7dfb      	ldrb	r3, [r7, #23]
 8006924:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800692e:	2b00      	cmp	r3, #0
 8006930:	d00a      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	3324      	adds	r3, #36	; 0x24
 8006936:	2102      	movs	r1, #2
 8006938:	4618      	mov	r0, r3
 800693a:	f000 fc1b 	bl	8007174 <RCCEx_PLL3_Config>
 800693e:	4603      	mov	r3, r0
 8006940:	2b00      	cmp	r3, #0
 8006942:	d001      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006950:	2b00      	cmp	r3, #0
 8006952:	d033      	beq.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006958:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800695c:	d017      	beq.n	800698e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800695e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006962:	d811      	bhi.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006968:	d013      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800696a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800696e:	d80b      	bhi.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006970:	2b00      	cmp	r3, #0
 8006972:	d010      	beq.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8006974:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006978:	d106      	bne.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800697a:	4b0e      	ldr	r3, [pc, #56]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800697c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800697e:	4a0d      	ldr	r2, [pc, #52]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006984:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006986:	e007      	b.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	75fb      	strb	r3, [r7, #23]
      break;
 800698c:	e004      	b.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800698e:	bf00      	nop
 8006990:	e002      	b.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006992:	bf00      	nop
 8006994:	e000      	b.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006996:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006998:	7dfb      	ldrb	r3, [r7, #23]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d10c      	bne.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800699e:	4b05      	ldr	r3, [pc, #20]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80069a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069aa:	4902      	ldr	r1, [pc, #8]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80069ac:	4313      	orrs	r3, r2
 80069ae:	654b      	str	r3, [r1, #84]	; 0x54
 80069b0:	e004      	b.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80069b2:	bf00      	nop
 80069b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069b8:	7dfb      	ldrb	r3, [r7, #23]
 80069ba:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d008      	beq.n	80069da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80069c8:	4b31      	ldr	r3, [pc, #196]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80069ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069d4:	492e      	ldr	r1, [pc, #184]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80069d6:	4313      	orrs	r3, r2
 80069d8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d009      	beq.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80069e6:	4b2a      	ldr	r3, [pc, #168]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80069f4:	4926      	ldr	r1, [pc, #152]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80069f6:	4313      	orrs	r3, r2
 80069f8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d008      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006a06:	4b22      	ldr	r3, [pc, #136]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a0a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a12:	491f      	ldr	r1, [pc, #124]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006a14:	4313      	orrs	r3, r2
 8006a16:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d00d      	beq.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006a24:	4b1a      	ldr	r3, [pc, #104]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	4a19      	ldr	r2, [pc, #100]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006a2a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a2e:	6113      	str	r3, [r2, #16]
 8006a30:	4b17      	ldr	r3, [pc, #92]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006a32:	691a      	ldr	r2, [r3, #16]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006a3a:	4915      	ldr	r1, [pc, #84]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	da08      	bge.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006a48:	4b11      	ldr	r3, [pc, #68]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a4c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a54:	490e      	ldr	r1, [pc, #56]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006a56:	4313      	orrs	r3, r2
 8006a58:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d009      	beq.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006a66:	4b0a      	ldr	r3, [pc, #40]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a74:	4906      	ldr	r1, [pc, #24]	; (8006a90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006a76:	4313      	orrs	r3, r2
 8006a78:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006a7a:	7dbb      	ldrb	r3, [r7, #22]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d101      	bne.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8006a80:	2300      	movs	r3, #0
 8006a82:	e000      	b.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3718      	adds	r7, #24
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	58024400 	.word	0x58024400

08006a94 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006a98:	f7ff f85a 	bl	8005b50 <HAL_RCC_GetHCLKFreq>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	4b06      	ldr	r3, [pc, #24]	; (8006ab8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	091b      	lsrs	r3, r3, #4
 8006aa4:	f003 0307 	and.w	r3, r3, #7
 8006aa8:	4904      	ldr	r1, [pc, #16]	; (8006abc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006aaa:	5ccb      	ldrb	r3, [r1, r3]
 8006aac:	f003 031f 	and.w	r3, r3, #31
 8006ab0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	58024400 	.word	0x58024400
 8006abc:	0800b4ec 	.word	0x0800b4ec

08006ac0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b089      	sub	sp, #36	; 0x24
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ac8:	4ba1      	ldr	r3, [pc, #644]	; (8006d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006acc:	f003 0303 	and.w	r3, r3, #3
 8006ad0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006ad2:	4b9f      	ldr	r3, [pc, #636]	; (8006d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad6:	0b1b      	lsrs	r3, r3, #12
 8006ad8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006adc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006ade:	4b9c      	ldr	r3, [pc, #624]	; (8006d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae2:	091b      	lsrs	r3, r3, #4
 8006ae4:	f003 0301 	and.w	r3, r3, #1
 8006ae8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006aea:	4b99      	ldr	r3, [pc, #612]	; (8006d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aee:	08db      	lsrs	r3, r3, #3
 8006af0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006af4:	693a      	ldr	r2, [r7, #16]
 8006af6:	fb02 f303 	mul.w	r3, r2, r3
 8006afa:	ee07 3a90 	vmov	s15, r3
 8006afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b02:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	f000 8111 	beq.w	8006d30 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	2b02      	cmp	r3, #2
 8006b12:	f000 8083 	beq.w	8006c1c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	2b02      	cmp	r3, #2
 8006b1a:	f200 80a1 	bhi.w	8006c60 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d003      	beq.n	8006b2c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d056      	beq.n	8006bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006b2a:	e099      	b.n	8006c60 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b2c:	4b88      	ldr	r3, [pc, #544]	; (8006d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 0320 	and.w	r3, r3, #32
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d02d      	beq.n	8006b94 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b38:	4b85      	ldr	r3, [pc, #532]	; (8006d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	08db      	lsrs	r3, r3, #3
 8006b3e:	f003 0303 	and.w	r3, r3, #3
 8006b42:	4a84      	ldr	r2, [pc, #528]	; (8006d54 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006b44:	fa22 f303 	lsr.w	r3, r2, r3
 8006b48:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	ee07 3a90 	vmov	s15, r3
 8006b50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	ee07 3a90 	vmov	s15, r3
 8006b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b62:	4b7b      	ldr	r3, [pc, #492]	; (8006d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b6a:	ee07 3a90 	vmov	s15, r3
 8006b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b72:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b76:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006d58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b8e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006b92:	e087      	b.n	8006ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	ee07 3a90 	vmov	s15, r3
 8006b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b9e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006d5c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ba6:	4b6a      	ldr	r3, [pc, #424]	; (8006d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bae:	ee07 3a90 	vmov	s15, r3
 8006bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006d58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006bbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bd2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006bd6:	e065      	b.n	8006ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	ee07 3a90 	vmov	s15, r3
 8006bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006be2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006d60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006be6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bea:	4b59      	ldr	r3, [pc, #356]	; (8006d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bf2:	ee07 3a90 	vmov	s15, r3
 8006bf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bfe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006d58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c1a:	e043      	b.n	8006ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	ee07 3a90 	vmov	s15, r3
 8006c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c26:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006d64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c2e:	4b48      	ldr	r3, [pc, #288]	; (8006d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c36:	ee07 3a90 	vmov	s15, r3
 8006c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c42:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006d58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006c5e:	e021      	b.n	8006ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	ee07 3a90 	vmov	s15, r3
 8006c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c6a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006d60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006c6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c72:	4b37      	ldr	r3, [pc, #220]	; (8006d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c7a:	ee07 3a90 	vmov	s15, r3
 8006c7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c82:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c86:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006d58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ca2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006ca4:	4b2a      	ldr	r3, [pc, #168]	; (8006d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca8:	0a5b      	lsrs	r3, r3, #9
 8006caa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cae:	ee07 3a90 	vmov	s15, r3
 8006cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006cba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cca:	ee17 2a90 	vmov	r2, s15
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006cd2:	4b1f      	ldr	r3, [pc, #124]	; (8006d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd6:	0c1b      	lsrs	r3, r3, #16
 8006cd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cdc:	ee07 3a90 	vmov	s15, r3
 8006ce0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ce4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ce8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cec:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cf8:	ee17 2a90 	vmov	r2, s15
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006d00:	4b13      	ldr	r3, [pc, #76]	; (8006d50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d04:	0e1b      	lsrs	r3, r3, #24
 8006d06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d0a:	ee07 3a90 	vmov	s15, r3
 8006d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d26:	ee17 2a90 	vmov	r2, s15
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006d2e:	e008      	b.n	8006d42 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	609a      	str	r2, [r3, #8]
}
 8006d42:	bf00      	nop
 8006d44:	3724      	adds	r7, #36	; 0x24
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	58024400 	.word	0x58024400
 8006d54:	03d09000 	.word	0x03d09000
 8006d58:	46000000 	.word	0x46000000
 8006d5c:	4c742400 	.word	0x4c742400
 8006d60:	4a742400 	.word	0x4a742400
 8006d64:	4bbebc20 	.word	0x4bbebc20

08006d68 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b089      	sub	sp, #36	; 0x24
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d70:	4ba1      	ldr	r3, [pc, #644]	; (8006ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d74:	f003 0303 	and.w	r3, r3, #3
 8006d78:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006d7a:	4b9f      	ldr	r3, [pc, #636]	; (8006ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d7e:	0d1b      	lsrs	r3, r3, #20
 8006d80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d84:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006d86:	4b9c      	ldr	r3, [pc, #624]	; (8006ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8a:	0a1b      	lsrs	r3, r3, #8
 8006d8c:	f003 0301 	and.w	r3, r3, #1
 8006d90:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006d92:	4b99      	ldr	r3, [pc, #612]	; (8006ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d96:	08db      	lsrs	r3, r3, #3
 8006d98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d9c:	693a      	ldr	r2, [r7, #16]
 8006d9e:	fb02 f303 	mul.w	r3, r2, r3
 8006da2:	ee07 3a90 	vmov	s15, r3
 8006da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006daa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f000 8111 	beq.w	8006fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	f000 8083 	beq.w	8006ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	f200 80a1 	bhi.w	8006f08 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d003      	beq.n	8006dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006dcc:	69bb      	ldr	r3, [r7, #24]
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d056      	beq.n	8006e80 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006dd2:	e099      	b.n	8006f08 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006dd4:	4b88      	ldr	r3, [pc, #544]	; (8006ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f003 0320 	and.w	r3, r3, #32
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d02d      	beq.n	8006e3c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006de0:	4b85      	ldr	r3, [pc, #532]	; (8006ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	08db      	lsrs	r3, r3, #3
 8006de6:	f003 0303 	and.w	r3, r3, #3
 8006dea:	4a84      	ldr	r2, [pc, #528]	; (8006ffc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006dec:	fa22 f303 	lsr.w	r3, r2, r3
 8006df0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	ee07 3a90 	vmov	s15, r3
 8006df8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	ee07 3a90 	vmov	s15, r3
 8006e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e0a:	4b7b      	ldr	r3, [pc, #492]	; (8006ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e12:	ee07 3a90 	vmov	s15, r3
 8006e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e1e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007000 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e36:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006e3a:	e087      	b.n	8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	ee07 3a90 	vmov	s15, r3
 8006e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e46:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007004 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e4e:	4b6a      	ldr	r3, [pc, #424]	; (8006ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e56:	ee07 3a90 	vmov	s15, r3
 8006e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e62:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007000 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e7e:	e065      	b.n	8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	ee07 3a90 	vmov	s15, r3
 8006e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e8a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007008 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e92:	4b59      	ldr	r3, [pc, #356]	; (8006ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e9a:	ee07 3a90 	vmov	s15, r3
 8006e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ea2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ea6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007000 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ebe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ec2:	e043      	b.n	8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	ee07 3a90 	vmov	s15, r3
 8006eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ece:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800700c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ed6:	4b48      	ldr	r3, [pc, #288]	; (8006ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ede:	ee07 3a90 	vmov	s15, r3
 8006ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ee6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006eea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007000 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ef6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f06:	e021      	b.n	8006f4c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	ee07 3a90 	vmov	s15, r3
 8006f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f12:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007008 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f1a:	4b37      	ldr	r3, [pc, #220]	; (8006ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f22:	ee07 3a90 	vmov	s15, r3
 8006f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f2e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007000 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f4a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006f4c:	4b2a      	ldr	r3, [pc, #168]	; (8006ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f50:	0a5b      	lsrs	r3, r3, #9
 8006f52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f56:	ee07 3a90 	vmov	s15, r3
 8006f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f66:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f72:	ee17 2a90 	vmov	r2, s15
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006f7a:	4b1f      	ldr	r3, [pc, #124]	; (8006ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f7e:	0c1b      	lsrs	r3, r3, #16
 8006f80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f84:	ee07 3a90 	vmov	s15, r3
 8006f88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f94:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fa0:	ee17 2a90 	vmov	r2, s15
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006fa8:	4b13      	ldr	r3, [pc, #76]	; (8006ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fac:	0e1b      	lsrs	r3, r3, #24
 8006fae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fb2:	ee07 3a90 	vmov	s15, r3
 8006fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006fbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fce:	ee17 2a90 	vmov	r2, s15
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006fd6:	e008      	b.n	8006fea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	609a      	str	r2, [r3, #8]
}
 8006fea:	bf00      	nop
 8006fec:	3724      	adds	r7, #36	; 0x24
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr
 8006ff6:	bf00      	nop
 8006ff8:	58024400 	.word	0x58024400
 8006ffc:	03d09000 	.word	0x03d09000
 8007000:	46000000 	.word	0x46000000
 8007004:	4c742400 	.word	0x4c742400
 8007008:	4a742400 	.word	0x4a742400
 800700c:	4bbebc20 	.word	0x4bbebc20

08007010 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b084      	sub	sp, #16
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800701a:	2300      	movs	r3, #0
 800701c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800701e:	4b53      	ldr	r3, [pc, #332]	; (800716c <RCCEx_PLL2_Config+0x15c>)
 8007020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007022:	f003 0303 	and.w	r3, r3, #3
 8007026:	2b03      	cmp	r3, #3
 8007028:	d101      	bne.n	800702e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e099      	b.n	8007162 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800702e:	4b4f      	ldr	r3, [pc, #316]	; (800716c <RCCEx_PLL2_Config+0x15c>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a4e      	ldr	r2, [pc, #312]	; (800716c <RCCEx_PLL2_Config+0x15c>)
 8007034:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007038:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800703a:	f7fa fbf9 	bl	8001830 <HAL_GetTick>
 800703e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007040:	e008      	b.n	8007054 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007042:	f7fa fbf5 	bl	8001830 <HAL_GetTick>
 8007046:	4602      	mov	r2, r0
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	1ad3      	subs	r3, r2, r3
 800704c:	2b02      	cmp	r3, #2
 800704e:	d901      	bls.n	8007054 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007050:	2303      	movs	r3, #3
 8007052:	e086      	b.n	8007162 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007054:	4b45      	ldr	r3, [pc, #276]	; (800716c <RCCEx_PLL2_Config+0x15c>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800705c:	2b00      	cmp	r3, #0
 800705e:	d1f0      	bne.n	8007042 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007060:	4b42      	ldr	r3, [pc, #264]	; (800716c <RCCEx_PLL2_Config+0x15c>)
 8007062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007064:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	031b      	lsls	r3, r3, #12
 800706e:	493f      	ldr	r1, [pc, #252]	; (800716c <RCCEx_PLL2_Config+0x15c>)
 8007070:	4313      	orrs	r3, r2
 8007072:	628b      	str	r3, [r1, #40]	; 0x28
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	3b01      	subs	r3, #1
 800707a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	3b01      	subs	r3, #1
 8007084:	025b      	lsls	r3, r3, #9
 8007086:	b29b      	uxth	r3, r3
 8007088:	431a      	orrs	r2, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	3b01      	subs	r3, #1
 8007090:	041b      	lsls	r3, r3, #16
 8007092:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007096:	431a      	orrs	r2, r3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	3b01      	subs	r3, #1
 800709e:	061b      	lsls	r3, r3, #24
 80070a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80070a4:	4931      	ldr	r1, [pc, #196]	; (800716c <RCCEx_PLL2_Config+0x15c>)
 80070a6:	4313      	orrs	r3, r2
 80070a8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80070aa:	4b30      	ldr	r3, [pc, #192]	; (800716c <RCCEx_PLL2_Config+0x15c>)
 80070ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	695b      	ldr	r3, [r3, #20]
 80070b6:	492d      	ldr	r1, [pc, #180]	; (800716c <RCCEx_PLL2_Config+0x15c>)
 80070b8:	4313      	orrs	r3, r2
 80070ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80070bc:	4b2b      	ldr	r3, [pc, #172]	; (800716c <RCCEx_PLL2_Config+0x15c>)
 80070be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c0:	f023 0220 	bic.w	r2, r3, #32
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	699b      	ldr	r3, [r3, #24]
 80070c8:	4928      	ldr	r1, [pc, #160]	; (800716c <RCCEx_PLL2_Config+0x15c>)
 80070ca:	4313      	orrs	r3, r2
 80070cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80070ce:	4b27      	ldr	r3, [pc, #156]	; (800716c <RCCEx_PLL2_Config+0x15c>)
 80070d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d2:	4a26      	ldr	r2, [pc, #152]	; (800716c <RCCEx_PLL2_Config+0x15c>)
 80070d4:	f023 0310 	bic.w	r3, r3, #16
 80070d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80070da:	4b24      	ldr	r3, [pc, #144]	; (800716c <RCCEx_PLL2_Config+0x15c>)
 80070dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070de:	4b24      	ldr	r3, [pc, #144]	; (8007170 <RCCEx_PLL2_Config+0x160>)
 80070e0:	4013      	ands	r3, r2
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	69d2      	ldr	r2, [r2, #28]
 80070e6:	00d2      	lsls	r2, r2, #3
 80070e8:	4920      	ldr	r1, [pc, #128]	; (800716c <RCCEx_PLL2_Config+0x15c>)
 80070ea:	4313      	orrs	r3, r2
 80070ec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80070ee:	4b1f      	ldr	r3, [pc, #124]	; (800716c <RCCEx_PLL2_Config+0x15c>)
 80070f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f2:	4a1e      	ldr	r2, [pc, #120]	; (800716c <RCCEx_PLL2_Config+0x15c>)
 80070f4:	f043 0310 	orr.w	r3, r3, #16
 80070f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d106      	bne.n	800710e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007100:	4b1a      	ldr	r3, [pc, #104]	; (800716c <RCCEx_PLL2_Config+0x15c>)
 8007102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007104:	4a19      	ldr	r2, [pc, #100]	; (800716c <RCCEx_PLL2_Config+0x15c>)
 8007106:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800710a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800710c:	e00f      	b.n	800712e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	2b01      	cmp	r3, #1
 8007112:	d106      	bne.n	8007122 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007114:	4b15      	ldr	r3, [pc, #84]	; (800716c <RCCEx_PLL2_Config+0x15c>)
 8007116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007118:	4a14      	ldr	r2, [pc, #80]	; (800716c <RCCEx_PLL2_Config+0x15c>)
 800711a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800711e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007120:	e005      	b.n	800712e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007122:	4b12      	ldr	r3, [pc, #72]	; (800716c <RCCEx_PLL2_Config+0x15c>)
 8007124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007126:	4a11      	ldr	r2, [pc, #68]	; (800716c <RCCEx_PLL2_Config+0x15c>)
 8007128:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800712c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800712e:	4b0f      	ldr	r3, [pc, #60]	; (800716c <RCCEx_PLL2_Config+0x15c>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a0e      	ldr	r2, [pc, #56]	; (800716c <RCCEx_PLL2_Config+0x15c>)
 8007134:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007138:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800713a:	f7fa fb79 	bl	8001830 <HAL_GetTick>
 800713e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007140:	e008      	b.n	8007154 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007142:	f7fa fb75 	bl	8001830 <HAL_GetTick>
 8007146:	4602      	mov	r2, r0
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	1ad3      	subs	r3, r2, r3
 800714c:	2b02      	cmp	r3, #2
 800714e:	d901      	bls.n	8007154 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007150:	2303      	movs	r3, #3
 8007152:	e006      	b.n	8007162 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007154:	4b05      	ldr	r3, [pc, #20]	; (800716c <RCCEx_PLL2_Config+0x15c>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800715c:	2b00      	cmp	r3, #0
 800715e:	d0f0      	beq.n	8007142 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007160:	7bfb      	ldrb	r3, [r7, #15]
}
 8007162:	4618      	mov	r0, r3
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	58024400 	.word	0x58024400
 8007170:	ffff0007 	.word	0xffff0007

08007174 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800717e:	2300      	movs	r3, #0
 8007180:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007182:	4b53      	ldr	r3, [pc, #332]	; (80072d0 <RCCEx_PLL3_Config+0x15c>)
 8007184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007186:	f003 0303 	and.w	r3, r3, #3
 800718a:	2b03      	cmp	r3, #3
 800718c:	d101      	bne.n	8007192 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	e099      	b.n	80072c6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007192:	4b4f      	ldr	r3, [pc, #316]	; (80072d0 <RCCEx_PLL3_Config+0x15c>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a4e      	ldr	r2, [pc, #312]	; (80072d0 <RCCEx_PLL3_Config+0x15c>)
 8007198:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800719c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800719e:	f7fa fb47 	bl	8001830 <HAL_GetTick>
 80071a2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80071a4:	e008      	b.n	80071b8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80071a6:	f7fa fb43 	bl	8001830 <HAL_GetTick>
 80071aa:	4602      	mov	r2, r0
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	1ad3      	subs	r3, r2, r3
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	d901      	bls.n	80071b8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80071b4:	2303      	movs	r3, #3
 80071b6:	e086      	b.n	80072c6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80071b8:	4b45      	ldr	r3, [pc, #276]	; (80072d0 <RCCEx_PLL3_Config+0x15c>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d1f0      	bne.n	80071a6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80071c4:	4b42      	ldr	r3, [pc, #264]	; (80072d0 <RCCEx_PLL3_Config+0x15c>)
 80071c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	051b      	lsls	r3, r3, #20
 80071d2:	493f      	ldr	r1, [pc, #252]	; (80072d0 <RCCEx_PLL3_Config+0x15c>)
 80071d4:	4313      	orrs	r3, r2
 80071d6:	628b      	str	r3, [r1, #40]	; 0x28
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	3b01      	subs	r3, #1
 80071de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	3b01      	subs	r3, #1
 80071e8:	025b      	lsls	r3, r3, #9
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	431a      	orrs	r2, r3
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	3b01      	subs	r3, #1
 80071f4:	041b      	lsls	r3, r3, #16
 80071f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80071fa:	431a      	orrs	r2, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	3b01      	subs	r3, #1
 8007202:	061b      	lsls	r3, r3, #24
 8007204:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007208:	4931      	ldr	r1, [pc, #196]	; (80072d0 <RCCEx_PLL3_Config+0x15c>)
 800720a:	4313      	orrs	r3, r2
 800720c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800720e:	4b30      	ldr	r3, [pc, #192]	; (80072d0 <RCCEx_PLL3_Config+0x15c>)
 8007210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007212:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	695b      	ldr	r3, [r3, #20]
 800721a:	492d      	ldr	r1, [pc, #180]	; (80072d0 <RCCEx_PLL3_Config+0x15c>)
 800721c:	4313      	orrs	r3, r2
 800721e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007220:	4b2b      	ldr	r3, [pc, #172]	; (80072d0 <RCCEx_PLL3_Config+0x15c>)
 8007222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007224:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	699b      	ldr	r3, [r3, #24]
 800722c:	4928      	ldr	r1, [pc, #160]	; (80072d0 <RCCEx_PLL3_Config+0x15c>)
 800722e:	4313      	orrs	r3, r2
 8007230:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007232:	4b27      	ldr	r3, [pc, #156]	; (80072d0 <RCCEx_PLL3_Config+0x15c>)
 8007234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007236:	4a26      	ldr	r2, [pc, #152]	; (80072d0 <RCCEx_PLL3_Config+0x15c>)
 8007238:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800723c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800723e:	4b24      	ldr	r3, [pc, #144]	; (80072d0 <RCCEx_PLL3_Config+0x15c>)
 8007240:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007242:	4b24      	ldr	r3, [pc, #144]	; (80072d4 <RCCEx_PLL3_Config+0x160>)
 8007244:	4013      	ands	r3, r2
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	69d2      	ldr	r2, [r2, #28]
 800724a:	00d2      	lsls	r2, r2, #3
 800724c:	4920      	ldr	r1, [pc, #128]	; (80072d0 <RCCEx_PLL3_Config+0x15c>)
 800724e:	4313      	orrs	r3, r2
 8007250:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007252:	4b1f      	ldr	r3, [pc, #124]	; (80072d0 <RCCEx_PLL3_Config+0x15c>)
 8007254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007256:	4a1e      	ldr	r2, [pc, #120]	; (80072d0 <RCCEx_PLL3_Config+0x15c>)
 8007258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800725c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d106      	bne.n	8007272 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007264:	4b1a      	ldr	r3, [pc, #104]	; (80072d0 <RCCEx_PLL3_Config+0x15c>)
 8007266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007268:	4a19      	ldr	r2, [pc, #100]	; (80072d0 <RCCEx_PLL3_Config+0x15c>)
 800726a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800726e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007270:	e00f      	b.n	8007292 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d106      	bne.n	8007286 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007278:	4b15      	ldr	r3, [pc, #84]	; (80072d0 <RCCEx_PLL3_Config+0x15c>)
 800727a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800727c:	4a14      	ldr	r2, [pc, #80]	; (80072d0 <RCCEx_PLL3_Config+0x15c>)
 800727e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007282:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007284:	e005      	b.n	8007292 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007286:	4b12      	ldr	r3, [pc, #72]	; (80072d0 <RCCEx_PLL3_Config+0x15c>)
 8007288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800728a:	4a11      	ldr	r2, [pc, #68]	; (80072d0 <RCCEx_PLL3_Config+0x15c>)
 800728c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007290:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007292:	4b0f      	ldr	r3, [pc, #60]	; (80072d0 <RCCEx_PLL3_Config+0x15c>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a0e      	ldr	r2, [pc, #56]	; (80072d0 <RCCEx_PLL3_Config+0x15c>)
 8007298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800729c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800729e:	f7fa fac7 	bl	8001830 <HAL_GetTick>
 80072a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80072a4:	e008      	b.n	80072b8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80072a6:	f7fa fac3 	bl	8001830 <HAL_GetTick>
 80072aa:	4602      	mov	r2, r0
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	1ad3      	subs	r3, r2, r3
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	d901      	bls.n	80072b8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80072b4:	2303      	movs	r3, #3
 80072b6:	e006      	b.n	80072c6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80072b8:	4b05      	ldr	r3, [pc, #20]	; (80072d0 <RCCEx_PLL3_Config+0x15c>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d0f0      	beq.n	80072a6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80072c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3710      	adds	r7, #16
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop
 80072d0:	58024400 	.word	0x58024400
 80072d4:	ffff0007 	.word	0xffff0007

080072d8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80072e0:	2301      	movs	r3, #1
 80072e2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d067      	beq.n	80073ba <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d106      	bne.n	8007304 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f7f9 ffd8 	bl	80012b4 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2202      	movs	r2, #2
 8007308:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	22ca      	movs	r2, #202	; 0xca
 8007312:	625a      	str	r2, [r3, #36]	; 0x24
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2253      	movs	r2, #83	; 0x53
 800731a:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f000 fbe7 	bl	8007af0 <RTC_EnterInitMode>
 8007322:	4603      	mov	r3, r0
 8007324:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8007326:	7bfb      	ldrb	r3, [r7, #15]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d13b      	bne.n	80073a4 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	6899      	ldr	r1, [r3, #8]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	4b23      	ldr	r3, [pc, #140]	; (80073c4 <HAL_RTC_Init+0xec>)
 8007338:	400b      	ands	r3, r1
 800733a:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	6899      	ldr	r1, [r3, #8]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	685a      	ldr	r2, [r3, #4]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	431a      	orrs	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	699b      	ldr	r3, [r3, #24]
 8007350:	431a      	orrs	r2, r3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	430a      	orrs	r2, r1
 8007358:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	0419      	lsls	r1, r3, #16
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	68da      	ldr	r2, [r3, #12]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	430a      	orrs	r2, r1
 800736a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 fbf3 	bl	8007b58 <RTC_ExitInitMode>
 8007372:	4603      	mov	r3, r0
 8007374:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 8007376:	7bfb      	ldrb	r3, [r7, #15]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d113      	bne.n	80073a4 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f022 0203 	bic.w	r2, r2, #3
 800738a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	69da      	ldr	r2, [r3, #28]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	695b      	ldr	r3, [r3, #20]
 800739a:	431a      	orrs	r2, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	430a      	orrs	r2, r1
 80073a2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	22ff      	movs	r2, #255	; 0xff
 80073aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 80073ac:	7bfb      	ldrb	r3, [r7, #15]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d103      	bne.n	80073ba <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2201      	movs	r2, #1
 80073b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 80073ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3710      	adds	r7, #16
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}
 80073c4:	ff8fffbf 	.word	0xff8fffbf

080073c8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80073c8:	b590      	push	{r4, r7, lr}
 80073ca:	b087      	sub	sp, #28
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d101      	bne.n	80073e2 <HAL_RTC_SetTime+0x1a>
 80073de:	2302      	movs	r3, #2
 80073e0:	e089      	b.n	80074f6 <HAL_RTC_SetTime+0x12e>
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2201      	movs	r2, #1
 80073e6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2202      	movs	r2, #2
 80073ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	22ca      	movs	r2, #202	; 0xca
 80073f8:	625a      	str	r2, [r3, #36]	; 0x24
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2253      	movs	r2, #83	; 0x53
 8007400:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007402:	68f8      	ldr	r0, [r7, #12]
 8007404:	f000 fb74 	bl	8007af0 <RTC_EnterInitMode>
 8007408:	4603      	mov	r3, r0
 800740a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800740c:	7cfb      	ldrb	r3, [r7, #19]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d161      	bne.n	80074d6 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d126      	bne.n	8007466 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007422:	2b00      	cmp	r3, #0
 8007424:	d102      	bne.n	800742c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	2200      	movs	r2, #0
 800742a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	4618      	mov	r0, r3
 8007432:	f000 fbcf 	bl	8007bd4 <RTC_ByteToBcd2>
 8007436:	4603      	mov	r3, r0
 8007438:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	785b      	ldrb	r3, [r3, #1]
 800743e:	4618      	mov	r0, r3
 8007440:	f000 fbc8 	bl	8007bd4 <RTC_ByteToBcd2>
 8007444:	4603      	mov	r3, r0
 8007446:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007448:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	789b      	ldrb	r3, [r3, #2]
 800744e:	4618      	mov	r0, r3
 8007450:	f000 fbc0 	bl	8007bd4 <RTC_ByteToBcd2>
 8007454:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007456:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	78db      	ldrb	r3, [r3, #3]
 800745e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007460:	4313      	orrs	r3, r2
 8007462:	617b      	str	r3, [r7, #20]
 8007464:	e018      	b.n	8007498 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007470:	2b00      	cmp	r3, #0
 8007472:	d102      	bne.n	800747a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	2200      	movs	r2, #0
 8007478:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	785b      	ldrb	r3, [r3, #1]
 8007484:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007486:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8007488:	68ba      	ldr	r2, [r7, #8]
 800748a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800748c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	78db      	ldrb	r3, [r3, #3]
 8007492:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007494:	4313      	orrs	r3, r2
 8007496:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	6979      	ldr	r1, [r7, #20]
 800749e:	4b18      	ldr	r3, [pc, #96]	; (8007500 <HAL_RTC_SetTime+0x138>)
 80074a0:	400b      	ands	r3, r1
 80074a2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	689a      	ldr	r2, [r3, #8]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80074b2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	6899      	ldr	r1, [r3, #8]
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	68da      	ldr	r2, [r3, #12]
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	431a      	orrs	r2, r3
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	430a      	orrs	r2, r1
 80074ca:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80074cc:	68f8      	ldr	r0, [r7, #12]
 80074ce:	f000 fb43 	bl	8007b58 <RTC_ExitInitMode>
 80074d2:	4603      	mov	r3, r0
 80074d4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	22ff      	movs	r2, #255	; 0xff
 80074dc:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80074de:	7cfb      	ldrb	r3, [r7, #19]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d103      	bne.n	80074ec <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80074f4:	7cfb      	ldrb	r3, [r7, #19]
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	371c      	adds	r7, #28
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd90      	pop	{r4, r7, pc}
 80074fe:	bf00      	nop
 8007500:	007f7f7f 	.word	0x007f7f7f

08007504 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b086      	sub	sp, #24
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	691b      	ldr	r3, [r3, #16]
 8007520:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	4b22      	ldr	r3, [pc, #136]	; (80075b8 <HAL_RTC_GetTime+0xb4>)
 8007530:	4013      	ands	r3, r2
 8007532:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	0c1b      	lsrs	r3, r3, #16
 8007538:	b2db      	uxtb	r3, r3
 800753a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800753e:	b2da      	uxtb	r2, r3
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	0a1b      	lsrs	r3, r3, #8
 8007548:	b2db      	uxtb	r3, r3
 800754a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800754e:	b2da      	uxtb	r2, r3
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	b2db      	uxtb	r3, r3
 8007558:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800755c:	b2da      	uxtb	r2, r3
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	0d9b      	lsrs	r3, r3, #22
 8007566:	b2db      	uxtb	r3, r3
 8007568:	f003 0301 	and.w	r3, r3, #1
 800756c:	b2da      	uxtb	r2, r3
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d11a      	bne.n	80075ae <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	4618      	mov	r0, r3
 800757e:	f000 fb49 	bl	8007c14 <RTC_Bcd2ToByte>
 8007582:	4603      	mov	r3, r0
 8007584:	461a      	mov	r2, r3
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	785b      	ldrb	r3, [r3, #1]
 800758e:	4618      	mov	r0, r3
 8007590:	f000 fb40 	bl	8007c14 <RTC_Bcd2ToByte>
 8007594:	4603      	mov	r3, r0
 8007596:	461a      	mov	r2, r3
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	789b      	ldrb	r3, [r3, #2]
 80075a0:	4618      	mov	r0, r3
 80075a2:	f000 fb37 	bl	8007c14 <RTC_Bcd2ToByte>
 80075a6:	4603      	mov	r3, r0
 80075a8:	461a      	mov	r2, r3
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80075ae:	2300      	movs	r3, #0
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3718      	adds	r7, #24
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	007f7f7f 	.word	0x007f7f7f

080075bc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80075bc:	b590      	push	{r4, r7, lr}
 80075be:	b087      	sub	sp, #28
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d101      	bne.n	80075d6 <HAL_RTC_SetDate+0x1a>
 80075d2:	2302      	movs	r3, #2
 80075d4:	e073      	b.n	80076be <HAL_RTC_SetDate+0x102>
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2201      	movs	r2, #1
 80075da:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2202      	movs	r2, #2
 80075e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d10e      	bne.n	800760a <HAL_RTC_SetDate+0x4e>
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	785b      	ldrb	r3, [r3, #1]
 80075f0:	f003 0310 	and.w	r3, r3, #16
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d008      	beq.n	800760a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	785b      	ldrb	r3, [r3, #1]
 80075fc:	f023 0310 	bic.w	r3, r3, #16
 8007600:	b2db      	uxtb	r3, r3
 8007602:	330a      	adds	r3, #10
 8007604:	b2da      	uxtb	r2, r3
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d11c      	bne.n	800764a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	78db      	ldrb	r3, [r3, #3]
 8007614:	4618      	mov	r0, r3
 8007616:	f000 fadd 	bl	8007bd4 <RTC_ByteToBcd2>
 800761a:	4603      	mov	r3, r0
 800761c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	785b      	ldrb	r3, [r3, #1]
 8007622:	4618      	mov	r0, r3
 8007624:	f000 fad6 	bl	8007bd4 <RTC_ByteToBcd2>
 8007628:	4603      	mov	r3, r0
 800762a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800762c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	789b      	ldrb	r3, [r3, #2]
 8007632:	4618      	mov	r0, r3
 8007634:	f000 face 	bl	8007bd4 <RTC_ByteToBcd2>
 8007638:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800763a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007644:	4313      	orrs	r3, r2
 8007646:	617b      	str	r3, [r7, #20]
 8007648:	e00e      	b.n	8007668 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	78db      	ldrb	r3, [r3, #3]
 800764e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	785b      	ldrb	r3, [r3, #1]
 8007654:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007656:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8007658:	68ba      	ldr	r2, [r7, #8]
 800765a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800765c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007664:	4313      	orrs	r3, r2
 8007666:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	22ca      	movs	r2, #202	; 0xca
 800766e:	625a      	str	r2, [r3, #36]	; 0x24
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	2253      	movs	r2, #83	; 0x53
 8007676:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	f000 fa39 	bl	8007af0 <RTC_EnterInitMode>
 800767e:	4603      	mov	r3, r0
 8007680:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007682:	7cfb      	ldrb	r3, [r7, #19]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d10a      	bne.n	800769e <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	6979      	ldr	r1, [r7, #20]
 800768e:	4b0e      	ldr	r3, [pc, #56]	; (80076c8 <HAL_RTC_SetDate+0x10c>)
 8007690:	400b      	ands	r3, r1
 8007692:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007694:	68f8      	ldr	r0, [r7, #12]
 8007696:	f000 fa5f 	bl	8007b58 <RTC_ExitInitMode>
 800769a:	4603      	mov	r3, r0
 800769c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	22ff      	movs	r2, #255	; 0xff
 80076a4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80076a6:	7cfb      	ldrb	r3, [r7, #19]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d103      	bne.n	80076b4 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2200      	movs	r2, #0
 80076b8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80076bc:	7cfb      	ldrb	r3, [r7, #19]


}
 80076be:	4618      	mov	r0, r3
 80076c0:	371c      	adds	r7, #28
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd90      	pop	{r4, r7, pc}
 80076c6:	bf00      	nop
 80076c8:	00ffff3f 	.word	0x00ffff3f

080076cc <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b086      	sub	sp, #24
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	685a      	ldr	r2, [r3, #4]
 80076de:	4b21      	ldr	r3, [pc, #132]	; (8007764 <HAL_RTC_GetDate+0x98>)
 80076e0:	4013      	ands	r3, r2
 80076e2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	0c1b      	lsrs	r3, r3, #16
 80076e8:	b2da      	uxtb	r2, r3
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	0a1b      	lsrs	r3, r3, #8
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	f003 031f 	and.w	r3, r3, #31
 80076f8:	b2da      	uxtb	r2, r3
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	b2db      	uxtb	r3, r3
 8007702:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007706:	b2da      	uxtb	r2, r3
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	0b5b      	lsrs	r3, r3, #13
 8007710:	b2db      	uxtb	r3, r3
 8007712:	f003 0307 	and.w	r3, r3, #7
 8007716:	b2da      	uxtb	r2, r3
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d11a      	bne.n	8007758 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	78db      	ldrb	r3, [r3, #3]
 8007726:	4618      	mov	r0, r3
 8007728:	f000 fa74 	bl	8007c14 <RTC_Bcd2ToByte>
 800772c:	4603      	mov	r3, r0
 800772e:	461a      	mov	r2, r3
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	785b      	ldrb	r3, [r3, #1]
 8007738:	4618      	mov	r0, r3
 800773a:	f000 fa6b 	bl	8007c14 <RTC_Bcd2ToByte>
 800773e:	4603      	mov	r3, r0
 8007740:	461a      	mov	r2, r3
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	789b      	ldrb	r3, [r3, #2]
 800774a:	4618      	mov	r0, r3
 800774c:	f000 fa62 	bl	8007c14 <RTC_Bcd2ToByte>
 8007750:	4603      	mov	r3, r0
 8007752:	461a      	mov	r2, r3
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3718      	adds	r7, #24
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	00ffff3f 	.word	0x00ffff3f

08007768 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007768:	b590      	push	{r4, r7, lr}
 800776a:	b089      	sub	sp, #36	; 0x24
 800776c:	af00      	add	r7, sp, #0
 800776e:	60f8      	str	r0, [r7, #12]
 8007770:	60b9      	str	r1, [r7, #8]
 8007772:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f893 3020 	ldrb.w	r3, [r3, #32]
 800777a:	2b01      	cmp	r3, #1
 800777c:	d101      	bne.n	8007782 <HAL_RTC_SetAlarm_IT+0x1a>
 800777e:	2302      	movs	r3, #2
 8007780:	e135      	b.n	80079ee <HAL_RTC_SetAlarm_IT+0x286>
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2201      	movs	r2, #1
 8007786:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2202      	movs	r2, #2
 800778e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if(Format == RTC_FORMAT_BIN)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d137      	bne.n	8007808 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d102      	bne.n	80077ac <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	2200      	movs	r2, #0
 80077aa:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	4618      	mov	r0, r3
 80077b2:	f000 fa0f 	bl	8007bd4 <RTC_ByteToBcd2>
 80077b6:	4603      	mov	r3, r0
 80077b8:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	785b      	ldrb	r3, [r3, #1]
 80077be:	4618      	mov	r0, r3
 80077c0:	f000 fa08 	bl	8007bd4 <RTC_ByteToBcd2>
 80077c4:	4603      	mov	r3, r0
 80077c6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80077c8:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	789b      	ldrb	r3, [r3, #2]
 80077ce:	4618      	mov	r0, r3
 80077d0:	f000 fa00 	bl	8007bd4 <RTC_ByteToBcd2>
 80077d4:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80077d6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	78db      	ldrb	r3, [r3, #3]
 80077de:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 80077e0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80077ea:	4618      	mov	r0, r3
 80077ec:	f000 f9f2 	bl	8007bd4 <RTC_ByteToBcd2>
 80077f0:	4603      	mov	r3, r0
 80077f2:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 80077f4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80077fc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8007802:	4313      	orrs	r3, r2
 8007804:	61fb      	str	r3, [r7, #28]
 8007806:	e023      	b.n	8007850 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007812:	2b00      	cmp	r3, #0
 8007814:	d102      	bne.n	800781c <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	2200      	movs	r2, #0
 800781a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	041a      	lsls	r2, r3, #16
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	785b      	ldrb	r3, [r3, #1]
 8007826:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 8007828:	4313      	orrs	r3, r2
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 800782a:	68ba      	ldr	r2, [r7, #8]
 800782c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 800782e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	78db      	ldrb	r3, [r3, #3]
 8007834:	059b      	lsls	r3, r3, #22
              ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 8007836:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800783e:	061b      	lsls	r3, r3, #24
              ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 8007840:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                         | \
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 8007846:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
 800784c:	4313      	orrs	r3, r2
 800784e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	685a      	ldr	r2, [r3, #4]
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	699b      	ldr	r3, [r3, #24]
 8007858:	4313      	orrs	r3, r2
 800785a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	22ca      	movs	r2, #202	; 0xca
 8007862:	625a      	str	r2, [r3, #36]	; 0x24
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2253      	movs	r2, #83	; 0x53
 800786a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007870:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007874:	d14a      	bne.n	800790c <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	689a      	ldr	r2, [r3, #8]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007884:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	b2da      	uxtb	r2, r3
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8007896:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007898:	f7f9 ffca 	bl	8001830 <HAL_GetTick>
 800789c:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
  #if defined(RTC_ICSR_ALRAWF)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRAWF) == 0U)
  #endif /* RTC_ICSR_ALRAWF */
  #if defined(RTC_ISR_ALRAWF)
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800789e:	e015      	b.n	80078cc <HAL_RTC_SetAlarm_IT+0x164>
  #endif /* RTC_ISR_ALRAWF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80078a0:	f7f9 ffc6 	bl	8001830 <HAL_GetTick>
 80078a4:	4602      	mov	r2, r0
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	1ad3      	subs	r3, r2, r3
 80078aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80078ae:	d90d      	bls.n	80078cc <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	22ff      	movs	r2, #255	; 0xff
 80078b6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2203      	movs	r2, #3
 80078bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2200      	movs	r2, #0
 80078c4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80078c8:	2303      	movs	r3, #3
 80078ca:	e090      	b.n	80079ee <HAL_RTC_SetAlarm_IT+0x286>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	f003 0301 	and.w	r3, r3, #1
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d0e2      	beq.n	80078a0 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	69fa      	ldr	r2, [r7, #28]
 80078e0:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	69ba      	ldr	r2, [r7, #24]
 80078e8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	689a      	ldr	r2, [r3, #8]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078f8:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	689a      	ldr	r2, [r3, #8]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007908:	609a      	str	r2, [r3, #8]
 800790a:	e049      	b.n	80079a0 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	689a      	ldr	r2, [r3, #8]
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800791a:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	b2da      	uxtb	r2, r3
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f462 7220 	orn	r2, r2, #640	; 0x280
 800792c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800792e:	f7f9 ff7f 	bl	8001830 <HAL_GetTick>
 8007932:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
#if defined(RTC_ICSR_ALRBWF)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRBWF) == 0U)
#endif /* RTC_ICSR_ALRBWF */
#if defined(RTC_ISR_ALRBWF)
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8007934:	e015      	b.n	8007962 <HAL_RTC_SetAlarm_IT+0x1fa>
#endif /* RTC_ISR_ALRBWF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007936:	f7f9 ff7b 	bl	8001830 <HAL_GetTick>
 800793a:	4602      	mov	r2, r0
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	1ad3      	subs	r3, r2, r3
 8007940:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007944:	d90d      	bls.n	8007962 <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	22ff      	movs	r2, #255	; 0xff
 800794c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2203      	movs	r2, #3
 8007952:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2200      	movs	r2, #0
 800795a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800795e:	2303      	movs	r3, #3
 8007960:	e045      	b.n	80079ee <HAL_RTC_SetAlarm_IT+0x286>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	f003 0302 	and.w	r3, r3, #2
 800796c:	2b00      	cmp	r3, #0
 800796e:	d0e2      	beq.n	8007936 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	69fa      	ldr	r2, [r7, #28]
 8007976:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	69ba      	ldr	r2, [r7, #24]
 800797e:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	689a      	ldr	r2, [r3, #8]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800798e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	689a      	ldr	r2, [r3, #8]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800799e:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 80079a0:	f7fa f8ea 	bl	8001b78 <HAL_GetCurrentCPUID>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b03      	cmp	r3, #3
 80079a8:	d106      	bne.n	80079b8 <HAL_RTC_SetAlarm_IT+0x250>
  {
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80079aa:	4b13      	ldr	r3, [pc, #76]	; (80079f8 <HAL_RTC_SetAlarm_IT+0x290>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a12      	ldr	r2, [pc, #72]	; (80079f8 <HAL_RTC_SetAlarm_IT+0x290>)
 80079b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079b4:	6013      	str	r3, [r2, #0]
 80079b6:	e005      	b.n	80079c4 <HAL_RTC_SetAlarm_IT+0x25c>
  }
  else
  {
    __HAL_RTC_ALARM_EXTID2_ENABLE_IT();
 80079b8:	4b10      	ldr	r3, [pc, #64]	; (80079fc <HAL_RTC_SetAlarm_IT+0x294>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a0f      	ldr	r2, [pc, #60]	; (80079fc <HAL_RTC_SetAlarm_IT+0x294>)
 80079be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079c2:	6013      	str	r3, [r2, #0]
  }
#else  /* SINGLE_CORE */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
#endif

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80079c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80079ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079d2:	6013      	str	r3, [r2, #0]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	22ff      	movs	r2, #255	; 0xff
 80079da:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2201      	movs	r2, #1
 80079e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3724      	adds	r7, #36	; 0x24
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd90      	pop	{r4, r7, pc}
 80079f6:	bf00      	nop
 80079f8:	58000080 	.word	0x58000080
 80079fc:	580000c0 	.word	0x580000c0

08007a00 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
#if defined(DUAL_CORE)
  if(HAL_GetCurrentCPUID() == CM7_CPUID)
 8007a08:	f7fa f8b6 	bl	8001b78 <HAL_GetCurrentCPUID>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b03      	cmp	r3, #3
 8007a10:	d104      	bne.n	8007a1c <HAL_RTC_AlarmIRQHandler+0x1c>
  {
    __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8007a12:	4b22      	ldr	r3, [pc, #136]	; (8007a9c <HAL_RTC_AlarmIRQHandler+0x9c>)
 8007a14:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007a18:	609a      	str	r2, [r3, #8]
 8007a1a:	e003      	b.n	8007a24 <HAL_RTC_AlarmIRQHandler+0x24>
  }
  else
  {
    __HAL_RTC_ALARM_EXTID2_CLEAR_FLAG();
 8007a1c:	4b20      	ldr	r3, [pc, #128]	; (8007aa0 <HAL_RTC_AlarmIRQHandler+0xa0>)
 8007a1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007a22:	609a      	str	r2, [r3, #8]
  }
#endif /* RTC_MISR_ALRBMF */

#if defined(RTC_ISR_ALRAF)
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d012      	beq.n	8007a58 <HAL_RTC_AlarmIRQHandler+0x58>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d00b      	beq.n	8007a58 <HAL_RTC_AlarmIRQHandler+0x58>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	68db      	ldr	r3, [r3, #12]
 8007a46:	b2da      	uxtb	r2, r3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8007a50:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f7f8 ffbc 	bl	80009d0 <HAL_RTC_AlarmAEventCallback>
  }
#endif /* RTC_ISR_ALRAF */

#if defined(RTC_ISR_ALRBF)
  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d012      	beq.n	8007a8c <HAL_RTC_AlarmIRQHandler+0x8c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d00b      	beq.n	8007a8c <HAL_RTC_AlarmIRQHandler+0x8c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	68db      	ldr	r3, [r3, #12]
 8007a7a:	b2da      	uxtb	r2, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f462 7220 	orn	r2, r2, #640	; 0x280
 8007a84:	60da      	str	r2, [r3, #12]

      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 f90c 	bl	8007ca4 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* RTC_ISR_ALRBF */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8007a94:	bf00      	nop
 8007a96:	3708      	adds	r7, #8
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}
 8007a9c:	58000080 	.word	0x58000080
 8007aa0:	580000c0 	.word	0x580000c0

08007aa4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	68da      	ldr	r2, [r3, #12]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007aba:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8007abc:	f7f9 feb8 	bl	8001830 <HAL_GetTick>
 8007ac0:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007ac2:	e009      	b.n	8007ad8 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007ac4:	f7f9 feb4 	bl	8001830 <HAL_GetTick>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	1ad3      	subs	r3, r2, r3
 8007ace:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ad2:	d901      	bls.n	8007ad8 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8007ad4:	2303      	movs	r3, #3
 8007ad6:	e007      	b.n	8007ae8 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	68db      	ldr	r3, [r3, #12]
 8007ade:	f003 0320 	and.w	r3, r3, #32
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d0ee      	beq.n	8007ac4 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8007ae6:	2300      	movs	r3, #0
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3710      	adds	r7, #16
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007af8:	2300      	movs	r3, #0
 8007afa:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d120      	bne.n	8007b4c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b12:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007b14:	f7f9 fe8c 	bl	8001830 <HAL_GetTick>
 8007b18:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007b1a:	e00d      	b.n	8007b38 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007b1c:	f7f9 fe88 	bl	8001830 <HAL_GetTick>
 8007b20:	4602      	mov	r2, r0
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	1ad3      	subs	r3, r2, r3
 8007b26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b2a:	d905      	bls.n	8007b38 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007b2c:	2303      	movs	r3, #3
 8007b2e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2203      	movs	r2, #3
 8007b34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	68db      	ldr	r3, [r3, #12]
 8007b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d102      	bne.n	8007b4c <RTC_EnterInitMode+0x5c>
 8007b46:	7bfb      	ldrb	r3, [r7, #15]
 8007b48:	2b03      	cmp	r3, #3
 8007b4a:	d1e7      	bne.n	8007b1c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 8007b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3710      	adds	r7, #16
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
	...

08007b58 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b60:	2300      	movs	r3, #0
 8007b62:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8007b64:	4b1a      	ldr	r3, [pc, #104]	; (8007bd0 <RTC_ExitInitMode+0x78>)
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	4a19      	ldr	r2, [pc, #100]	; (8007bd0 <RTC_ExitInitMode+0x78>)
 8007b6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b6e:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007b70:	4b17      	ldr	r3, [pc, #92]	; (8007bd0 <RTC_ExitInitMode+0x78>)
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	f003 0320 	and.w	r3, r3, #32
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d10c      	bne.n	8007b96 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f7ff ff91 	bl	8007aa4 <HAL_RTC_WaitForSynchro>
 8007b82:	4603      	mov	r3, r0
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d01e      	beq.n	8007bc6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2203      	movs	r2, #3
 8007b8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007b90:	2303      	movs	r3, #3
 8007b92:	73fb      	strb	r3, [r7, #15]
 8007b94:	e017      	b.n	8007bc6 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007b96:	4b0e      	ldr	r3, [pc, #56]	; (8007bd0 <RTC_ExitInitMode+0x78>)
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	4a0d      	ldr	r2, [pc, #52]	; (8007bd0 <RTC_ExitInitMode+0x78>)
 8007b9c:	f023 0320 	bic.w	r3, r3, #32
 8007ba0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f7ff ff7e 	bl	8007aa4 <HAL_RTC_WaitForSynchro>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d005      	beq.n	8007bba <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2203      	movs	r2, #3
 8007bb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007bb6:	2303      	movs	r3, #3
 8007bb8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007bba:	4b05      	ldr	r3, [pc, #20]	; (8007bd0 <RTC_ExitInitMode+0x78>)
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	4a04      	ldr	r2, [pc, #16]	; (8007bd0 <RTC_ExitInitMode+0x78>)
 8007bc0:	f043 0320 	orr.w	r3, r3, #32
 8007bc4:	6093      	str	r3, [r2, #8]
  }

  return status;
 8007bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3710      	adds	r7, #16
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}
 8007bd0:	58004000 	.word	0x58004000

08007bd4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b085      	sub	sp, #20
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	4603      	mov	r3, r0
 8007bdc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007bde:	2300      	movs	r3, #0
 8007be0:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 8007be2:	79fb      	ldrb	r3, [r7, #7]
 8007be4:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8007be6:	e005      	b.n	8007bf4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	3301      	adds	r3, #1
 8007bec:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 8007bee:	7afb      	ldrb	r3, [r7, #11]
 8007bf0:	3b0a      	subs	r3, #10
 8007bf2:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8007bf4:	7afb      	ldrb	r3, [r7, #11]
 8007bf6:	2b09      	cmp	r3, #9
 8007bf8:	d8f6      	bhi.n	8007be8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	011b      	lsls	r3, r3, #4
 8007c00:	b2da      	uxtb	r2, r3
 8007c02:	7afb      	ldrb	r3, [r7, #11]
 8007c04:	4313      	orrs	r3, r2
 8007c06:	b2db      	uxtb	r3, r3
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3714      	adds	r7, #20
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b085      	sub	sp, #20
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8007c1e:	79fb      	ldrb	r3, [r7, #7]
 8007c20:	091b      	lsrs	r3, r3, #4
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	461a      	mov	r2, r3
 8007c26:	0092      	lsls	r2, r2, #2
 8007c28:	4413      	add	r3, r2
 8007c2a:	005b      	lsls	r3, r3, #1
 8007c2c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8007c2e:	79fb      	ldrb	r3, [r7, #7]
 8007c30:	f003 030f 	and.w	r3, r3, #15
 8007c34:	b2da      	uxtb	r2, r3
 8007c36:	7bfb      	ldrb	r3, [r7, #15]
 8007c38:	4413      	add	r3, r2
 8007c3a:	b2db      	uxtb	r3, r3
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3714      	adds	r7, #20
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef * hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b087      	sub	sp, #28
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	607a      	str	r2, [r7, #4]
  /* Point on address of first backup register */
#if defined(TAMP_BKP0R)
  tmp = (uint32_t) & (((TAMP_TypeDef *)((uint32_t)hrtc->Instance + TAMP_OFFSET))->BKP0R);
#endif /* TAMP_BKP0R */
#if defined(RTC_BKP0R)
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	3350      	adds	r3, #80	; 0x50
 8007c5a:	617b      	str	r3, [r7, #20]
#endif /* RTC_BKP0R */

  tmp += (BackupRegister * 4U);
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	697a      	ldr	r2, [r7, #20]
 8007c62:	4413      	add	r3, r2
 8007c64:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	601a      	str	r2, [r3, #0]
}
 8007c6c:	bf00      	nop
 8007c6e:	371c      	adds	r7, #28
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 31 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef * hrtc, uint32_t BackupRegister)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b085      	sub	sp, #20
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  /* Point on address of first backup register */
#if defined(TAMP_BKP0R)
  tmp = (uint32_t) & (((TAMP_TypeDef *)((uint32_t)hrtc->Instance + TAMP_OFFSET))->BKP0R);
#endif /* TAMP_BKP0R */
#if defined(RTC_BKP0R)
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	3350      	adds	r3, #80	; 0x50
 8007c88:	60fb      	str	r3, [r7, #12]
#endif /* RTC_BKP0R */

  tmp += (BackupRegister * 4U);
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	68fa      	ldr	r2, [r7, #12]
 8007c90:	4413      	add	r3, r2
 8007c92:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3714      	adds	r7, #20
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr

08007ca4 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef * hrtc)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8007cac:	bf00      	nop
 8007cae:	370c      	adds	r7, #12
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b082      	sub	sp, #8
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d101      	bne.n	8007cca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e049      	b.n	8007d5e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d106      	bne.n	8007ce4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f7f9 fb20 	bl	8001324 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2202      	movs	r2, #2
 8007ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	3304      	adds	r3, #4
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	4610      	mov	r0, r2
 8007cf8:	f000 fc6c 	bl	80085d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2201      	movs	r2, #1
 8007d38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2201      	movs	r2, #1
 8007d48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2201      	movs	r2, #1
 8007d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d5c:	2300      	movs	r3, #0
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3708      	adds	r7, #8
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
	...

08007d68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b085      	sub	sp, #20
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d001      	beq.n	8007d80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e054      	b.n	8007e2a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2202      	movs	r2, #2
 8007d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	68da      	ldr	r2, [r3, #12]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f042 0201 	orr.w	r2, r2, #1
 8007d96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a26      	ldr	r2, [pc, #152]	; (8007e38 <HAL_TIM_Base_Start_IT+0xd0>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d022      	beq.n	8007de8 <HAL_TIM_Base_Start_IT+0x80>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007daa:	d01d      	beq.n	8007de8 <HAL_TIM_Base_Start_IT+0x80>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a22      	ldr	r2, [pc, #136]	; (8007e3c <HAL_TIM_Base_Start_IT+0xd4>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d018      	beq.n	8007de8 <HAL_TIM_Base_Start_IT+0x80>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a21      	ldr	r2, [pc, #132]	; (8007e40 <HAL_TIM_Base_Start_IT+0xd8>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d013      	beq.n	8007de8 <HAL_TIM_Base_Start_IT+0x80>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a1f      	ldr	r2, [pc, #124]	; (8007e44 <HAL_TIM_Base_Start_IT+0xdc>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d00e      	beq.n	8007de8 <HAL_TIM_Base_Start_IT+0x80>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a1e      	ldr	r2, [pc, #120]	; (8007e48 <HAL_TIM_Base_Start_IT+0xe0>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d009      	beq.n	8007de8 <HAL_TIM_Base_Start_IT+0x80>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a1c      	ldr	r2, [pc, #112]	; (8007e4c <HAL_TIM_Base_Start_IT+0xe4>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d004      	beq.n	8007de8 <HAL_TIM_Base_Start_IT+0x80>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a1b      	ldr	r2, [pc, #108]	; (8007e50 <HAL_TIM_Base_Start_IT+0xe8>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d115      	bne.n	8007e14 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	689a      	ldr	r2, [r3, #8]
 8007dee:	4b19      	ldr	r3, [pc, #100]	; (8007e54 <HAL_TIM_Base_Start_IT+0xec>)
 8007df0:	4013      	ands	r3, r2
 8007df2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2b06      	cmp	r3, #6
 8007df8:	d015      	beq.n	8007e26 <HAL_TIM_Base_Start_IT+0xbe>
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e00:	d011      	beq.n	8007e26 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f042 0201 	orr.w	r2, r2, #1
 8007e10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e12:	e008      	b.n	8007e26 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f042 0201 	orr.w	r2, r2, #1
 8007e22:	601a      	str	r2, [r3, #0]
 8007e24:	e000      	b.n	8007e28 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e26:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007e28:	2300      	movs	r3, #0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3714      	adds	r7, #20
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr
 8007e36:	bf00      	nop
 8007e38:	40010000 	.word	0x40010000
 8007e3c:	40000400 	.word	0x40000400
 8007e40:	40000800 	.word	0x40000800
 8007e44:	40000c00 	.word	0x40000c00
 8007e48:	40010400 	.word	0x40010400
 8007e4c:	40001800 	.word	0x40001800
 8007e50:	40014000 	.word	0x40014000
 8007e54:	00010007 	.word	0x00010007

08007e58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d101      	bne.n	8007e6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007e66:	2301      	movs	r3, #1
 8007e68:	e049      	b.n	8007efe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d106      	bne.n	8007e84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 f841 	bl	8007f06 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2202      	movs	r2, #2
 8007e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	3304      	adds	r3, #4
 8007e94:	4619      	mov	r1, r3
 8007e96:	4610      	mov	r0, r2
 8007e98:	f000 fb9c 	bl	80085d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007efc:	2300      	movs	r3, #0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3708      	adds	r7, #8
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}

08007f06 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007f06:	b480      	push	{r7}
 8007f08:	b083      	sub	sp, #12
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007f0e:	bf00      	nop
 8007f10:	370c      	adds	r7, #12
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr

08007f1a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b082      	sub	sp, #8
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	691b      	ldr	r3, [r3, #16]
 8007f28:	f003 0302 	and.w	r3, r3, #2
 8007f2c:	2b02      	cmp	r3, #2
 8007f2e:	d122      	bne.n	8007f76 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	68db      	ldr	r3, [r3, #12]
 8007f36:	f003 0302 	and.w	r3, r3, #2
 8007f3a:	2b02      	cmp	r3, #2
 8007f3c:	d11b      	bne.n	8007f76 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f06f 0202 	mvn.w	r2, #2
 8007f46:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	699b      	ldr	r3, [r3, #24]
 8007f54:	f003 0303 	and.w	r3, r3, #3
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d003      	beq.n	8007f64 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f000 fb1b 	bl	8008598 <HAL_TIM_IC_CaptureCallback>
 8007f62:	e005      	b.n	8007f70 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 fb0d 	bl	8008584 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 fb1e 	bl	80085ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2200      	movs	r2, #0
 8007f74:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	691b      	ldr	r3, [r3, #16]
 8007f7c:	f003 0304 	and.w	r3, r3, #4
 8007f80:	2b04      	cmp	r3, #4
 8007f82:	d122      	bne.n	8007fca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	68db      	ldr	r3, [r3, #12]
 8007f8a:	f003 0304 	and.w	r3, r3, #4
 8007f8e:	2b04      	cmp	r3, #4
 8007f90:	d11b      	bne.n	8007fca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f06f 0204 	mvn.w	r2, #4
 8007f9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2202      	movs	r2, #2
 8007fa0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	699b      	ldr	r3, [r3, #24]
 8007fa8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d003      	beq.n	8007fb8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 faf1 	bl	8008598 <HAL_TIM_IC_CaptureCallback>
 8007fb6:	e005      	b.n	8007fc4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 fae3 	bl	8008584 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 faf4 	bl	80085ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	691b      	ldr	r3, [r3, #16]
 8007fd0:	f003 0308 	and.w	r3, r3, #8
 8007fd4:	2b08      	cmp	r3, #8
 8007fd6:	d122      	bne.n	800801e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	f003 0308 	and.w	r3, r3, #8
 8007fe2:	2b08      	cmp	r3, #8
 8007fe4:	d11b      	bne.n	800801e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f06f 0208 	mvn.w	r2, #8
 8007fee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2204      	movs	r2, #4
 8007ff4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	69db      	ldr	r3, [r3, #28]
 8007ffc:	f003 0303 	and.w	r3, r3, #3
 8008000:	2b00      	cmp	r3, #0
 8008002:	d003      	beq.n	800800c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 fac7 	bl	8008598 <HAL_TIM_IC_CaptureCallback>
 800800a:	e005      	b.n	8008018 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 fab9 	bl	8008584 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 faca 	bl	80085ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2200      	movs	r2, #0
 800801c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	691b      	ldr	r3, [r3, #16]
 8008024:	f003 0310 	and.w	r3, r3, #16
 8008028:	2b10      	cmp	r3, #16
 800802a:	d122      	bne.n	8008072 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	f003 0310 	and.w	r3, r3, #16
 8008036:	2b10      	cmp	r3, #16
 8008038:	d11b      	bne.n	8008072 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f06f 0210 	mvn.w	r2, #16
 8008042:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2208      	movs	r2, #8
 8008048:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	69db      	ldr	r3, [r3, #28]
 8008050:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008054:	2b00      	cmp	r3, #0
 8008056:	d003      	beq.n	8008060 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 fa9d 	bl	8008598 <HAL_TIM_IC_CaptureCallback>
 800805e:	e005      	b.n	800806c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 fa8f 	bl	8008584 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 faa0 	bl	80085ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	691b      	ldr	r3, [r3, #16]
 8008078:	f003 0301 	and.w	r3, r3, #1
 800807c:	2b01      	cmp	r3, #1
 800807e:	d10e      	bne.n	800809e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	68db      	ldr	r3, [r3, #12]
 8008086:	f003 0301 	and.w	r3, r3, #1
 800808a:	2b01      	cmp	r3, #1
 800808c:	d107      	bne.n	800809e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f06f 0201 	mvn.w	r2, #1
 8008096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 fa69 	bl	8008570 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	691b      	ldr	r3, [r3, #16]
 80080a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080a8:	2b80      	cmp	r3, #128	; 0x80
 80080aa:	d10e      	bne.n	80080ca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	68db      	ldr	r3, [r3, #12]
 80080b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080b6:	2b80      	cmp	r3, #128	; 0x80
 80080b8:	d107      	bne.n	80080ca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80080c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 ffa9 	bl	800901c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	691b      	ldr	r3, [r3, #16]
 80080d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080d8:	d10e      	bne.n	80080f8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080e4:	2b80      	cmp	r3, #128	; 0x80
 80080e6:	d107      	bne.n	80080f8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80080f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 ff9c 	bl	8009030 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	691b      	ldr	r3, [r3, #16]
 80080fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008102:	2b40      	cmp	r3, #64	; 0x40
 8008104:	d10e      	bne.n	8008124 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008110:	2b40      	cmp	r3, #64	; 0x40
 8008112:	d107      	bne.n	8008124 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800811c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 fa4e 	bl	80085c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	f003 0320 	and.w	r3, r3, #32
 800812e:	2b20      	cmp	r3, #32
 8008130:	d10e      	bne.n	8008150 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	f003 0320 	and.w	r3, r3, #32
 800813c:	2b20      	cmp	r3, #32
 800813e:	d107      	bne.n	8008150 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f06f 0220 	mvn.w	r2, #32
 8008148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 ff5c 	bl	8009008 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008150:	bf00      	nop
 8008152:	3708      	adds	r7, #8
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b086      	sub	sp, #24
 800815c:	af00      	add	r7, sp, #0
 800815e:	60f8      	str	r0, [r7, #12]
 8008160:	60b9      	str	r1, [r7, #8]
 8008162:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008164:	2300      	movs	r3, #0
 8008166:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800816e:	2b01      	cmp	r3, #1
 8008170:	d101      	bne.n	8008176 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008172:	2302      	movs	r3, #2
 8008174:	e0ff      	b.n	8008376 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2201      	movs	r2, #1
 800817a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2b14      	cmp	r3, #20
 8008182:	f200 80f0 	bhi.w	8008366 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008186:	a201      	add	r2, pc, #4	; (adr r2, 800818c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800818c:	080081e1 	.word	0x080081e1
 8008190:	08008367 	.word	0x08008367
 8008194:	08008367 	.word	0x08008367
 8008198:	08008367 	.word	0x08008367
 800819c:	08008221 	.word	0x08008221
 80081a0:	08008367 	.word	0x08008367
 80081a4:	08008367 	.word	0x08008367
 80081a8:	08008367 	.word	0x08008367
 80081ac:	08008263 	.word	0x08008263
 80081b0:	08008367 	.word	0x08008367
 80081b4:	08008367 	.word	0x08008367
 80081b8:	08008367 	.word	0x08008367
 80081bc:	080082a3 	.word	0x080082a3
 80081c0:	08008367 	.word	0x08008367
 80081c4:	08008367 	.word	0x08008367
 80081c8:	08008367 	.word	0x08008367
 80081cc:	080082e5 	.word	0x080082e5
 80081d0:	08008367 	.word	0x08008367
 80081d4:	08008367 	.word	0x08008367
 80081d8:	08008367 	.word	0x08008367
 80081dc:	08008325 	.word	0x08008325
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	68b9      	ldr	r1, [r7, #8]
 80081e6:	4618      	mov	r0, r3
 80081e8:	f000 fa8e 	bl	8008708 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	699a      	ldr	r2, [r3, #24]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f042 0208 	orr.w	r2, r2, #8
 80081fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	699a      	ldr	r2, [r3, #24]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f022 0204 	bic.w	r2, r2, #4
 800820a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	6999      	ldr	r1, [r3, #24]
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	691a      	ldr	r2, [r3, #16]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	430a      	orrs	r2, r1
 800821c:	619a      	str	r2, [r3, #24]
      break;
 800821e:	e0a5      	b.n	800836c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	68b9      	ldr	r1, [r7, #8]
 8008226:	4618      	mov	r0, r3
 8008228:	f000 fafe 	bl	8008828 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	699a      	ldr	r2, [r3, #24]
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800823a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	699a      	ldr	r2, [r3, #24]
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800824a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	6999      	ldr	r1, [r3, #24]
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	691b      	ldr	r3, [r3, #16]
 8008256:	021a      	lsls	r2, r3, #8
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	430a      	orrs	r2, r1
 800825e:	619a      	str	r2, [r3, #24]
      break;
 8008260:	e084      	b.n	800836c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	68b9      	ldr	r1, [r7, #8]
 8008268:	4618      	mov	r0, r3
 800826a:	f000 fb67 	bl	800893c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	69da      	ldr	r2, [r3, #28]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f042 0208 	orr.w	r2, r2, #8
 800827c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	69da      	ldr	r2, [r3, #28]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f022 0204 	bic.w	r2, r2, #4
 800828c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	69d9      	ldr	r1, [r3, #28]
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	691a      	ldr	r2, [r3, #16]
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	430a      	orrs	r2, r1
 800829e:	61da      	str	r2, [r3, #28]
      break;
 80082a0:	e064      	b.n	800836c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	68b9      	ldr	r1, [r7, #8]
 80082a8:	4618      	mov	r0, r3
 80082aa:	f000 fbcf 	bl	8008a4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	69da      	ldr	r2, [r3, #28]
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	69da      	ldr	r2, [r3, #28]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	69d9      	ldr	r1, [r3, #28]
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	691b      	ldr	r3, [r3, #16]
 80082d8:	021a      	lsls	r2, r3, #8
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	430a      	orrs	r2, r1
 80082e0:	61da      	str	r2, [r3, #28]
      break;
 80082e2:	e043      	b.n	800836c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	68b9      	ldr	r1, [r7, #8]
 80082ea:	4618      	mov	r0, r3
 80082ec:	f000 fc18 	bl	8008b20 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f042 0208 	orr.w	r2, r2, #8
 80082fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f022 0204 	bic.w	r2, r2, #4
 800830e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	691a      	ldr	r2, [r3, #16]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	430a      	orrs	r2, r1
 8008320:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008322:	e023      	b.n	800836c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	68b9      	ldr	r1, [r7, #8]
 800832a:	4618      	mov	r0, r3
 800832c:	f000 fc5c 	bl	8008be8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800833e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800834e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	691b      	ldr	r3, [r3, #16]
 800835a:	021a      	lsls	r2, r3, #8
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	430a      	orrs	r2, r1
 8008362:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008364:	e002      	b.n	800836c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008366:	2301      	movs	r3, #1
 8008368:	75fb      	strb	r3, [r7, #23]
      break;
 800836a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2200      	movs	r2, #0
 8008370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008374:	7dfb      	ldrb	r3, [r7, #23]
}
 8008376:	4618      	mov	r0, r3
 8008378:	3718      	adds	r7, #24
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
 800837e:	bf00      	nop

08008380 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b084      	sub	sp, #16
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800838a:	2300      	movs	r3, #0
 800838c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008394:	2b01      	cmp	r3, #1
 8008396:	d101      	bne.n	800839c <HAL_TIM_ConfigClockSource+0x1c>
 8008398:	2302      	movs	r3, #2
 800839a:	e0dc      	b.n	8008556 <HAL_TIM_ConfigClockSource+0x1d6>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2201      	movs	r2, #1
 80083a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2202      	movs	r2, #2
 80083a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80083b4:	68ba      	ldr	r2, [r7, #8]
 80083b6:	4b6a      	ldr	r3, [pc, #424]	; (8008560 <HAL_TIM_ConfigClockSource+0x1e0>)
 80083b8:	4013      	ands	r3, r2
 80083ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80083c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	68ba      	ldr	r2, [r7, #8]
 80083ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a64      	ldr	r2, [pc, #400]	; (8008564 <HAL_TIM_ConfigClockSource+0x1e4>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	f000 80a9 	beq.w	800852a <HAL_TIM_ConfigClockSource+0x1aa>
 80083d8:	4a62      	ldr	r2, [pc, #392]	; (8008564 <HAL_TIM_ConfigClockSource+0x1e4>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	f200 80ae 	bhi.w	800853c <HAL_TIM_ConfigClockSource+0x1bc>
 80083e0:	4a61      	ldr	r2, [pc, #388]	; (8008568 <HAL_TIM_ConfigClockSource+0x1e8>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	f000 80a1 	beq.w	800852a <HAL_TIM_ConfigClockSource+0x1aa>
 80083e8:	4a5f      	ldr	r2, [pc, #380]	; (8008568 <HAL_TIM_ConfigClockSource+0x1e8>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	f200 80a6 	bhi.w	800853c <HAL_TIM_ConfigClockSource+0x1bc>
 80083f0:	4a5e      	ldr	r2, [pc, #376]	; (800856c <HAL_TIM_ConfigClockSource+0x1ec>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	f000 8099 	beq.w	800852a <HAL_TIM_ConfigClockSource+0x1aa>
 80083f8:	4a5c      	ldr	r2, [pc, #368]	; (800856c <HAL_TIM_ConfigClockSource+0x1ec>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	f200 809e 	bhi.w	800853c <HAL_TIM_ConfigClockSource+0x1bc>
 8008400:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008404:	f000 8091 	beq.w	800852a <HAL_TIM_ConfigClockSource+0x1aa>
 8008408:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800840c:	f200 8096 	bhi.w	800853c <HAL_TIM_ConfigClockSource+0x1bc>
 8008410:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008414:	f000 8089 	beq.w	800852a <HAL_TIM_ConfigClockSource+0x1aa>
 8008418:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800841c:	f200 808e 	bhi.w	800853c <HAL_TIM_ConfigClockSource+0x1bc>
 8008420:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008424:	d03e      	beq.n	80084a4 <HAL_TIM_ConfigClockSource+0x124>
 8008426:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800842a:	f200 8087 	bhi.w	800853c <HAL_TIM_ConfigClockSource+0x1bc>
 800842e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008432:	f000 8086 	beq.w	8008542 <HAL_TIM_ConfigClockSource+0x1c2>
 8008436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800843a:	d87f      	bhi.n	800853c <HAL_TIM_ConfigClockSource+0x1bc>
 800843c:	2b70      	cmp	r3, #112	; 0x70
 800843e:	d01a      	beq.n	8008476 <HAL_TIM_ConfigClockSource+0xf6>
 8008440:	2b70      	cmp	r3, #112	; 0x70
 8008442:	d87b      	bhi.n	800853c <HAL_TIM_ConfigClockSource+0x1bc>
 8008444:	2b60      	cmp	r3, #96	; 0x60
 8008446:	d050      	beq.n	80084ea <HAL_TIM_ConfigClockSource+0x16a>
 8008448:	2b60      	cmp	r3, #96	; 0x60
 800844a:	d877      	bhi.n	800853c <HAL_TIM_ConfigClockSource+0x1bc>
 800844c:	2b50      	cmp	r3, #80	; 0x50
 800844e:	d03c      	beq.n	80084ca <HAL_TIM_ConfigClockSource+0x14a>
 8008450:	2b50      	cmp	r3, #80	; 0x50
 8008452:	d873      	bhi.n	800853c <HAL_TIM_ConfigClockSource+0x1bc>
 8008454:	2b40      	cmp	r3, #64	; 0x40
 8008456:	d058      	beq.n	800850a <HAL_TIM_ConfigClockSource+0x18a>
 8008458:	2b40      	cmp	r3, #64	; 0x40
 800845a:	d86f      	bhi.n	800853c <HAL_TIM_ConfigClockSource+0x1bc>
 800845c:	2b30      	cmp	r3, #48	; 0x30
 800845e:	d064      	beq.n	800852a <HAL_TIM_ConfigClockSource+0x1aa>
 8008460:	2b30      	cmp	r3, #48	; 0x30
 8008462:	d86b      	bhi.n	800853c <HAL_TIM_ConfigClockSource+0x1bc>
 8008464:	2b20      	cmp	r3, #32
 8008466:	d060      	beq.n	800852a <HAL_TIM_ConfigClockSource+0x1aa>
 8008468:	2b20      	cmp	r3, #32
 800846a:	d867      	bhi.n	800853c <HAL_TIM_ConfigClockSource+0x1bc>
 800846c:	2b00      	cmp	r3, #0
 800846e:	d05c      	beq.n	800852a <HAL_TIM_ConfigClockSource+0x1aa>
 8008470:	2b10      	cmp	r3, #16
 8008472:	d05a      	beq.n	800852a <HAL_TIM_ConfigClockSource+0x1aa>
 8008474:	e062      	b.n	800853c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6818      	ldr	r0, [r3, #0]
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	6899      	ldr	r1, [r3, #8]
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	685a      	ldr	r2, [r3, #4]
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	68db      	ldr	r3, [r3, #12]
 8008486:	f000 fc93 	bl	8008db0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008498:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	68ba      	ldr	r2, [r7, #8]
 80084a0:	609a      	str	r2, [r3, #8]
      break;
 80084a2:	e04f      	b.n	8008544 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6818      	ldr	r0, [r3, #0]
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	6899      	ldr	r1, [r3, #8]
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	685a      	ldr	r2, [r3, #4]
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	68db      	ldr	r3, [r3, #12]
 80084b4:	f000 fc7c 	bl	8008db0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	689a      	ldr	r2, [r3, #8]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80084c6:	609a      	str	r2, [r3, #8]
      break;
 80084c8:	e03c      	b.n	8008544 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6818      	ldr	r0, [r3, #0]
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	6859      	ldr	r1, [r3, #4]
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	68db      	ldr	r3, [r3, #12]
 80084d6:	461a      	mov	r2, r3
 80084d8:	f000 fbec 	bl	8008cb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	2150      	movs	r1, #80	; 0x50
 80084e2:	4618      	mov	r0, r3
 80084e4:	f000 fc46 	bl	8008d74 <TIM_ITRx_SetConfig>
      break;
 80084e8:	e02c      	b.n	8008544 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6818      	ldr	r0, [r3, #0]
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	6859      	ldr	r1, [r3, #4]
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	461a      	mov	r2, r3
 80084f8:	f000 fc0b 	bl	8008d12 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2160      	movs	r1, #96	; 0x60
 8008502:	4618      	mov	r0, r3
 8008504:	f000 fc36 	bl	8008d74 <TIM_ITRx_SetConfig>
      break;
 8008508:	e01c      	b.n	8008544 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6818      	ldr	r0, [r3, #0]
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	6859      	ldr	r1, [r3, #4]
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	68db      	ldr	r3, [r3, #12]
 8008516:	461a      	mov	r2, r3
 8008518:	f000 fbcc 	bl	8008cb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	2140      	movs	r1, #64	; 0x40
 8008522:	4618      	mov	r0, r3
 8008524:	f000 fc26 	bl	8008d74 <TIM_ITRx_SetConfig>
      break;
 8008528:	e00c      	b.n	8008544 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681a      	ldr	r2, [r3, #0]
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4619      	mov	r1, r3
 8008534:	4610      	mov	r0, r2
 8008536:	f000 fc1d 	bl	8008d74 <TIM_ITRx_SetConfig>
      break;
 800853a:	e003      	b.n	8008544 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800853c:	2301      	movs	r3, #1
 800853e:	73fb      	strb	r3, [r7, #15]
      break;
 8008540:	e000      	b.n	8008544 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008542:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2201      	movs	r2, #1
 8008548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008554:	7bfb      	ldrb	r3, [r7, #15]
}
 8008556:	4618      	mov	r0, r3
 8008558:	3710      	adds	r7, #16
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	ffceff88 	.word	0xffceff88
 8008564:	00100040 	.word	0x00100040
 8008568:	00100030 	.word	0x00100030
 800856c:	00100020 	.word	0x00100020

08008570 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008570:	b480      	push	{r7}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008578:	bf00      	nop
 800857a:	370c      	adds	r7, #12
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr

08008584 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008584:	b480      	push	{r7}
 8008586:	b083      	sub	sp, #12
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800858c:	bf00      	nop
 800858e:	370c      	adds	r7, #12
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008598:	b480      	push	{r7}
 800859a:	b083      	sub	sp, #12
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80085a0:	bf00      	nop
 80085a2:	370c      	adds	r7, #12
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr

080085ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b083      	sub	sp, #12
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80085b4:	bf00      	nop
 80085b6:	370c      	adds	r7, #12
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr

080085c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80085c8:	bf00      	nop
 80085ca:	370c      	adds	r7, #12
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr

080085d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b085      	sub	sp, #20
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	4a40      	ldr	r2, [pc, #256]	; (80086e8 <TIM_Base_SetConfig+0x114>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d013      	beq.n	8008614 <TIM_Base_SetConfig+0x40>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085f2:	d00f      	beq.n	8008614 <TIM_Base_SetConfig+0x40>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	4a3d      	ldr	r2, [pc, #244]	; (80086ec <TIM_Base_SetConfig+0x118>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d00b      	beq.n	8008614 <TIM_Base_SetConfig+0x40>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	4a3c      	ldr	r2, [pc, #240]	; (80086f0 <TIM_Base_SetConfig+0x11c>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d007      	beq.n	8008614 <TIM_Base_SetConfig+0x40>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	4a3b      	ldr	r2, [pc, #236]	; (80086f4 <TIM_Base_SetConfig+0x120>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d003      	beq.n	8008614 <TIM_Base_SetConfig+0x40>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	4a3a      	ldr	r2, [pc, #232]	; (80086f8 <TIM_Base_SetConfig+0x124>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d108      	bne.n	8008626 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800861a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	68fa      	ldr	r2, [r7, #12]
 8008622:	4313      	orrs	r3, r2
 8008624:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	4a2f      	ldr	r2, [pc, #188]	; (80086e8 <TIM_Base_SetConfig+0x114>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d01f      	beq.n	800866e <TIM_Base_SetConfig+0x9a>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008634:	d01b      	beq.n	800866e <TIM_Base_SetConfig+0x9a>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	4a2c      	ldr	r2, [pc, #176]	; (80086ec <TIM_Base_SetConfig+0x118>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d017      	beq.n	800866e <TIM_Base_SetConfig+0x9a>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	4a2b      	ldr	r2, [pc, #172]	; (80086f0 <TIM_Base_SetConfig+0x11c>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d013      	beq.n	800866e <TIM_Base_SetConfig+0x9a>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	4a2a      	ldr	r2, [pc, #168]	; (80086f4 <TIM_Base_SetConfig+0x120>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d00f      	beq.n	800866e <TIM_Base_SetConfig+0x9a>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4a29      	ldr	r2, [pc, #164]	; (80086f8 <TIM_Base_SetConfig+0x124>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d00b      	beq.n	800866e <TIM_Base_SetConfig+0x9a>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	4a28      	ldr	r2, [pc, #160]	; (80086fc <TIM_Base_SetConfig+0x128>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d007      	beq.n	800866e <TIM_Base_SetConfig+0x9a>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	4a27      	ldr	r2, [pc, #156]	; (8008700 <TIM_Base_SetConfig+0x12c>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d003      	beq.n	800866e <TIM_Base_SetConfig+0x9a>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	4a26      	ldr	r2, [pc, #152]	; (8008704 <TIM_Base_SetConfig+0x130>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d108      	bne.n	8008680 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008674:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	68db      	ldr	r3, [r3, #12]
 800867a:	68fa      	ldr	r2, [r7, #12]
 800867c:	4313      	orrs	r3, r2
 800867e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	695b      	ldr	r3, [r3, #20]
 800868a:	4313      	orrs	r3, r2
 800868c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	68fa      	ldr	r2, [r7, #12]
 8008692:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	689a      	ldr	r2, [r3, #8]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	4a10      	ldr	r2, [pc, #64]	; (80086e8 <TIM_Base_SetConfig+0x114>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d00f      	beq.n	80086cc <TIM_Base_SetConfig+0xf8>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	4a12      	ldr	r2, [pc, #72]	; (80086f8 <TIM_Base_SetConfig+0x124>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d00b      	beq.n	80086cc <TIM_Base_SetConfig+0xf8>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	4a11      	ldr	r2, [pc, #68]	; (80086fc <TIM_Base_SetConfig+0x128>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d007      	beq.n	80086cc <TIM_Base_SetConfig+0xf8>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	4a10      	ldr	r2, [pc, #64]	; (8008700 <TIM_Base_SetConfig+0x12c>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d003      	beq.n	80086cc <TIM_Base_SetConfig+0xf8>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	4a0f      	ldr	r2, [pc, #60]	; (8008704 <TIM_Base_SetConfig+0x130>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d103      	bne.n	80086d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	691a      	ldr	r2, [r3, #16]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2201      	movs	r2, #1
 80086d8:	615a      	str	r2, [r3, #20]
}
 80086da:	bf00      	nop
 80086dc:	3714      	adds	r7, #20
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr
 80086e6:	bf00      	nop
 80086e8:	40010000 	.word	0x40010000
 80086ec:	40000400 	.word	0x40000400
 80086f0:	40000800 	.word	0x40000800
 80086f4:	40000c00 	.word	0x40000c00
 80086f8:	40010400 	.word	0x40010400
 80086fc:	40014000 	.word	0x40014000
 8008700:	40014400 	.word	0x40014400
 8008704:	40014800 	.word	0x40014800

08008708 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008708:	b480      	push	{r7}
 800870a:	b087      	sub	sp, #28
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6a1b      	ldr	r3, [r3, #32]
 8008716:	f023 0201 	bic.w	r2, r3, #1
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6a1b      	ldr	r3, [r3, #32]
 8008722:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	699b      	ldr	r3, [r3, #24]
 800872e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008730:	68fa      	ldr	r2, [r7, #12]
 8008732:	4b37      	ldr	r3, [pc, #220]	; (8008810 <TIM_OC1_SetConfig+0x108>)
 8008734:	4013      	ands	r3, r2
 8008736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f023 0303 	bic.w	r3, r3, #3
 800873e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	68fa      	ldr	r2, [r7, #12]
 8008746:	4313      	orrs	r3, r2
 8008748:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	f023 0302 	bic.w	r3, r3, #2
 8008750:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	689b      	ldr	r3, [r3, #8]
 8008756:	697a      	ldr	r2, [r7, #20]
 8008758:	4313      	orrs	r3, r2
 800875a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	4a2d      	ldr	r2, [pc, #180]	; (8008814 <TIM_OC1_SetConfig+0x10c>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d00f      	beq.n	8008784 <TIM_OC1_SetConfig+0x7c>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	4a2c      	ldr	r2, [pc, #176]	; (8008818 <TIM_OC1_SetConfig+0x110>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d00b      	beq.n	8008784 <TIM_OC1_SetConfig+0x7c>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	4a2b      	ldr	r2, [pc, #172]	; (800881c <TIM_OC1_SetConfig+0x114>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d007      	beq.n	8008784 <TIM_OC1_SetConfig+0x7c>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	4a2a      	ldr	r2, [pc, #168]	; (8008820 <TIM_OC1_SetConfig+0x118>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d003      	beq.n	8008784 <TIM_OC1_SetConfig+0x7c>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	4a29      	ldr	r2, [pc, #164]	; (8008824 <TIM_OC1_SetConfig+0x11c>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d10c      	bne.n	800879e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	f023 0308 	bic.w	r3, r3, #8
 800878a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	68db      	ldr	r3, [r3, #12]
 8008790:	697a      	ldr	r2, [r7, #20]
 8008792:	4313      	orrs	r3, r2
 8008794:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	f023 0304 	bic.w	r3, r3, #4
 800879c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	4a1c      	ldr	r2, [pc, #112]	; (8008814 <TIM_OC1_SetConfig+0x10c>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d00f      	beq.n	80087c6 <TIM_OC1_SetConfig+0xbe>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	4a1b      	ldr	r2, [pc, #108]	; (8008818 <TIM_OC1_SetConfig+0x110>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d00b      	beq.n	80087c6 <TIM_OC1_SetConfig+0xbe>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	4a1a      	ldr	r2, [pc, #104]	; (800881c <TIM_OC1_SetConfig+0x114>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d007      	beq.n	80087c6 <TIM_OC1_SetConfig+0xbe>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	4a19      	ldr	r2, [pc, #100]	; (8008820 <TIM_OC1_SetConfig+0x118>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d003      	beq.n	80087c6 <TIM_OC1_SetConfig+0xbe>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	4a18      	ldr	r2, [pc, #96]	; (8008824 <TIM_OC1_SetConfig+0x11c>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d111      	bne.n	80087ea <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80087d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	695b      	ldr	r3, [r3, #20]
 80087da:	693a      	ldr	r2, [r7, #16]
 80087dc:	4313      	orrs	r3, r2
 80087de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	699b      	ldr	r3, [r3, #24]
 80087e4:	693a      	ldr	r2, [r7, #16]
 80087e6:	4313      	orrs	r3, r2
 80087e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	693a      	ldr	r2, [r7, #16]
 80087ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	68fa      	ldr	r2, [r7, #12]
 80087f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	685a      	ldr	r2, [r3, #4]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	697a      	ldr	r2, [r7, #20]
 8008802:	621a      	str	r2, [r3, #32]
}
 8008804:	bf00      	nop
 8008806:	371c      	adds	r7, #28
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr
 8008810:	fffeff8f 	.word	0xfffeff8f
 8008814:	40010000 	.word	0x40010000
 8008818:	40010400 	.word	0x40010400
 800881c:	40014000 	.word	0x40014000
 8008820:	40014400 	.word	0x40014400
 8008824:	40014800 	.word	0x40014800

08008828 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008828:	b480      	push	{r7}
 800882a:	b087      	sub	sp, #28
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6a1b      	ldr	r3, [r3, #32]
 8008836:	f023 0210 	bic.w	r2, r3, #16
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6a1b      	ldr	r3, [r3, #32]
 8008842:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	699b      	ldr	r3, [r3, #24]
 800884e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008850:	68fa      	ldr	r2, [r7, #12]
 8008852:	4b34      	ldr	r3, [pc, #208]	; (8008924 <TIM_OC2_SetConfig+0xfc>)
 8008854:	4013      	ands	r3, r2
 8008856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800885e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	021b      	lsls	r3, r3, #8
 8008866:	68fa      	ldr	r2, [r7, #12]
 8008868:	4313      	orrs	r3, r2
 800886a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	f023 0320 	bic.w	r3, r3, #32
 8008872:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	689b      	ldr	r3, [r3, #8]
 8008878:	011b      	lsls	r3, r3, #4
 800887a:	697a      	ldr	r2, [r7, #20]
 800887c:	4313      	orrs	r3, r2
 800887e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	4a29      	ldr	r2, [pc, #164]	; (8008928 <TIM_OC2_SetConfig+0x100>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d003      	beq.n	8008890 <TIM_OC2_SetConfig+0x68>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	4a28      	ldr	r2, [pc, #160]	; (800892c <TIM_OC2_SetConfig+0x104>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d10d      	bne.n	80088ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008896:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	68db      	ldr	r3, [r3, #12]
 800889c:	011b      	lsls	r3, r3, #4
 800889e:	697a      	ldr	r2, [r7, #20]
 80088a0:	4313      	orrs	r3, r2
 80088a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	4a1e      	ldr	r2, [pc, #120]	; (8008928 <TIM_OC2_SetConfig+0x100>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d00f      	beq.n	80088d4 <TIM_OC2_SetConfig+0xac>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	4a1d      	ldr	r2, [pc, #116]	; (800892c <TIM_OC2_SetConfig+0x104>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d00b      	beq.n	80088d4 <TIM_OC2_SetConfig+0xac>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	4a1c      	ldr	r2, [pc, #112]	; (8008930 <TIM_OC2_SetConfig+0x108>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d007      	beq.n	80088d4 <TIM_OC2_SetConfig+0xac>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	4a1b      	ldr	r2, [pc, #108]	; (8008934 <TIM_OC2_SetConfig+0x10c>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d003      	beq.n	80088d4 <TIM_OC2_SetConfig+0xac>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	4a1a      	ldr	r2, [pc, #104]	; (8008938 <TIM_OC2_SetConfig+0x110>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d113      	bne.n	80088fc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80088da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80088e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	695b      	ldr	r3, [r3, #20]
 80088e8:	009b      	lsls	r3, r3, #2
 80088ea:	693a      	ldr	r2, [r7, #16]
 80088ec:	4313      	orrs	r3, r2
 80088ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	699b      	ldr	r3, [r3, #24]
 80088f4:	009b      	lsls	r3, r3, #2
 80088f6:	693a      	ldr	r2, [r7, #16]
 80088f8:	4313      	orrs	r3, r2
 80088fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	693a      	ldr	r2, [r7, #16]
 8008900:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	68fa      	ldr	r2, [r7, #12]
 8008906:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	685a      	ldr	r2, [r3, #4]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	697a      	ldr	r2, [r7, #20]
 8008914:	621a      	str	r2, [r3, #32]
}
 8008916:	bf00      	nop
 8008918:	371c      	adds	r7, #28
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr
 8008922:	bf00      	nop
 8008924:	feff8fff 	.word	0xfeff8fff
 8008928:	40010000 	.word	0x40010000
 800892c:	40010400 	.word	0x40010400
 8008930:	40014000 	.word	0x40014000
 8008934:	40014400 	.word	0x40014400
 8008938:	40014800 	.word	0x40014800

0800893c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800893c:	b480      	push	{r7}
 800893e:	b087      	sub	sp, #28
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6a1b      	ldr	r3, [r3, #32]
 800894a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6a1b      	ldr	r3, [r3, #32]
 8008956:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	69db      	ldr	r3, [r3, #28]
 8008962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008964:	68fa      	ldr	r2, [r7, #12]
 8008966:	4b33      	ldr	r3, [pc, #204]	; (8008a34 <TIM_OC3_SetConfig+0xf8>)
 8008968:	4013      	ands	r3, r2
 800896a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f023 0303 	bic.w	r3, r3, #3
 8008972:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	68fa      	ldr	r2, [r7, #12]
 800897a:	4313      	orrs	r3, r2
 800897c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008984:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	021b      	lsls	r3, r3, #8
 800898c:	697a      	ldr	r2, [r7, #20]
 800898e:	4313      	orrs	r3, r2
 8008990:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	4a28      	ldr	r2, [pc, #160]	; (8008a38 <TIM_OC3_SetConfig+0xfc>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d003      	beq.n	80089a2 <TIM_OC3_SetConfig+0x66>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	4a27      	ldr	r2, [pc, #156]	; (8008a3c <TIM_OC3_SetConfig+0x100>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d10d      	bne.n	80089be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80089a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	68db      	ldr	r3, [r3, #12]
 80089ae:	021b      	lsls	r3, r3, #8
 80089b0:	697a      	ldr	r2, [r7, #20]
 80089b2:	4313      	orrs	r3, r2
 80089b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80089bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	4a1d      	ldr	r2, [pc, #116]	; (8008a38 <TIM_OC3_SetConfig+0xfc>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d00f      	beq.n	80089e6 <TIM_OC3_SetConfig+0xaa>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	4a1c      	ldr	r2, [pc, #112]	; (8008a3c <TIM_OC3_SetConfig+0x100>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d00b      	beq.n	80089e6 <TIM_OC3_SetConfig+0xaa>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	4a1b      	ldr	r2, [pc, #108]	; (8008a40 <TIM_OC3_SetConfig+0x104>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d007      	beq.n	80089e6 <TIM_OC3_SetConfig+0xaa>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	4a1a      	ldr	r2, [pc, #104]	; (8008a44 <TIM_OC3_SetConfig+0x108>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d003      	beq.n	80089e6 <TIM_OC3_SetConfig+0xaa>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	4a19      	ldr	r2, [pc, #100]	; (8008a48 <TIM_OC3_SetConfig+0x10c>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d113      	bne.n	8008a0e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80089f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	695b      	ldr	r3, [r3, #20]
 80089fa:	011b      	lsls	r3, r3, #4
 80089fc:	693a      	ldr	r2, [r7, #16]
 80089fe:	4313      	orrs	r3, r2
 8008a00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	699b      	ldr	r3, [r3, #24]
 8008a06:	011b      	lsls	r3, r3, #4
 8008a08:	693a      	ldr	r2, [r7, #16]
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	693a      	ldr	r2, [r7, #16]
 8008a12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	68fa      	ldr	r2, [r7, #12]
 8008a18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	685a      	ldr	r2, [r3, #4]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	697a      	ldr	r2, [r7, #20]
 8008a26:	621a      	str	r2, [r3, #32]
}
 8008a28:	bf00      	nop
 8008a2a:	371c      	adds	r7, #28
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr
 8008a34:	fffeff8f 	.word	0xfffeff8f
 8008a38:	40010000 	.word	0x40010000
 8008a3c:	40010400 	.word	0x40010400
 8008a40:	40014000 	.word	0x40014000
 8008a44:	40014400 	.word	0x40014400
 8008a48:	40014800 	.word	0x40014800

08008a4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b087      	sub	sp, #28
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6a1b      	ldr	r3, [r3, #32]
 8008a5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6a1b      	ldr	r3, [r3, #32]
 8008a66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	69db      	ldr	r3, [r3, #28]
 8008a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008a74:	68fa      	ldr	r2, [r7, #12]
 8008a76:	4b24      	ldr	r3, [pc, #144]	; (8008b08 <TIM_OC4_SetConfig+0xbc>)
 8008a78:	4013      	ands	r3, r2
 8008a7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	021b      	lsls	r3, r3, #8
 8008a8a:	68fa      	ldr	r2, [r7, #12]
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	689b      	ldr	r3, [r3, #8]
 8008a9c:	031b      	lsls	r3, r3, #12
 8008a9e:	693a      	ldr	r2, [r7, #16]
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	4a19      	ldr	r2, [pc, #100]	; (8008b0c <TIM_OC4_SetConfig+0xc0>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d00f      	beq.n	8008acc <TIM_OC4_SetConfig+0x80>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	4a18      	ldr	r2, [pc, #96]	; (8008b10 <TIM_OC4_SetConfig+0xc4>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d00b      	beq.n	8008acc <TIM_OC4_SetConfig+0x80>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	4a17      	ldr	r2, [pc, #92]	; (8008b14 <TIM_OC4_SetConfig+0xc8>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d007      	beq.n	8008acc <TIM_OC4_SetConfig+0x80>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	4a16      	ldr	r2, [pc, #88]	; (8008b18 <TIM_OC4_SetConfig+0xcc>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d003      	beq.n	8008acc <TIM_OC4_SetConfig+0x80>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	4a15      	ldr	r2, [pc, #84]	; (8008b1c <TIM_OC4_SetConfig+0xd0>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d109      	bne.n	8008ae0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ad2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	695b      	ldr	r3, [r3, #20]
 8008ad8:	019b      	lsls	r3, r3, #6
 8008ada:	697a      	ldr	r2, [r7, #20]
 8008adc:	4313      	orrs	r3, r2
 8008ade:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	697a      	ldr	r2, [r7, #20]
 8008ae4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	68fa      	ldr	r2, [r7, #12]
 8008aea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	685a      	ldr	r2, [r3, #4]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	693a      	ldr	r2, [r7, #16]
 8008af8:	621a      	str	r2, [r3, #32]
}
 8008afa:	bf00      	nop
 8008afc:	371c      	adds	r7, #28
 8008afe:	46bd      	mov	sp, r7
 8008b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b04:	4770      	bx	lr
 8008b06:	bf00      	nop
 8008b08:	feff8fff 	.word	0xfeff8fff
 8008b0c:	40010000 	.word	0x40010000
 8008b10:	40010400 	.word	0x40010400
 8008b14:	40014000 	.word	0x40014000
 8008b18:	40014400 	.word	0x40014400
 8008b1c:	40014800 	.word	0x40014800

08008b20 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b087      	sub	sp, #28
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a1b      	ldr	r3, [r3, #32]
 8008b2e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6a1b      	ldr	r3, [r3, #32]
 8008b3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008b48:	68fa      	ldr	r2, [r7, #12]
 8008b4a:	4b21      	ldr	r3, [pc, #132]	; (8008bd0 <TIM_OC5_SetConfig+0xb0>)
 8008b4c:	4013      	ands	r3, r2
 8008b4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	68fa      	ldr	r2, [r7, #12]
 8008b56:	4313      	orrs	r3, r2
 8008b58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008b60:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	689b      	ldr	r3, [r3, #8]
 8008b66:	041b      	lsls	r3, r3, #16
 8008b68:	693a      	ldr	r2, [r7, #16]
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	4a18      	ldr	r2, [pc, #96]	; (8008bd4 <TIM_OC5_SetConfig+0xb4>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d00f      	beq.n	8008b96 <TIM_OC5_SetConfig+0x76>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	4a17      	ldr	r2, [pc, #92]	; (8008bd8 <TIM_OC5_SetConfig+0xb8>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d00b      	beq.n	8008b96 <TIM_OC5_SetConfig+0x76>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	4a16      	ldr	r2, [pc, #88]	; (8008bdc <TIM_OC5_SetConfig+0xbc>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d007      	beq.n	8008b96 <TIM_OC5_SetConfig+0x76>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	4a15      	ldr	r2, [pc, #84]	; (8008be0 <TIM_OC5_SetConfig+0xc0>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d003      	beq.n	8008b96 <TIM_OC5_SetConfig+0x76>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	4a14      	ldr	r2, [pc, #80]	; (8008be4 <TIM_OC5_SetConfig+0xc4>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d109      	bne.n	8008baa <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b9c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	695b      	ldr	r3, [r3, #20]
 8008ba2:	021b      	lsls	r3, r3, #8
 8008ba4:	697a      	ldr	r2, [r7, #20]
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	697a      	ldr	r2, [r7, #20]
 8008bae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	68fa      	ldr	r2, [r7, #12]
 8008bb4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	685a      	ldr	r2, [r3, #4]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	693a      	ldr	r2, [r7, #16]
 8008bc2:	621a      	str	r2, [r3, #32]
}
 8008bc4:	bf00      	nop
 8008bc6:	371c      	adds	r7, #28
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr
 8008bd0:	fffeff8f 	.word	0xfffeff8f
 8008bd4:	40010000 	.word	0x40010000
 8008bd8:	40010400 	.word	0x40010400
 8008bdc:	40014000 	.word	0x40014000
 8008be0:	40014400 	.word	0x40014400
 8008be4:	40014800 	.word	0x40014800

08008be8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b087      	sub	sp, #28
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6a1b      	ldr	r3, [r3, #32]
 8008bf6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6a1b      	ldr	r3, [r3, #32]
 8008c02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008c10:	68fa      	ldr	r2, [r7, #12]
 8008c12:	4b22      	ldr	r3, [pc, #136]	; (8008c9c <TIM_OC6_SetConfig+0xb4>)
 8008c14:	4013      	ands	r3, r2
 8008c16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	021b      	lsls	r3, r3, #8
 8008c1e:	68fa      	ldr	r2, [r7, #12]
 8008c20:	4313      	orrs	r3, r2
 8008c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008c2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	689b      	ldr	r3, [r3, #8]
 8008c30:	051b      	lsls	r3, r3, #20
 8008c32:	693a      	ldr	r2, [r7, #16]
 8008c34:	4313      	orrs	r3, r2
 8008c36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	4a19      	ldr	r2, [pc, #100]	; (8008ca0 <TIM_OC6_SetConfig+0xb8>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d00f      	beq.n	8008c60 <TIM_OC6_SetConfig+0x78>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	4a18      	ldr	r2, [pc, #96]	; (8008ca4 <TIM_OC6_SetConfig+0xbc>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d00b      	beq.n	8008c60 <TIM_OC6_SetConfig+0x78>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	4a17      	ldr	r2, [pc, #92]	; (8008ca8 <TIM_OC6_SetConfig+0xc0>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d007      	beq.n	8008c60 <TIM_OC6_SetConfig+0x78>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	4a16      	ldr	r2, [pc, #88]	; (8008cac <TIM_OC6_SetConfig+0xc4>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d003      	beq.n	8008c60 <TIM_OC6_SetConfig+0x78>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	4a15      	ldr	r2, [pc, #84]	; (8008cb0 <TIM_OC6_SetConfig+0xc8>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d109      	bne.n	8008c74 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c66:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	695b      	ldr	r3, [r3, #20]
 8008c6c:	029b      	lsls	r3, r3, #10
 8008c6e:	697a      	ldr	r2, [r7, #20]
 8008c70:	4313      	orrs	r3, r2
 8008c72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	697a      	ldr	r2, [r7, #20]
 8008c78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	68fa      	ldr	r2, [r7, #12]
 8008c7e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	685a      	ldr	r2, [r3, #4]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	693a      	ldr	r2, [r7, #16]
 8008c8c:	621a      	str	r2, [r3, #32]
}
 8008c8e:	bf00      	nop
 8008c90:	371c      	adds	r7, #28
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr
 8008c9a:	bf00      	nop
 8008c9c:	feff8fff 	.word	0xfeff8fff
 8008ca0:	40010000 	.word	0x40010000
 8008ca4:	40010400 	.word	0x40010400
 8008ca8:	40014000 	.word	0x40014000
 8008cac:	40014400 	.word	0x40014400
 8008cb0:	40014800 	.word	0x40014800

08008cb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b087      	sub	sp, #28
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	60b9      	str	r1, [r7, #8]
 8008cbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	6a1b      	ldr	r3, [r3, #32]
 8008cc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	6a1b      	ldr	r3, [r3, #32]
 8008cca:	f023 0201 	bic.w	r2, r3, #1
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	699b      	ldr	r3, [r3, #24]
 8008cd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008cde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	011b      	lsls	r3, r3, #4
 8008ce4:	693a      	ldr	r2, [r7, #16]
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	f023 030a 	bic.w	r3, r3, #10
 8008cf0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008cf2:	697a      	ldr	r2, [r7, #20]
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	693a      	ldr	r2, [r7, #16]
 8008cfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	697a      	ldr	r2, [r7, #20]
 8008d04:	621a      	str	r2, [r3, #32]
}
 8008d06:	bf00      	nop
 8008d08:	371c      	adds	r7, #28
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr

08008d12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d12:	b480      	push	{r7}
 8008d14:	b087      	sub	sp, #28
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	60f8      	str	r0, [r7, #12]
 8008d1a:	60b9      	str	r1, [r7, #8]
 8008d1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	6a1b      	ldr	r3, [r3, #32]
 8008d22:	f023 0210 	bic.w	r2, r3, #16
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	699b      	ldr	r3, [r3, #24]
 8008d2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	6a1b      	ldr	r3, [r3, #32]
 8008d34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	031b      	lsls	r3, r3, #12
 8008d42:	697a      	ldr	r2, [r7, #20]
 8008d44:	4313      	orrs	r3, r2
 8008d46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008d4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	011b      	lsls	r3, r3, #4
 8008d54:	693a      	ldr	r2, [r7, #16]
 8008d56:	4313      	orrs	r3, r2
 8008d58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	697a      	ldr	r2, [r7, #20]
 8008d5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	693a      	ldr	r2, [r7, #16]
 8008d64:	621a      	str	r2, [r3, #32]
}
 8008d66:	bf00      	nop
 8008d68:	371c      	adds	r7, #28
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr
	...

08008d74 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b085      	sub	sp, #20
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d84:	68fa      	ldr	r2, [r7, #12]
 8008d86:	4b09      	ldr	r3, [pc, #36]	; (8008dac <TIM_ITRx_SetConfig+0x38>)
 8008d88:	4013      	ands	r3, r2
 8008d8a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008d8c:	683a      	ldr	r2, [r7, #0]
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	4313      	orrs	r3, r2
 8008d92:	f043 0307 	orr.w	r3, r3, #7
 8008d96:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	68fa      	ldr	r2, [r7, #12]
 8008d9c:	609a      	str	r2, [r3, #8]
}
 8008d9e:	bf00      	nop
 8008da0:	3714      	adds	r7, #20
 8008da2:	46bd      	mov	sp, r7
 8008da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da8:	4770      	bx	lr
 8008daa:	bf00      	nop
 8008dac:	ffcfff8f 	.word	0xffcfff8f

08008db0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b087      	sub	sp, #28
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	60f8      	str	r0, [r7, #12]
 8008db8:	60b9      	str	r1, [r7, #8]
 8008dba:	607a      	str	r2, [r7, #4]
 8008dbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008dca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	021a      	lsls	r2, r3, #8
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	431a      	orrs	r2, r3
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	697a      	ldr	r2, [r7, #20]
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	697a      	ldr	r2, [r7, #20]
 8008de2:	609a      	str	r2, [r3, #8]
}
 8008de4:	bf00      	nop
 8008de6:	371c      	adds	r7, #28
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr

08008df0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b085      	sub	sp, #20
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d101      	bne.n	8008e08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e04:	2302      	movs	r3, #2
 8008e06:	e06d      	b.n	8008ee4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2202      	movs	r2, #2
 8008e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a30      	ldr	r2, [pc, #192]	; (8008ef0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d004      	beq.n	8008e3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a2f      	ldr	r2, [pc, #188]	; (8008ef4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d108      	bne.n	8008e4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008e42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	68fa      	ldr	r2, [r7, #12]
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	68fa      	ldr	r2, [r7, #12]
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	68fa      	ldr	r2, [r7, #12]
 8008e66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a20      	ldr	r2, [pc, #128]	; (8008ef0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d022      	beq.n	8008eb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e7a:	d01d      	beq.n	8008eb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a1d      	ldr	r2, [pc, #116]	; (8008ef8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d018      	beq.n	8008eb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a1c      	ldr	r2, [pc, #112]	; (8008efc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d013      	beq.n	8008eb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a1a      	ldr	r2, [pc, #104]	; (8008f00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d00e      	beq.n	8008eb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a15      	ldr	r2, [pc, #84]	; (8008ef4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d009      	beq.n	8008eb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a16      	ldr	r2, [pc, #88]	; (8008f04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d004      	beq.n	8008eb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4a15      	ldr	r2, [pc, #84]	; (8008f08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d10c      	bne.n	8008ed2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ebe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	689b      	ldr	r3, [r3, #8]
 8008ec4:	68ba      	ldr	r2, [r7, #8]
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	68ba      	ldr	r2, [r7, #8]
 8008ed0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2200      	movs	r2, #0
 8008ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ee2:	2300      	movs	r3, #0
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3714      	adds	r7, #20
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr
 8008ef0:	40010000 	.word	0x40010000
 8008ef4:	40010400 	.word	0x40010400
 8008ef8:	40000400 	.word	0x40000400
 8008efc:	40000800 	.word	0x40000800
 8008f00:	40000c00 	.word	0x40000c00
 8008f04:	40001800 	.word	0x40001800
 8008f08:	40014000 	.word	0x40014000

08008f0c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b085      	sub	sp, #20
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008f16:	2300      	movs	r3, #0
 8008f18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d101      	bne.n	8008f28 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008f24:	2302      	movs	r3, #2
 8008f26:	e065      	b.n	8008ff4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	68db      	ldr	r3, [r3, #12]
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	689b      	ldr	r3, [r3, #8]
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	4313      	orrs	r3, r2
 8008f58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4313      	orrs	r3, r2
 8008f66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	691b      	ldr	r3, [r3, #16]
 8008f72:	4313      	orrs	r3, r2
 8008f74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	695b      	ldr	r3, [r3, #20]
 8008f80:	4313      	orrs	r3, r2
 8008f82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	699b      	ldr	r3, [r3, #24]
 8008f9c:	041b      	lsls	r3, r3, #16
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4a16      	ldr	r2, [pc, #88]	; (8009000 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d004      	beq.n	8008fb6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a14      	ldr	r2, [pc, #80]	; (8009004 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d115      	bne.n	8008fe2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc0:	051b      	lsls	r3, r3, #20
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	69db      	ldr	r3, [r3, #28]
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	6a1b      	ldr	r3, [r3, #32]
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	68fa      	ldr	r2, [r7, #12]
 8008fe8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2200      	movs	r2, #0
 8008fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ff2:	2300      	movs	r3, #0
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3714      	adds	r7, #20
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr
 8009000:	40010000 	.word	0x40010000
 8009004:	40010400 	.word	0x40010400

08009008 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009008:	b480      	push	{r7}
 800900a:	b083      	sub	sp, #12
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009010:	bf00      	nop
 8009012:	370c      	adds	r7, #12
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr

0800901c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800901c:	b480      	push	{r7}
 800901e:	b083      	sub	sp, #12
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009024:	bf00      	nop
 8009026:	370c      	adds	r7, #12
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr

08009030 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009030:	b480      	push	{r7}
 8009032:	b083      	sub	sp, #12
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009038:	bf00      	nop
 800903a:	370c      	adds	r7, #12
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr

08009044 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b082      	sub	sp, #8
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d101      	bne.n	8009056 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009052:	2301      	movs	r3, #1
 8009054:	e042      	b.n	80090dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800905c:	2b00      	cmp	r3, #0
 800905e:	d106      	bne.n	800906e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2200      	movs	r2, #0
 8009064:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f7f8 fa31 	bl	80014d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2224      	movs	r2, #36	; 0x24
 8009072:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	681a      	ldr	r2, [r3, #0]
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f022 0201 	bic.w	r2, r2, #1
 8009084:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 fc80 	bl	800998c <UART_SetConfig>
 800908c:	4603      	mov	r3, r0
 800908e:	2b01      	cmp	r3, #1
 8009090:	d101      	bne.n	8009096 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009092:	2301      	movs	r3, #1
 8009094:	e022      	b.n	80090dc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800909a:	2b00      	cmp	r3, #0
 800909c:	d002      	beq.n	80090a4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f001 f9dc 	bl	800a45c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	685a      	ldr	r2, [r3, #4]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80090b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	689a      	ldr	r2, [r3, #8]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80090c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f042 0201 	orr.w	r2, r2, #1
 80090d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f001 fa63 	bl	800a5a0 <UART_CheckIdleState>
 80090da:	4603      	mov	r3, r0
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3708      	adds	r7, #8
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b08a      	sub	sp, #40	; 0x28
 80090e8:	af02      	add	r7, sp, #8
 80090ea:	60f8      	str	r0, [r7, #12]
 80090ec:	60b9      	str	r1, [r7, #8]
 80090ee:	603b      	str	r3, [r7, #0]
 80090f0:	4613      	mov	r3, r2
 80090f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090fa:	2b20      	cmp	r3, #32
 80090fc:	f040 8083 	bne.w	8009206 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d002      	beq.n	800910c <HAL_UART_Transmit+0x28>
 8009106:	88fb      	ldrh	r3, [r7, #6]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d101      	bne.n	8009110 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800910c:	2301      	movs	r3, #1
 800910e:	e07b      	b.n	8009208 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009116:	2b01      	cmp	r3, #1
 8009118:	d101      	bne.n	800911e <HAL_UART_Transmit+0x3a>
 800911a:	2302      	movs	r3, #2
 800911c:	e074      	b.n	8009208 <HAL_UART_Transmit+0x124>
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2201      	movs	r2, #1
 8009122:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2200      	movs	r2, #0
 800912a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2221      	movs	r2, #33	; 0x21
 8009132:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009136:	f7f8 fb7b 	bl	8001830 <HAL_GetTick>
 800913a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	88fa      	ldrh	r2, [r7, #6]
 8009140:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	88fa      	ldrh	r2, [r7, #6]
 8009148:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	689b      	ldr	r3, [r3, #8]
 8009150:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009154:	d108      	bne.n	8009168 <HAL_UART_Transmit+0x84>
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	691b      	ldr	r3, [r3, #16]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d104      	bne.n	8009168 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800915e:	2300      	movs	r3, #0
 8009160:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	61bb      	str	r3, [r7, #24]
 8009166:	e003      	b.n	8009170 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800916c:	2300      	movs	r3, #0
 800916e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	2200      	movs	r2, #0
 8009174:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8009178:	e02c      	b.n	80091d4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	9300      	str	r3, [sp, #0]
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	2200      	movs	r2, #0
 8009182:	2180      	movs	r1, #128	; 0x80
 8009184:	68f8      	ldr	r0, [r7, #12]
 8009186:	f001 fa56 	bl	800a636 <UART_WaitOnFlagUntilTimeout>
 800918a:	4603      	mov	r3, r0
 800918c:	2b00      	cmp	r3, #0
 800918e:	d001      	beq.n	8009194 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009190:	2303      	movs	r3, #3
 8009192:	e039      	b.n	8009208 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8009194:	69fb      	ldr	r3, [r7, #28]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d10b      	bne.n	80091b2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800919a:	69bb      	ldr	r3, [r7, #24]
 800919c:	881b      	ldrh	r3, [r3, #0]
 800919e:	461a      	mov	r2, r3
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80091a8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80091aa:	69bb      	ldr	r3, [r7, #24]
 80091ac:	3302      	adds	r3, #2
 80091ae:	61bb      	str	r3, [r7, #24]
 80091b0:	e007      	b.n	80091c2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80091b2:	69fb      	ldr	r3, [r7, #28]
 80091b4:	781a      	ldrb	r2, [r3, #0]
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80091bc:	69fb      	ldr	r3, [r7, #28]
 80091be:	3301      	adds	r3, #1
 80091c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80091c8:	b29b      	uxth	r3, r3
 80091ca:	3b01      	subs	r3, #1
 80091cc:	b29a      	uxth	r2, r3
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80091da:	b29b      	uxth	r3, r3
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d1cc      	bne.n	800917a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	9300      	str	r3, [sp, #0]
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	2200      	movs	r2, #0
 80091e8:	2140      	movs	r1, #64	; 0x40
 80091ea:	68f8      	ldr	r0, [r7, #12]
 80091ec:	f001 fa23 	bl	800a636 <UART_WaitOnFlagUntilTimeout>
 80091f0:	4603      	mov	r3, r0
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d001      	beq.n	80091fa <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80091f6:	2303      	movs	r3, #3
 80091f8:	e006      	b.n	8009208 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2220      	movs	r2, #32
 80091fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8009202:	2300      	movs	r3, #0
 8009204:	e000      	b.n	8009208 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8009206:	2302      	movs	r3, #2
  }
}
 8009208:	4618      	mov	r0, r3
 800920a:	3720      	adds	r7, #32
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b0ba      	sub	sp, #232	; 0xe8
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	69db      	ldr	r3, [r3, #28]
 800921e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	689b      	ldr	r3, [r3, #8]
 8009232:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009236:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800923a:	f640 030f 	movw	r3, #2063	; 0x80f
 800923e:	4013      	ands	r3, r2
 8009240:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009244:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009248:	2b00      	cmp	r3, #0
 800924a:	d11b      	bne.n	8009284 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800924c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009250:	f003 0320 	and.w	r3, r3, #32
 8009254:	2b00      	cmp	r3, #0
 8009256:	d015      	beq.n	8009284 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800925c:	f003 0320 	and.w	r3, r3, #32
 8009260:	2b00      	cmp	r3, #0
 8009262:	d105      	bne.n	8009270 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009264:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800926c:	2b00      	cmp	r3, #0
 800926e:	d009      	beq.n	8009284 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009274:	2b00      	cmp	r3, #0
 8009276:	f000 835a 	beq.w	800992e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	4798      	blx	r3
      }
      return;
 8009282:	e354      	b.n	800992e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009284:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009288:	2b00      	cmp	r3, #0
 800928a:	f000 811f 	beq.w	80094cc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800928e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009292:	4b8b      	ldr	r3, [pc, #556]	; (80094c0 <HAL_UART_IRQHandler+0x2b0>)
 8009294:	4013      	ands	r3, r2
 8009296:	2b00      	cmp	r3, #0
 8009298:	d106      	bne.n	80092a8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800929a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800929e:	4b89      	ldr	r3, [pc, #548]	; (80094c4 <HAL_UART_IRQHandler+0x2b4>)
 80092a0:	4013      	ands	r3, r2
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	f000 8112 	beq.w	80094cc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80092a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092ac:	f003 0301 	and.w	r3, r3, #1
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d011      	beq.n	80092d8 <HAL_UART_IRQHandler+0xc8>
 80092b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d00b      	beq.n	80092d8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	2201      	movs	r2, #1
 80092c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092ce:	f043 0201 	orr.w	r2, r3, #1
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80092d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092dc:	f003 0302 	and.w	r3, r3, #2
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d011      	beq.n	8009308 <HAL_UART_IRQHandler+0xf8>
 80092e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80092e8:	f003 0301 	and.w	r3, r3, #1
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d00b      	beq.n	8009308 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	2202      	movs	r2, #2
 80092f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092fe:	f043 0204 	orr.w	r2, r3, #4
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800930c:	f003 0304 	and.w	r3, r3, #4
 8009310:	2b00      	cmp	r3, #0
 8009312:	d011      	beq.n	8009338 <HAL_UART_IRQHandler+0x128>
 8009314:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009318:	f003 0301 	and.w	r3, r3, #1
 800931c:	2b00      	cmp	r3, #0
 800931e:	d00b      	beq.n	8009338 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	2204      	movs	r2, #4
 8009326:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800932e:	f043 0202 	orr.w	r2, r3, #2
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800933c:	f003 0308 	and.w	r3, r3, #8
 8009340:	2b00      	cmp	r3, #0
 8009342:	d017      	beq.n	8009374 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009348:	f003 0320 	and.w	r3, r3, #32
 800934c:	2b00      	cmp	r3, #0
 800934e:	d105      	bne.n	800935c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009350:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009354:	4b5a      	ldr	r3, [pc, #360]	; (80094c0 <HAL_UART_IRQHandler+0x2b0>)
 8009356:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009358:	2b00      	cmp	r3, #0
 800935a:	d00b      	beq.n	8009374 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	2208      	movs	r2, #8
 8009362:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800936a:	f043 0208 	orr.w	r2, r3, #8
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009378:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800937c:	2b00      	cmp	r3, #0
 800937e:	d012      	beq.n	80093a6 <HAL_UART_IRQHandler+0x196>
 8009380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009384:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009388:	2b00      	cmp	r3, #0
 800938a:	d00c      	beq.n	80093a6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009394:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800939c:	f043 0220 	orr.w	r2, r3, #32
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	f000 82c0 	beq.w	8009932 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80093b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093b6:	f003 0320 	and.w	r3, r3, #32
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d013      	beq.n	80093e6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80093be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093c2:	f003 0320 	and.w	r3, r3, #32
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d105      	bne.n	80093d6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80093ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d007      	beq.n	80093e6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d003      	beq.n	80093e6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093fa:	2b40      	cmp	r3, #64	; 0x40
 80093fc:	d005      	beq.n	800940a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80093fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009402:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009406:	2b00      	cmp	r3, #0
 8009408:	d04f      	beq.n	80094aa <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f001 f9dc 	bl	800a7c8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	689b      	ldr	r3, [r3, #8]
 8009416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800941a:	2b40      	cmp	r3, #64	; 0x40
 800941c:	d141      	bne.n	80094a2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	3308      	adds	r3, #8
 8009424:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009428:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800942c:	e853 3f00 	ldrex	r3, [r3]
 8009430:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009434:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009438:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800943c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	3308      	adds	r3, #8
 8009446:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800944a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800944e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009452:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009456:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800945a:	e841 2300 	strex	r3, r2, [r1]
 800945e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009462:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009466:	2b00      	cmp	r3, #0
 8009468:	d1d9      	bne.n	800941e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800946e:	2b00      	cmp	r3, #0
 8009470:	d013      	beq.n	800949a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009476:	4a14      	ldr	r2, [pc, #80]	; (80094c8 <HAL_UART_IRQHandler+0x2b8>)
 8009478:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800947e:	4618      	mov	r0, r3
 8009480:	f7f9 fc72 	bl	8002d68 <HAL_DMA_Abort_IT>
 8009484:	4603      	mov	r3, r0
 8009486:	2b00      	cmp	r3, #0
 8009488:	d017      	beq.n	80094ba <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800948e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009490:	687a      	ldr	r2, [r7, #4]
 8009492:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8009494:	4610      	mov	r0, r2
 8009496:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009498:	e00f      	b.n	80094ba <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 fa60 	bl	8009960 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094a0:	e00b      	b.n	80094ba <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f000 fa5c 	bl	8009960 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094a8:	e007      	b.n	80094ba <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 fa58 	bl	8009960 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2200      	movs	r2, #0
 80094b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80094b8:	e23b      	b.n	8009932 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094ba:	bf00      	nop
    return;
 80094bc:	e239      	b.n	8009932 <HAL_UART_IRQHandler+0x722>
 80094be:	bf00      	nop
 80094c0:	10000001 	.word	0x10000001
 80094c4:	04000120 	.word	0x04000120
 80094c8:	0800a895 	.word	0x0800a895

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	f040 81ce 	bne.w	8009872 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80094d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094da:	f003 0310 	and.w	r3, r3, #16
 80094de:	2b00      	cmp	r3, #0
 80094e0:	f000 81c7 	beq.w	8009872 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80094e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094e8:	f003 0310 	and.w	r3, r3, #16
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	f000 81c0 	beq.w	8009872 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	2210      	movs	r2, #16
 80094f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	689b      	ldr	r3, [r3, #8]
 8009500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009504:	2b40      	cmp	r3, #64	; 0x40
 8009506:	f040 813b 	bne.w	8009780 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a8b      	ldr	r2, [pc, #556]	; (8009740 <HAL_UART_IRQHandler+0x530>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d059      	beq.n	80095ca <HAL_UART_IRQHandler+0x3ba>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a89      	ldr	r2, [pc, #548]	; (8009744 <HAL_UART_IRQHandler+0x534>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d053      	beq.n	80095ca <HAL_UART_IRQHandler+0x3ba>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4a87      	ldr	r2, [pc, #540]	; (8009748 <HAL_UART_IRQHandler+0x538>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d04d      	beq.n	80095ca <HAL_UART_IRQHandler+0x3ba>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4a85      	ldr	r2, [pc, #532]	; (800974c <HAL_UART_IRQHandler+0x53c>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d047      	beq.n	80095ca <HAL_UART_IRQHandler+0x3ba>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a83      	ldr	r2, [pc, #524]	; (8009750 <HAL_UART_IRQHandler+0x540>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d041      	beq.n	80095ca <HAL_UART_IRQHandler+0x3ba>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4a81      	ldr	r2, [pc, #516]	; (8009754 <HAL_UART_IRQHandler+0x544>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d03b      	beq.n	80095ca <HAL_UART_IRQHandler+0x3ba>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4a7f      	ldr	r2, [pc, #508]	; (8009758 <HAL_UART_IRQHandler+0x548>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d035      	beq.n	80095ca <HAL_UART_IRQHandler+0x3ba>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4a7d      	ldr	r2, [pc, #500]	; (800975c <HAL_UART_IRQHandler+0x54c>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d02f      	beq.n	80095ca <HAL_UART_IRQHandler+0x3ba>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4a7b      	ldr	r2, [pc, #492]	; (8009760 <HAL_UART_IRQHandler+0x550>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d029      	beq.n	80095ca <HAL_UART_IRQHandler+0x3ba>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4a79      	ldr	r2, [pc, #484]	; (8009764 <HAL_UART_IRQHandler+0x554>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d023      	beq.n	80095ca <HAL_UART_IRQHandler+0x3ba>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4a77      	ldr	r2, [pc, #476]	; (8009768 <HAL_UART_IRQHandler+0x558>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d01d      	beq.n	80095ca <HAL_UART_IRQHandler+0x3ba>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4a75      	ldr	r2, [pc, #468]	; (800976c <HAL_UART_IRQHandler+0x55c>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d017      	beq.n	80095ca <HAL_UART_IRQHandler+0x3ba>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4a73      	ldr	r2, [pc, #460]	; (8009770 <HAL_UART_IRQHandler+0x560>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d011      	beq.n	80095ca <HAL_UART_IRQHandler+0x3ba>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a71      	ldr	r2, [pc, #452]	; (8009774 <HAL_UART_IRQHandler+0x564>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d00b      	beq.n	80095ca <HAL_UART_IRQHandler+0x3ba>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4a6f      	ldr	r2, [pc, #444]	; (8009778 <HAL_UART_IRQHandler+0x568>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d005      	beq.n	80095ca <HAL_UART_IRQHandler+0x3ba>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4a6d      	ldr	r2, [pc, #436]	; (800977c <HAL_UART_IRQHandler+0x56c>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d105      	bne.n	80095d6 <HAL_UART_IRQHandler+0x3c6>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	685b      	ldr	r3, [r3, #4]
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	e004      	b.n	80095e0 <HAL_UART_IRQHandler+0x3d0>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	b29b      	uxth	r3, r3
 80095e0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80095e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	f000 81a4 	beq.w	8009936 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80095f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80095f8:	429a      	cmp	r2, r3
 80095fa:	f080 819c 	bcs.w	8009936 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009604:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800960c:	69db      	ldr	r3, [r3, #28]
 800960e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009612:	f000 8086 	beq.w	8009722 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800961e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009622:	e853 3f00 	ldrex	r3, [r3]
 8009626:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800962a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800962e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009632:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	461a      	mov	r2, r3
 800963c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009640:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009644:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009648:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800964c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009650:	e841 2300 	strex	r3, r2, [r1]
 8009654:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009658:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800965c:	2b00      	cmp	r3, #0
 800965e:	d1da      	bne.n	8009616 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	3308      	adds	r3, #8
 8009666:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009668:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800966a:	e853 3f00 	ldrex	r3, [r3]
 800966e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009670:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009672:	f023 0301 	bic.w	r3, r3, #1
 8009676:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	3308      	adds	r3, #8
 8009680:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009684:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009688:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800968a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800968c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009690:	e841 2300 	strex	r3, r2, [r1]
 8009694:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009696:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009698:	2b00      	cmp	r3, #0
 800969a:	d1e1      	bne.n	8009660 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	3308      	adds	r3, #8
 80096a2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096a6:	e853 3f00 	ldrex	r3, [r3]
 80096aa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80096ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	3308      	adds	r3, #8
 80096bc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80096c0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80096c2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80096c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80096c8:	e841 2300 	strex	r3, r2, [r1]
 80096cc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80096ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d1e3      	bne.n	800969c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2220      	movs	r2, #32
 80096d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2200      	movs	r2, #0
 80096e0:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096ea:	e853 3f00 	ldrex	r3, [r3]
 80096ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80096f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096f2:	f023 0310 	bic.w	r3, r3, #16
 80096f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	461a      	mov	r2, r3
 8009700:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009704:	65bb      	str	r3, [r7, #88]	; 0x58
 8009706:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009708:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800970a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800970c:	e841 2300 	strex	r3, r2, [r1]
 8009710:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009714:	2b00      	cmp	r3, #0
 8009716:	d1e4      	bne.n	80096e2 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800971c:	4618      	mov	r0, r3
 800971e:	f7f9 f805 	bl	800272c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800972e:	b29b      	uxth	r3, r3
 8009730:	1ad3      	subs	r3, r2, r3
 8009732:	b29b      	uxth	r3, r3
 8009734:	4619      	mov	r1, r3
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 f91c 	bl	8009974 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800973c:	e0fb      	b.n	8009936 <HAL_UART_IRQHandler+0x726>
 800973e:	bf00      	nop
 8009740:	40020010 	.word	0x40020010
 8009744:	40020028 	.word	0x40020028
 8009748:	40020040 	.word	0x40020040
 800974c:	40020058 	.word	0x40020058
 8009750:	40020070 	.word	0x40020070
 8009754:	40020088 	.word	0x40020088
 8009758:	400200a0 	.word	0x400200a0
 800975c:	400200b8 	.word	0x400200b8
 8009760:	40020410 	.word	0x40020410
 8009764:	40020428 	.word	0x40020428
 8009768:	40020440 	.word	0x40020440
 800976c:	40020458 	.word	0x40020458
 8009770:	40020470 	.word	0x40020470
 8009774:	40020488 	.word	0x40020488
 8009778:	400204a0 	.word	0x400204a0
 800977c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800978c:	b29b      	uxth	r3, r3
 800978e:	1ad3      	subs	r3, r2, r3
 8009790:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800979a:	b29b      	uxth	r3, r3
 800979c:	2b00      	cmp	r3, #0
 800979e:	f000 80cc 	beq.w	800993a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 80097a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	f000 80c7 	beq.w	800993a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b4:	e853 3f00 	ldrex	r3, [r3]
 80097b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80097ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80097c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	461a      	mov	r2, r3
 80097ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80097ce:	647b      	str	r3, [r7, #68]	; 0x44
 80097d0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80097d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80097d6:	e841 2300 	strex	r3, r2, [r1]
 80097da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80097dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d1e4      	bne.n	80097ac <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	3308      	adds	r3, #8
 80097e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ec:	e853 3f00 	ldrex	r3, [r3]
 80097f0:	623b      	str	r3, [r7, #32]
   return(result);
 80097f2:	6a3a      	ldr	r2, [r7, #32]
 80097f4:	4b54      	ldr	r3, [pc, #336]	; (8009948 <HAL_UART_IRQHandler+0x738>)
 80097f6:	4013      	ands	r3, r2
 80097f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	3308      	adds	r3, #8
 8009802:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009806:	633a      	str	r2, [r7, #48]	; 0x30
 8009808:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800980a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800980c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800980e:	e841 2300 	strex	r3, r2, [r1]
 8009812:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009816:	2b00      	cmp	r3, #0
 8009818:	d1e3      	bne.n	80097e2 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2220      	movs	r2, #32
 800981e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2200      	movs	r2, #0
 8009826:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2200      	movs	r2, #0
 800982c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	e853 3f00 	ldrex	r3, [r3]
 800983a:	60fb      	str	r3, [r7, #12]
   return(result);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f023 0310 	bic.w	r3, r3, #16
 8009842:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	461a      	mov	r2, r3
 800984c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009850:	61fb      	str	r3, [r7, #28]
 8009852:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009854:	69b9      	ldr	r1, [r7, #24]
 8009856:	69fa      	ldr	r2, [r7, #28]
 8009858:	e841 2300 	strex	r3, r2, [r1]
 800985c:	617b      	str	r3, [r7, #20]
   return(result);
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d1e4      	bne.n	800982e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009864:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009868:	4619      	mov	r1, r3
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 f882 	bl	8009974 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009870:	e063      	b.n	800993a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009876:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800987a:	2b00      	cmp	r3, #0
 800987c:	d00e      	beq.n	800989c <HAL_UART_IRQHandler+0x68c>
 800987e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009886:	2b00      	cmp	r3, #0
 8009888:	d008      	beq.n	800989c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009892:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f001 f83e 	bl	800a916 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800989a:	e051      	b.n	8009940 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800989c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d014      	beq.n	80098d2 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80098a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d105      	bne.n	80098c0 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80098b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80098b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d008      	beq.n	80098d2 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d03a      	beq.n	800993e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	4798      	blx	r3
    }
    return;
 80098d0:	e035      	b.n	800993e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80098d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d009      	beq.n	80098f2 <HAL_UART_IRQHandler+0x6e2>
 80098de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d003      	beq.n	80098f2 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f000 ffe8 	bl	800a8c0 <UART_EndTransmit_IT>
    return;
 80098f0:	e026      	b.n	8009940 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80098f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d009      	beq.n	8009912 <HAL_UART_IRQHandler+0x702>
 80098fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009902:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009906:	2b00      	cmp	r3, #0
 8009908:	d003      	beq.n	8009912 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f001 f817 	bl	800a93e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009910:	e016      	b.n	8009940 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009916:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800991a:	2b00      	cmp	r3, #0
 800991c:	d010      	beq.n	8009940 <HAL_UART_IRQHandler+0x730>
 800991e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009922:	2b00      	cmp	r3, #0
 8009924:	da0c      	bge.n	8009940 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 ffff 	bl	800a92a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800992c:	e008      	b.n	8009940 <HAL_UART_IRQHandler+0x730>
      return;
 800992e:	bf00      	nop
 8009930:	e006      	b.n	8009940 <HAL_UART_IRQHandler+0x730>
    return;
 8009932:	bf00      	nop
 8009934:	e004      	b.n	8009940 <HAL_UART_IRQHandler+0x730>
      return;
 8009936:	bf00      	nop
 8009938:	e002      	b.n	8009940 <HAL_UART_IRQHandler+0x730>
      return;
 800993a:	bf00      	nop
 800993c:	e000      	b.n	8009940 <HAL_UART_IRQHandler+0x730>
    return;
 800993e:	bf00      	nop
  }
}
 8009940:	37e8      	adds	r7, #232	; 0xe8
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
 8009946:	bf00      	nop
 8009948:	effffffe 	.word	0xeffffffe

0800994c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800994c:	b480      	push	{r7}
 800994e:	b083      	sub	sp, #12
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009954:	bf00      	nop
 8009956:	370c      	adds	r7, #12
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr

08009960 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009960:	b480      	push	{r7}
 8009962:	b083      	sub	sp, #12
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009968:	bf00      	nop
 800996a:	370c      	adds	r7, #12
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr

08009974 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009974:	b480      	push	{r7}
 8009976:	b083      	sub	sp, #12
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	460b      	mov	r3, r1
 800997e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009980:	bf00      	nop
 8009982:	370c      	adds	r7, #12
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr

0800998c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800998c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009990:	b092      	sub	sp, #72	; 0x48
 8009992:	af00      	add	r7, sp, #0
 8009994:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009996:	2300      	movs	r3, #0
 8009998:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	689a      	ldr	r2, [r3, #8]
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	691b      	ldr	r3, [r3, #16]
 80099a4:	431a      	orrs	r2, r3
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	695b      	ldr	r3, [r3, #20]
 80099aa:	431a      	orrs	r2, r3
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	69db      	ldr	r3, [r3, #28]
 80099b0:	4313      	orrs	r3, r2
 80099b2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	681a      	ldr	r2, [r3, #0]
 80099ba:	4bbe      	ldr	r3, [pc, #760]	; (8009cb4 <UART_SetConfig+0x328>)
 80099bc:	4013      	ands	r3, r2
 80099be:	697a      	ldr	r2, [r7, #20]
 80099c0:	6812      	ldr	r2, [r2, #0]
 80099c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80099c4:	430b      	orrs	r3, r1
 80099c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	68da      	ldr	r2, [r3, #12]
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	430a      	orrs	r2, r1
 80099dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	699b      	ldr	r3, [r3, #24]
 80099e2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	4ab3      	ldr	r2, [pc, #716]	; (8009cb8 <UART_SetConfig+0x32c>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d004      	beq.n	80099f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	6a1b      	ldr	r3, [r3, #32]
 80099f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80099f4:	4313      	orrs	r3, r2
 80099f6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	689a      	ldr	r2, [r3, #8]
 80099fe:	4baf      	ldr	r3, [pc, #700]	; (8009cbc <UART_SetConfig+0x330>)
 8009a00:	4013      	ands	r3, r2
 8009a02:	697a      	ldr	r2, [r7, #20]
 8009a04:	6812      	ldr	r2, [r2, #0]
 8009a06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009a08:	430b      	orrs	r3, r1
 8009a0a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a12:	f023 010f 	bic.w	r1, r3, #15
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	430a      	orrs	r2, r1
 8009a20:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	4aa6      	ldr	r2, [pc, #664]	; (8009cc0 <UART_SetConfig+0x334>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d177      	bne.n	8009b1c <UART_SetConfig+0x190>
 8009a2c:	4ba5      	ldr	r3, [pc, #660]	; (8009cc4 <UART_SetConfig+0x338>)
 8009a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a34:	2b28      	cmp	r3, #40	; 0x28
 8009a36:	d86d      	bhi.n	8009b14 <UART_SetConfig+0x188>
 8009a38:	a201      	add	r2, pc, #4	; (adr r2, 8009a40 <UART_SetConfig+0xb4>)
 8009a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a3e:	bf00      	nop
 8009a40:	08009ae5 	.word	0x08009ae5
 8009a44:	08009b15 	.word	0x08009b15
 8009a48:	08009b15 	.word	0x08009b15
 8009a4c:	08009b15 	.word	0x08009b15
 8009a50:	08009b15 	.word	0x08009b15
 8009a54:	08009b15 	.word	0x08009b15
 8009a58:	08009b15 	.word	0x08009b15
 8009a5c:	08009b15 	.word	0x08009b15
 8009a60:	08009aed 	.word	0x08009aed
 8009a64:	08009b15 	.word	0x08009b15
 8009a68:	08009b15 	.word	0x08009b15
 8009a6c:	08009b15 	.word	0x08009b15
 8009a70:	08009b15 	.word	0x08009b15
 8009a74:	08009b15 	.word	0x08009b15
 8009a78:	08009b15 	.word	0x08009b15
 8009a7c:	08009b15 	.word	0x08009b15
 8009a80:	08009af5 	.word	0x08009af5
 8009a84:	08009b15 	.word	0x08009b15
 8009a88:	08009b15 	.word	0x08009b15
 8009a8c:	08009b15 	.word	0x08009b15
 8009a90:	08009b15 	.word	0x08009b15
 8009a94:	08009b15 	.word	0x08009b15
 8009a98:	08009b15 	.word	0x08009b15
 8009a9c:	08009b15 	.word	0x08009b15
 8009aa0:	08009afd 	.word	0x08009afd
 8009aa4:	08009b15 	.word	0x08009b15
 8009aa8:	08009b15 	.word	0x08009b15
 8009aac:	08009b15 	.word	0x08009b15
 8009ab0:	08009b15 	.word	0x08009b15
 8009ab4:	08009b15 	.word	0x08009b15
 8009ab8:	08009b15 	.word	0x08009b15
 8009abc:	08009b15 	.word	0x08009b15
 8009ac0:	08009b05 	.word	0x08009b05
 8009ac4:	08009b15 	.word	0x08009b15
 8009ac8:	08009b15 	.word	0x08009b15
 8009acc:	08009b15 	.word	0x08009b15
 8009ad0:	08009b15 	.word	0x08009b15
 8009ad4:	08009b15 	.word	0x08009b15
 8009ad8:	08009b15 	.word	0x08009b15
 8009adc:	08009b15 	.word	0x08009b15
 8009ae0:	08009b0d 	.word	0x08009b0d
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aea:	e222      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009aec:	2304      	movs	r3, #4
 8009aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009af2:	e21e      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009af4:	2308      	movs	r3, #8
 8009af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009afa:	e21a      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009afc:	2310      	movs	r3, #16
 8009afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b02:	e216      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009b04:	2320      	movs	r3, #32
 8009b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b0a:	e212      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009b0c:	2340      	movs	r3, #64	; 0x40
 8009b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b12:	e20e      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009b14:	2380      	movs	r3, #128	; 0x80
 8009b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b1a:	e20a      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4a69      	ldr	r2, [pc, #420]	; (8009cc8 <UART_SetConfig+0x33c>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d130      	bne.n	8009b88 <UART_SetConfig+0x1fc>
 8009b26:	4b67      	ldr	r3, [pc, #412]	; (8009cc4 <UART_SetConfig+0x338>)
 8009b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b2a:	f003 0307 	and.w	r3, r3, #7
 8009b2e:	2b05      	cmp	r3, #5
 8009b30:	d826      	bhi.n	8009b80 <UART_SetConfig+0x1f4>
 8009b32:	a201      	add	r2, pc, #4	; (adr r2, 8009b38 <UART_SetConfig+0x1ac>)
 8009b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b38:	08009b51 	.word	0x08009b51
 8009b3c:	08009b59 	.word	0x08009b59
 8009b40:	08009b61 	.word	0x08009b61
 8009b44:	08009b69 	.word	0x08009b69
 8009b48:	08009b71 	.word	0x08009b71
 8009b4c:	08009b79 	.word	0x08009b79
 8009b50:	2300      	movs	r3, #0
 8009b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b56:	e1ec      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009b58:	2304      	movs	r3, #4
 8009b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b5e:	e1e8      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009b60:	2308      	movs	r3, #8
 8009b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b66:	e1e4      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009b68:	2310      	movs	r3, #16
 8009b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b6e:	e1e0      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009b70:	2320      	movs	r3, #32
 8009b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b76:	e1dc      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009b78:	2340      	movs	r3, #64	; 0x40
 8009b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b7e:	e1d8      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009b80:	2380      	movs	r3, #128	; 0x80
 8009b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b86:	e1d4      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4a4f      	ldr	r2, [pc, #316]	; (8009ccc <UART_SetConfig+0x340>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d130      	bne.n	8009bf4 <UART_SetConfig+0x268>
 8009b92:	4b4c      	ldr	r3, [pc, #304]	; (8009cc4 <UART_SetConfig+0x338>)
 8009b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b96:	f003 0307 	and.w	r3, r3, #7
 8009b9a:	2b05      	cmp	r3, #5
 8009b9c:	d826      	bhi.n	8009bec <UART_SetConfig+0x260>
 8009b9e:	a201      	add	r2, pc, #4	; (adr r2, 8009ba4 <UART_SetConfig+0x218>)
 8009ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ba4:	08009bbd 	.word	0x08009bbd
 8009ba8:	08009bc5 	.word	0x08009bc5
 8009bac:	08009bcd 	.word	0x08009bcd
 8009bb0:	08009bd5 	.word	0x08009bd5
 8009bb4:	08009bdd 	.word	0x08009bdd
 8009bb8:	08009be5 	.word	0x08009be5
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bc2:	e1b6      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009bc4:	2304      	movs	r3, #4
 8009bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bca:	e1b2      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009bcc:	2308      	movs	r3, #8
 8009bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bd2:	e1ae      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009bd4:	2310      	movs	r3, #16
 8009bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bda:	e1aa      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009bdc:	2320      	movs	r3, #32
 8009bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009be2:	e1a6      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009be4:	2340      	movs	r3, #64	; 0x40
 8009be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bea:	e1a2      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009bec:	2380      	movs	r3, #128	; 0x80
 8009bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bf2:	e19e      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4a35      	ldr	r2, [pc, #212]	; (8009cd0 <UART_SetConfig+0x344>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d130      	bne.n	8009c60 <UART_SetConfig+0x2d4>
 8009bfe:	4b31      	ldr	r3, [pc, #196]	; (8009cc4 <UART_SetConfig+0x338>)
 8009c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c02:	f003 0307 	and.w	r3, r3, #7
 8009c06:	2b05      	cmp	r3, #5
 8009c08:	d826      	bhi.n	8009c58 <UART_SetConfig+0x2cc>
 8009c0a:	a201      	add	r2, pc, #4	; (adr r2, 8009c10 <UART_SetConfig+0x284>)
 8009c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c10:	08009c29 	.word	0x08009c29
 8009c14:	08009c31 	.word	0x08009c31
 8009c18:	08009c39 	.word	0x08009c39
 8009c1c:	08009c41 	.word	0x08009c41
 8009c20:	08009c49 	.word	0x08009c49
 8009c24:	08009c51 	.word	0x08009c51
 8009c28:	2300      	movs	r3, #0
 8009c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c2e:	e180      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009c30:	2304      	movs	r3, #4
 8009c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c36:	e17c      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009c38:	2308      	movs	r3, #8
 8009c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c3e:	e178      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009c40:	2310      	movs	r3, #16
 8009c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c46:	e174      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009c48:	2320      	movs	r3, #32
 8009c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c4e:	e170      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009c50:	2340      	movs	r3, #64	; 0x40
 8009c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c56:	e16c      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009c58:	2380      	movs	r3, #128	; 0x80
 8009c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c5e:	e168      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	4a1b      	ldr	r2, [pc, #108]	; (8009cd4 <UART_SetConfig+0x348>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d142      	bne.n	8009cf0 <UART_SetConfig+0x364>
 8009c6a:	4b16      	ldr	r3, [pc, #88]	; (8009cc4 <UART_SetConfig+0x338>)
 8009c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c6e:	f003 0307 	and.w	r3, r3, #7
 8009c72:	2b05      	cmp	r3, #5
 8009c74:	d838      	bhi.n	8009ce8 <UART_SetConfig+0x35c>
 8009c76:	a201      	add	r2, pc, #4	; (adr r2, 8009c7c <UART_SetConfig+0x2f0>)
 8009c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c7c:	08009c95 	.word	0x08009c95
 8009c80:	08009c9d 	.word	0x08009c9d
 8009c84:	08009ca5 	.word	0x08009ca5
 8009c88:	08009cad 	.word	0x08009cad
 8009c8c:	08009cd9 	.word	0x08009cd9
 8009c90:	08009ce1 	.word	0x08009ce1
 8009c94:	2300      	movs	r3, #0
 8009c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c9a:	e14a      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009c9c:	2304      	movs	r3, #4
 8009c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ca2:	e146      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009ca4:	2308      	movs	r3, #8
 8009ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009caa:	e142      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009cac:	2310      	movs	r3, #16
 8009cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cb2:	e13e      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009cb4:	cfff69f3 	.word	0xcfff69f3
 8009cb8:	58000c00 	.word	0x58000c00
 8009cbc:	11fff4ff 	.word	0x11fff4ff
 8009cc0:	40011000 	.word	0x40011000
 8009cc4:	58024400 	.word	0x58024400
 8009cc8:	40004400 	.word	0x40004400
 8009ccc:	40004800 	.word	0x40004800
 8009cd0:	40004c00 	.word	0x40004c00
 8009cd4:	40005000 	.word	0x40005000
 8009cd8:	2320      	movs	r3, #32
 8009cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cde:	e128      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009ce0:	2340      	movs	r3, #64	; 0x40
 8009ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ce6:	e124      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009ce8:	2380      	movs	r3, #128	; 0x80
 8009cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cee:	e120      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4acb      	ldr	r2, [pc, #812]	; (800a024 <UART_SetConfig+0x698>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d176      	bne.n	8009de8 <UART_SetConfig+0x45c>
 8009cfa:	4bcb      	ldr	r3, [pc, #812]	; (800a028 <UART_SetConfig+0x69c>)
 8009cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cfe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d02:	2b28      	cmp	r3, #40	; 0x28
 8009d04:	d86c      	bhi.n	8009de0 <UART_SetConfig+0x454>
 8009d06:	a201      	add	r2, pc, #4	; (adr r2, 8009d0c <UART_SetConfig+0x380>)
 8009d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d0c:	08009db1 	.word	0x08009db1
 8009d10:	08009de1 	.word	0x08009de1
 8009d14:	08009de1 	.word	0x08009de1
 8009d18:	08009de1 	.word	0x08009de1
 8009d1c:	08009de1 	.word	0x08009de1
 8009d20:	08009de1 	.word	0x08009de1
 8009d24:	08009de1 	.word	0x08009de1
 8009d28:	08009de1 	.word	0x08009de1
 8009d2c:	08009db9 	.word	0x08009db9
 8009d30:	08009de1 	.word	0x08009de1
 8009d34:	08009de1 	.word	0x08009de1
 8009d38:	08009de1 	.word	0x08009de1
 8009d3c:	08009de1 	.word	0x08009de1
 8009d40:	08009de1 	.word	0x08009de1
 8009d44:	08009de1 	.word	0x08009de1
 8009d48:	08009de1 	.word	0x08009de1
 8009d4c:	08009dc1 	.word	0x08009dc1
 8009d50:	08009de1 	.word	0x08009de1
 8009d54:	08009de1 	.word	0x08009de1
 8009d58:	08009de1 	.word	0x08009de1
 8009d5c:	08009de1 	.word	0x08009de1
 8009d60:	08009de1 	.word	0x08009de1
 8009d64:	08009de1 	.word	0x08009de1
 8009d68:	08009de1 	.word	0x08009de1
 8009d6c:	08009dc9 	.word	0x08009dc9
 8009d70:	08009de1 	.word	0x08009de1
 8009d74:	08009de1 	.word	0x08009de1
 8009d78:	08009de1 	.word	0x08009de1
 8009d7c:	08009de1 	.word	0x08009de1
 8009d80:	08009de1 	.word	0x08009de1
 8009d84:	08009de1 	.word	0x08009de1
 8009d88:	08009de1 	.word	0x08009de1
 8009d8c:	08009dd1 	.word	0x08009dd1
 8009d90:	08009de1 	.word	0x08009de1
 8009d94:	08009de1 	.word	0x08009de1
 8009d98:	08009de1 	.word	0x08009de1
 8009d9c:	08009de1 	.word	0x08009de1
 8009da0:	08009de1 	.word	0x08009de1
 8009da4:	08009de1 	.word	0x08009de1
 8009da8:	08009de1 	.word	0x08009de1
 8009dac:	08009dd9 	.word	0x08009dd9
 8009db0:	2301      	movs	r3, #1
 8009db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009db6:	e0bc      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009db8:	2304      	movs	r3, #4
 8009dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dbe:	e0b8      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009dc0:	2308      	movs	r3, #8
 8009dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dc6:	e0b4      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009dc8:	2310      	movs	r3, #16
 8009dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dce:	e0b0      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009dd0:	2320      	movs	r3, #32
 8009dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dd6:	e0ac      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009dd8:	2340      	movs	r3, #64	; 0x40
 8009dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dde:	e0a8      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009de0:	2380      	movs	r3, #128	; 0x80
 8009de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009de6:	e0a4      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	4a8f      	ldr	r2, [pc, #572]	; (800a02c <UART_SetConfig+0x6a0>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d130      	bne.n	8009e54 <UART_SetConfig+0x4c8>
 8009df2:	4b8d      	ldr	r3, [pc, #564]	; (800a028 <UART_SetConfig+0x69c>)
 8009df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009df6:	f003 0307 	and.w	r3, r3, #7
 8009dfa:	2b05      	cmp	r3, #5
 8009dfc:	d826      	bhi.n	8009e4c <UART_SetConfig+0x4c0>
 8009dfe:	a201      	add	r2, pc, #4	; (adr r2, 8009e04 <UART_SetConfig+0x478>)
 8009e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e04:	08009e1d 	.word	0x08009e1d
 8009e08:	08009e25 	.word	0x08009e25
 8009e0c:	08009e2d 	.word	0x08009e2d
 8009e10:	08009e35 	.word	0x08009e35
 8009e14:	08009e3d 	.word	0x08009e3d
 8009e18:	08009e45 	.word	0x08009e45
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e22:	e086      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009e24:	2304      	movs	r3, #4
 8009e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e2a:	e082      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009e2c:	2308      	movs	r3, #8
 8009e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e32:	e07e      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009e34:	2310      	movs	r3, #16
 8009e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e3a:	e07a      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009e3c:	2320      	movs	r3, #32
 8009e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e42:	e076      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009e44:	2340      	movs	r3, #64	; 0x40
 8009e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e4a:	e072      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009e4c:	2380      	movs	r3, #128	; 0x80
 8009e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e52:	e06e      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a75      	ldr	r2, [pc, #468]	; (800a030 <UART_SetConfig+0x6a4>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d130      	bne.n	8009ec0 <UART_SetConfig+0x534>
 8009e5e:	4b72      	ldr	r3, [pc, #456]	; (800a028 <UART_SetConfig+0x69c>)
 8009e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e62:	f003 0307 	and.w	r3, r3, #7
 8009e66:	2b05      	cmp	r3, #5
 8009e68:	d826      	bhi.n	8009eb8 <UART_SetConfig+0x52c>
 8009e6a:	a201      	add	r2, pc, #4	; (adr r2, 8009e70 <UART_SetConfig+0x4e4>)
 8009e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e70:	08009e89 	.word	0x08009e89
 8009e74:	08009e91 	.word	0x08009e91
 8009e78:	08009e99 	.word	0x08009e99
 8009e7c:	08009ea1 	.word	0x08009ea1
 8009e80:	08009ea9 	.word	0x08009ea9
 8009e84:	08009eb1 	.word	0x08009eb1
 8009e88:	2300      	movs	r3, #0
 8009e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e8e:	e050      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009e90:	2304      	movs	r3, #4
 8009e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e96:	e04c      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009e98:	2308      	movs	r3, #8
 8009e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e9e:	e048      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009ea0:	2310      	movs	r3, #16
 8009ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ea6:	e044      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009ea8:	2320      	movs	r3, #32
 8009eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eae:	e040      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009eb0:	2340      	movs	r3, #64	; 0x40
 8009eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eb6:	e03c      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009eb8:	2380      	movs	r3, #128	; 0x80
 8009eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ebe:	e038      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	4a5b      	ldr	r2, [pc, #364]	; (800a034 <UART_SetConfig+0x6a8>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d130      	bne.n	8009f2c <UART_SetConfig+0x5a0>
 8009eca:	4b57      	ldr	r3, [pc, #348]	; (800a028 <UART_SetConfig+0x69c>)
 8009ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ece:	f003 0307 	and.w	r3, r3, #7
 8009ed2:	2b05      	cmp	r3, #5
 8009ed4:	d826      	bhi.n	8009f24 <UART_SetConfig+0x598>
 8009ed6:	a201      	add	r2, pc, #4	; (adr r2, 8009edc <UART_SetConfig+0x550>)
 8009ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009edc:	08009ef5 	.word	0x08009ef5
 8009ee0:	08009efd 	.word	0x08009efd
 8009ee4:	08009f05 	.word	0x08009f05
 8009ee8:	08009f0d 	.word	0x08009f0d
 8009eec:	08009f15 	.word	0x08009f15
 8009ef0:	08009f1d 	.word	0x08009f1d
 8009ef4:	2302      	movs	r3, #2
 8009ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009efa:	e01a      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009efc:	2304      	movs	r3, #4
 8009efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f02:	e016      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009f04:	2308      	movs	r3, #8
 8009f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f0a:	e012      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009f0c:	2310      	movs	r3, #16
 8009f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f12:	e00e      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009f14:	2320      	movs	r3, #32
 8009f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f1a:	e00a      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009f1c:	2340      	movs	r3, #64	; 0x40
 8009f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f22:	e006      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009f24:	2380      	movs	r3, #128	; 0x80
 8009f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f2a:	e002      	b.n	8009f32 <UART_SetConfig+0x5a6>
 8009f2c:	2380      	movs	r3, #128	; 0x80
 8009f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	4a3f      	ldr	r2, [pc, #252]	; (800a034 <UART_SetConfig+0x6a8>)
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	f040 80f8 	bne.w	800a12e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009f3e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009f42:	2b20      	cmp	r3, #32
 8009f44:	dc46      	bgt.n	8009fd4 <UART_SetConfig+0x648>
 8009f46:	2b02      	cmp	r3, #2
 8009f48:	f2c0 8082 	blt.w	800a050 <UART_SetConfig+0x6c4>
 8009f4c:	3b02      	subs	r3, #2
 8009f4e:	2b1e      	cmp	r3, #30
 8009f50:	d87e      	bhi.n	800a050 <UART_SetConfig+0x6c4>
 8009f52:	a201      	add	r2, pc, #4	; (adr r2, 8009f58 <UART_SetConfig+0x5cc>)
 8009f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f58:	08009fdb 	.word	0x08009fdb
 8009f5c:	0800a051 	.word	0x0800a051
 8009f60:	08009fe3 	.word	0x08009fe3
 8009f64:	0800a051 	.word	0x0800a051
 8009f68:	0800a051 	.word	0x0800a051
 8009f6c:	0800a051 	.word	0x0800a051
 8009f70:	08009ff3 	.word	0x08009ff3
 8009f74:	0800a051 	.word	0x0800a051
 8009f78:	0800a051 	.word	0x0800a051
 8009f7c:	0800a051 	.word	0x0800a051
 8009f80:	0800a051 	.word	0x0800a051
 8009f84:	0800a051 	.word	0x0800a051
 8009f88:	0800a051 	.word	0x0800a051
 8009f8c:	0800a051 	.word	0x0800a051
 8009f90:	0800a003 	.word	0x0800a003
 8009f94:	0800a051 	.word	0x0800a051
 8009f98:	0800a051 	.word	0x0800a051
 8009f9c:	0800a051 	.word	0x0800a051
 8009fa0:	0800a051 	.word	0x0800a051
 8009fa4:	0800a051 	.word	0x0800a051
 8009fa8:	0800a051 	.word	0x0800a051
 8009fac:	0800a051 	.word	0x0800a051
 8009fb0:	0800a051 	.word	0x0800a051
 8009fb4:	0800a051 	.word	0x0800a051
 8009fb8:	0800a051 	.word	0x0800a051
 8009fbc:	0800a051 	.word	0x0800a051
 8009fc0:	0800a051 	.word	0x0800a051
 8009fc4:	0800a051 	.word	0x0800a051
 8009fc8:	0800a051 	.word	0x0800a051
 8009fcc:	0800a051 	.word	0x0800a051
 8009fd0:	0800a043 	.word	0x0800a043
 8009fd4:	2b40      	cmp	r3, #64	; 0x40
 8009fd6:	d037      	beq.n	800a048 <UART_SetConfig+0x6bc>
 8009fd8:	e03a      	b.n	800a050 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009fda:	f7fc fd5b 	bl	8006a94 <HAL_RCCEx_GetD3PCLK1Freq>
 8009fde:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009fe0:	e03c      	b.n	800a05c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009fe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f7fc fd6a 	bl	8006ac0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ff0:	e034      	b.n	800a05c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ff2:	f107 0318 	add.w	r3, r7, #24
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f7fc feb6 	bl	8006d68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009ffc:	69fb      	ldr	r3, [r7, #28]
 8009ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a000:	e02c      	b.n	800a05c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a002:	4b09      	ldr	r3, [pc, #36]	; (800a028 <UART_SetConfig+0x69c>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f003 0320 	and.w	r3, r3, #32
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d016      	beq.n	800a03c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a00e:	4b06      	ldr	r3, [pc, #24]	; (800a028 <UART_SetConfig+0x69c>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	08db      	lsrs	r3, r3, #3
 800a014:	f003 0303 	and.w	r3, r3, #3
 800a018:	4a07      	ldr	r2, [pc, #28]	; (800a038 <UART_SetConfig+0x6ac>)
 800a01a:	fa22 f303 	lsr.w	r3, r2, r3
 800a01e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a020:	e01c      	b.n	800a05c <UART_SetConfig+0x6d0>
 800a022:	bf00      	nop
 800a024:	40011400 	.word	0x40011400
 800a028:	58024400 	.word	0x58024400
 800a02c:	40007800 	.word	0x40007800
 800a030:	40007c00 	.word	0x40007c00
 800a034:	58000c00 	.word	0x58000c00
 800a038:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a03c:	4b9d      	ldr	r3, [pc, #628]	; (800a2b4 <UART_SetConfig+0x928>)
 800a03e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a040:	e00c      	b.n	800a05c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a042:	4b9d      	ldr	r3, [pc, #628]	; (800a2b8 <UART_SetConfig+0x92c>)
 800a044:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a046:	e009      	b.n	800a05c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a048:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a04c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a04e:	e005      	b.n	800a05c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a050:	2300      	movs	r3, #0
 800a052:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a054:	2301      	movs	r3, #1
 800a056:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a05a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a05c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a05e:	2b00      	cmp	r3, #0
 800a060:	f000 81de 	beq.w	800a420 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a068:	4a94      	ldr	r2, [pc, #592]	; (800a2bc <UART_SetConfig+0x930>)
 800a06a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a06e:	461a      	mov	r2, r3
 800a070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a072:	fbb3 f3f2 	udiv	r3, r3, r2
 800a076:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	685a      	ldr	r2, [r3, #4]
 800a07c:	4613      	mov	r3, r2
 800a07e:	005b      	lsls	r3, r3, #1
 800a080:	4413      	add	r3, r2
 800a082:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a084:	429a      	cmp	r2, r3
 800a086:	d305      	bcc.n	800a094 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	685b      	ldr	r3, [r3, #4]
 800a08c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a08e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a090:	429a      	cmp	r2, r3
 800a092:	d903      	bls.n	800a09c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a094:	2301      	movs	r3, #1
 800a096:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a09a:	e1c1      	b.n	800a420 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a09c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a09e:	2200      	movs	r2, #0
 800a0a0:	60bb      	str	r3, [r7, #8]
 800a0a2:	60fa      	str	r2, [r7, #12]
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a8:	4a84      	ldr	r2, [pc, #528]	; (800a2bc <UART_SetConfig+0x930>)
 800a0aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0ae:	b29b      	uxth	r3, r3
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	603b      	str	r3, [r7, #0]
 800a0b4:	607a      	str	r2, [r7, #4]
 800a0b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a0be:	f7f6 f967 	bl	8000390 <__aeabi_uldivmod>
 800a0c2:	4602      	mov	r2, r0
 800a0c4:	460b      	mov	r3, r1
 800a0c6:	4610      	mov	r0, r2
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	f04f 0200 	mov.w	r2, #0
 800a0ce:	f04f 0300 	mov.w	r3, #0
 800a0d2:	020b      	lsls	r3, r1, #8
 800a0d4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a0d8:	0202      	lsls	r2, r0, #8
 800a0da:	6979      	ldr	r1, [r7, #20]
 800a0dc:	6849      	ldr	r1, [r1, #4]
 800a0de:	0849      	lsrs	r1, r1, #1
 800a0e0:	2000      	movs	r0, #0
 800a0e2:	460c      	mov	r4, r1
 800a0e4:	4605      	mov	r5, r0
 800a0e6:	eb12 0804 	adds.w	r8, r2, r4
 800a0ea:	eb43 0905 	adc.w	r9, r3, r5
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	685b      	ldr	r3, [r3, #4]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	469a      	mov	sl, r3
 800a0f6:	4693      	mov	fp, r2
 800a0f8:	4652      	mov	r2, sl
 800a0fa:	465b      	mov	r3, fp
 800a0fc:	4640      	mov	r0, r8
 800a0fe:	4649      	mov	r1, r9
 800a100:	f7f6 f946 	bl	8000390 <__aeabi_uldivmod>
 800a104:	4602      	mov	r2, r0
 800a106:	460b      	mov	r3, r1
 800a108:	4613      	mov	r3, r2
 800a10a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a10c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a10e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a112:	d308      	bcc.n	800a126 <UART_SetConfig+0x79a>
 800a114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a116:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a11a:	d204      	bcs.n	800a126 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a122:	60da      	str	r2, [r3, #12]
 800a124:	e17c      	b.n	800a420 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a126:	2301      	movs	r3, #1
 800a128:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a12c:	e178      	b.n	800a420 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	69db      	ldr	r3, [r3, #28]
 800a132:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a136:	f040 80c5 	bne.w	800a2c4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a13a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a13e:	2b20      	cmp	r3, #32
 800a140:	dc48      	bgt.n	800a1d4 <UART_SetConfig+0x848>
 800a142:	2b00      	cmp	r3, #0
 800a144:	db7b      	blt.n	800a23e <UART_SetConfig+0x8b2>
 800a146:	2b20      	cmp	r3, #32
 800a148:	d879      	bhi.n	800a23e <UART_SetConfig+0x8b2>
 800a14a:	a201      	add	r2, pc, #4	; (adr r2, 800a150 <UART_SetConfig+0x7c4>)
 800a14c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a150:	0800a1db 	.word	0x0800a1db
 800a154:	0800a1e3 	.word	0x0800a1e3
 800a158:	0800a23f 	.word	0x0800a23f
 800a15c:	0800a23f 	.word	0x0800a23f
 800a160:	0800a1eb 	.word	0x0800a1eb
 800a164:	0800a23f 	.word	0x0800a23f
 800a168:	0800a23f 	.word	0x0800a23f
 800a16c:	0800a23f 	.word	0x0800a23f
 800a170:	0800a1fb 	.word	0x0800a1fb
 800a174:	0800a23f 	.word	0x0800a23f
 800a178:	0800a23f 	.word	0x0800a23f
 800a17c:	0800a23f 	.word	0x0800a23f
 800a180:	0800a23f 	.word	0x0800a23f
 800a184:	0800a23f 	.word	0x0800a23f
 800a188:	0800a23f 	.word	0x0800a23f
 800a18c:	0800a23f 	.word	0x0800a23f
 800a190:	0800a20b 	.word	0x0800a20b
 800a194:	0800a23f 	.word	0x0800a23f
 800a198:	0800a23f 	.word	0x0800a23f
 800a19c:	0800a23f 	.word	0x0800a23f
 800a1a0:	0800a23f 	.word	0x0800a23f
 800a1a4:	0800a23f 	.word	0x0800a23f
 800a1a8:	0800a23f 	.word	0x0800a23f
 800a1ac:	0800a23f 	.word	0x0800a23f
 800a1b0:	0800a23f 	.word	0x0800a23f
 800a1b4:	0800a23f 	.word	0x0800a23f
 800a1b8:	0800a23f 	.word	0x0800a23f
 800a1bc:	0800a23f 	.word	0x0800a23f
 800a1c0:	0800a23f 	.word	0x0800a23f
 800a1c4:	0800a23f 	.word	0x0800a23f
 800a1c8:	0800a23f 	.word	0x0800a23f
 800a1cc:	0800a23f 	.word	0x0800a23f
 800a1d0:	0800a231 	.word	0x0800a231
 800a1d4:	2b40      	cmp	r3, #64	; 0x40
 800a1d6:	d02e      	beq.n	800a236 <UART_SetConfig+0x8aa>
 800a1d8:	e031      	b.n	800a23e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a1da:	f7fb fce9 	bl	8005bb0 <HAL_RCC_GetPCLK1Freq>
 800a1de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a1e0:	e033      	b.n	800a24a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a1e2:	f7fb fcfb 	bl	8005bdc <HAL_RCC_GetPCLK2Freq>
 800a1e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a1e8:	e02f      	b.n	800a24a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f7fc fc66 	bl	8006ac0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a1f8:	e027      	b.n	800a24a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1fa:	f107 0318 	add.w	r3, r7, #24
 800a1fe:	4618      	mov	r0, r3
 800a200:	f7fc fdb2 	bl	8006d68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a204:	69fb      	ldr	r3, [r7, #28]
 800a206:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a208:	e01f      	b.n	800a24a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a20a:	4b2d      	ldr	r3, [pc, #180]	; (800a2c0 <UART_SetConfig+0x934>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f003 0320 	and.w	r3, r3, #32
 800a212:	2b00      	cmp	r3, #0
 800a214:	d009      	beq.n	800a22a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a216:	4b2a      	ldr	r3, [pc, #168]	; (800a2c0 <UART_SetConfig+0x934>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	08db      	lsrs	r3, r3, #3
 800a21c:	f003 0303 	and.w	r3, r3, #3
 800a220:	4a24      	ldr	r2, [pc, #144]	; (800a2b4 <UART_SetConfig+0x928>)
 800a222:	fa22 f303 	lsr.w	r3, r2, r3
 800a226:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a228:	e00f      	b.n	800a24a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a22a:	4b22      	ldr	r3, [pc, #136]	; (800a2b4 <UART_SetConfig+0x928>)
 800a22c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a22e:	e00c      	b.n	800a24a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a230:	4b21      	ldr	r3, [pc, #132]	; (800a2b8 <UART_SetConfig+0x92c>)
 800a232:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a234:	e009      	b.n	800a24a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a23a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a23c:	e005      	b.n	800a24a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a23e:	2300      	movs	r3, #0
 800a240:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a242:	2301      	movs	r3, #1
 800a244:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a248:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a24a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	f000 80e7 	beq.w	800a420 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a256:	4a19      	ldr	r2, [pc, #100]	; (800a2bc <UART_SetConfig+0x930>)
 800a258:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a25c:	461a      	mov	r2, r3
 800a25e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a260:	fbb3 f3f2 	udiv	r3, r3, r2
 800a264:	005a      	lsls	r2, r3, #1
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	685b      	ldr	r3, [r3, #4]
 800a26a:	085b      	lsrs	r3, r3, #1
 800a26c:	441a      	add	r2, r3
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	685b      	ldr	r3, [r3, #4]
 800a272:	fbb2 f3f3 	udiv	r3, r2, r3
 800a276:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a27a:	2b0f      	cmp	r3, #15
 800a27c:	d916      	bls.n	800a2ac <UART_SetConfig+0x920>
 800a27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a284:	d212      	bcs.n	800a2ac <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a288:	b29b      	uxth	r3, r3
 800a28a:	f023 030f 	bic.w	r3, r3, #15
 800a28e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a292:	085b      	lsrs	r3, r3, #1
 800a294:	b29b      	uxth	r3, r3
 800a296:	f003 0307 	and.w	r3, r3, #7
 800a29a:	b29a      	uxth	r2, r3
 800a29c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a2a8:	60da      	str	r2, [r3, #12]
 800a2aa:	e0b9      	b.n	800a420 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a2b2:	e0b5      	b.n	800a420 <UART_SetConfig+0xa94>
 800a2b4:	03d09000 	.word	0x03d09000
 800a2b8:	003d0900 	.word	0x003d0900
 800a2bc:	0800b504 	.word	0x0800b504
 800a2c0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a2c4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a2c8:	2b20      	cmp	r3, #32
 800a2ca:	dc49      	bgt.n	800a360 <UART_SetConfig+0x9d4>
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	db7c      	blt.n	800a3ca <UART_SetConfig+0xa3e>
 800a2d0:	2b20      	cmp	r3, #32
 800a2d2:	d87a      	bhi.n	800a3ca <UART_SetConfig+0xa3e>
 800a2d4:	a201      	add	r2, pc, #4	; (adr r2, 800a2dc <UART_SetConfig+0x950>)
 800a2d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2da:	bf00      	nop
 800a2dc:	0800a367 	.word	0x0800a367
 800a2e0:	0800a36f 	.word	0x0800a36f
 800a2e4:	0800a3cb 	.word	0x0800a3cb
 800a2e8:	0800a3cb 	.word	0x0800a3cb
 800a2ec:	0800a377 	.word	0x0800a377
 800a2f0:	0800a3cb 	.word	0x0800a3cb
 800a2f4:	0800a3cb 	.word	0x0800a3cb
 800a2f8:	0800a3cb 	.word	0x0800a3cb
 800a2fc:	0800a387 	.word	0x0800a387
 800a300:	0800a3cb 	.word	0x0800a3cb
 800a304:	0800a3cb 	.word	0x0800a3cb
 800a308:	0800a3cb 	.word	0x0800a3cb
 800a30c:	0800a3cb 	.word	0x0800a3cb
 800a310:	0800a3cb 	.word	0x0800a3cb
 800a314:	0800a3cb 	.word	0x0800a3cb
 800a318:	0800a3cb 	.word	0x0800a3cb
 800a31c:	0800a397 	.word	0x0800a397
 800a320:	0800a3cb 	.word	0x0800a3cb
 800a324:	0800a3cb 	.word	0x0800a3cb
 800a328:	0800a3cb 	.word	0x0800a3cb
 800a32c:	0800a3cb 	.word	0x0800a3cb
 800a330:	0800a3cb 	.word	0x0800a3cb
 800a334:	0800a3cb 	.word	0x0800a3cb
 800a338:	0800a3cb 	.word	0x0800a3cb
 800a33c:	0800a3cb 	.word	0x0800a3cb
 800a340:	0800a3cb 	.word	0x0800a3cb
 800a344:	0800a3cb 	.word	0x0800a3cb
 800a348:	0800a3cb 	.word	0x0800a3cb
 800a34c:	0800a3cb 	.word	0x0800a3cb
 800a350:	0800a3cb 	.word	0x0800a3cb
 800a354:	0800a3cb 	.word	0x0800a3cb
 800a358:	0800a3cb 	.word	0x0800a3cb
 800a35c:	0800a3bd 	.word	0x0800a3bd
 800a360:	2b40      	cmp	r3, #64	; 0x40
 800a362:	d02e      	beq.n	800a3c2 <UART_SetConfig+0xa36>
 800a364:	e031      	b.n	800a3ca <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a366:	f7fb fc23 	bl	8005bb0 <HAL_RCC_GetPCLK1Freq>
 800a36a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a36c:	e033      	b.n	800a3d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a36e:	f7fb fc35 	bl	8005bdc <HAL_RCC_GetPCLK2Freq>
 800a372:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a374:	e02f      	b.n	800a3d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a376:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a37a:	4618      	mov	r0, r3
 800a37c:	f7fc fba0 	bl	8006ac0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a382:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a384:	e027      	b.n	800a3d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a386:	f107 0318 	add.w	r3, r7, #24
 800a38a:	4618      	mov	r0, r3
 800a38c:	f7fc fcec 	bl	8006d68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a390:	69fb      	ldr	r3, [r7, #28]
 800a392:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a394:	e01f      	b.n	800a3d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a396:	4b2d      	ldr	r3, [pc, #180]	; (800a44c <UART_SetConfig+0xac0>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f003 0320 	and.w	r3, r3, #32
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d009      	beq.n	800a3b6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a3a2:	4b2a      	ldr	r3, [pc, #168]	; (800a44c <UART_SetConfig+0xac0>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	08db      	lsrs	r3, r3, #3
 800a3a8:	f003 0303 	and.w	r3, r3, #3
 800a3ac:	4a28      	ldr	r2, [pc, #160]	; (800a450 <UART_SetConfig+0xac4>)
 800a3ae:	fa22 f303 	lsr.w	r3, r2, r3
 800a3b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a3b4:	e00f      	b.n	800a3d6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a3b6:	4b26      	ldr	r3, [pc, #152]	; (800a450 <UART_SetConfig+0xac4>)
 800a3b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3ba:	e00c      	b.n	800a3d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a3bc:	4b25      	ldr	r3, [pc, #148]	; (800a454 <UART_SetConfig+0xac8>)
 800a3be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3c0:	e009      	b.n	800a3d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a3c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3c8:	e005      	b.n	800a3d6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a3d4:	bf00      	nop
    }

    if (pclk != 0U)
 800a3d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d021      	beq.n	800a420 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e0:	4a1d      	ldr	r2, [pc, #116]	; (800a458 <UART_SetConfig+0xacc>)
 800a3e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3ea:	fbb3 f2f2 	udiv	r2, r3, r2
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	685b      	ldr	r3, [r3, #4]
 800a3f2:	085b      	lsrs	r3, r3, #1
 800a3f4:	441a      	add	r2, r3
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	685b      	ldr	r3, [r3, #4]
 800a3fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3fe:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a402:	2b0f      	cmp	r3, #15
 800a404:	d909      	bls.n	800a41a <UART_SetConfig+0xa8e>
 800a406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a40c:	d205      	bcs.n	800a41a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a40e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a410:	b29a      	uxth	r2, r3
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	60da      	str	r2, [r3, #12]
 800a418:	e002      	b.n	800a420 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a41a:	2301      	movs	r3, #1
 800a41c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	2201      	movs	r2, #1
 800a424:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	2201      	movs	r2, #1
 800a42c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	2200      	movs	r2, #0
 800a434:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	2200      	movs	r2, #0
 800a43a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a43c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a440:	4618      	mov	r0, r3
 800a442:	3748      	adds	r7, #72	; 0x48
 800a444:	46bd      	mov	sp, r7
 800a446:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a44a:	bf00      	nop
 800a44c:	58024400 	.word	0x58024400
 800a450:	03d09000 	.word	0x03d09000
 800a454:	003d0900 	.word	0x003d0900
 800a458:	0800b504 	.word	0x0800b504

0800a45c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b083      	sub	sp, #12
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a468:	f003 0301 	and.w	r3, r3, #1
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d00a      	beq.n	800a486 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	685b      	ldr	r3, [r3, #4]
 800a476:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	430a      	orrs	r2, r1
 800a484:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a48a:	f003 0302 	and.w	r3, r3, #2
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d00a      	beq.n	800a4a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	430a      	orrs	r2, r1
 800a4a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ac:	f003 0304 	and.w	r3, r3, #4
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d00a      	beq.n	800a4ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	430a      	orrs	r2, r1
 800a4c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ce:	f003 0308 	and.w	r3, r3, #8
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d00a      	beq.n	800a4ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	430a      	orrs	r2, r1
 800a4ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4f0:	f003 0310 	and.w	r3, r3, #16
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d00a      	beq.n	800a50e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	689b      	ldr	r3, [r3, #8]
 800a4fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	430a      	orrs	r2, r1
 800a50c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a512:	f003 0320 	and.w	r3, r3, #32
 800a516:	2b00      	cmp	r3, #0
 800a518:	d00a      	beq.n	800a530 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	689b      	ldr	r3, [r3, #8]
 800a520:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	430a      	orrs	r2, r1
 800a52e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d01a      	beq.n	800a572 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	685b      	ldr	r3, [r3, #4]
 800a542:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	430a      	orrs	r2, r1
 800a550:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a556:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a55a:	d10a      	bne.n	800a572 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	685b      	ldr	r3, [r3, #4]
 800a562:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	430a      	orrs	r2, r1
 800a570:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d00a      	beq.n	800a594 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	685b      	ldr	r3, [r3, #4]
 800a584:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	430a      	orrs	r2, r1
 800a592:	605a      	str	r2, [r3, #4]
  }
}
 800a594:	bf00      	nop
 800a596:	370c      	adds	r7, #12
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr

0800a5a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b086      	sub	sp, #24
 800a5a4:	af02      	add	r7, sp, #8
 800a5a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a5b0:	f7f7 f93e 	bl	8001830 <HAL_GetTick>
 800a5b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f003 0308 	and.w	r3, r3, #8
 800a5c0:	2b08      	cmp	r3, #8
 800a5c2:	d10e      	bne.n	800a5e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a5c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a5c8:	9300      	str	r3, [sp, #0]
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f000 f82f 	bl	800a636 <UART_WaitOnFlagUntilTimeout>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d001      	beq.n	800a5e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a5de:	2303      	movs	r3, #3
 800a5e0:	e025      	b.n	800a62e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f003 0304 	and.w	r3, r3, #4
 800a5ec:	2b04      	cmp	r3, #4
 800a5ee:	d10e      	bne.n	800a60e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a5f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a5f4:	9300      	str	r3, [sp, #0]
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f000 f819 	bl	800a636 <UART_WaitOnFlagUntilTimeout>
 800a604:	4603      	mov	r3, r0
 800a606:	2b00      	cmp	r3, #0
 800a608:	d001      	beq.n	800a60e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a60a:	2303      	movs	r3, #3
 800a60c:	e00f      	b.n	800a62e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2220      	movs	r2, #32
 800a612:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2220      	movs	r2, #32
 800a61a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2200      	movs	r2, #0
 800a622:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2200      	movs	r2, #0
 800a628:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a62c:	2300      	movs	r3, #0
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3710      	adds	r7, #16
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}

0800a636 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a636:	b580      	push	{r7, lr}
 800a638:	b09c      	sub	sp, #112	; 0x70
 800a63a:	af00      	add	r7, sp, #0
 800a63c:	60f8      	str	r0, [r7, #12]
 800a63e:	60b9      	str	r1, [r7, #8]
 800a640:	603b      	str	r3, [r7, #0]
 800a642:	4613      	mov	r3, r2
 800a644:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a646:	e0a9      	b.n	800a79c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a648:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a64a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a64e:	f000 80a5 	beq.w	800a79c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a652:	f7f7 f8ed 	bl	8001830 <HAL_GetTick>
 800a656:	4602      	mov	r2, r0
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	1ad3      	subs	r3, r2, r3
 800a65c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a65e:	429a      	cmp	r2, r3
 800a660:	d302      	bcc.n	800a668 <UART_WaitOnFlagUntilTimeout+0x32>
 800a662:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a664:	2b00      	cmp	r3, #0
 800a666:	d140      	bne.n	800a6ea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a66e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a670:	e853 3f00 	ldrex	r3, [r3]
 800a674:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a678:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a67c:	667b      	str	r3, [r7, #100]	; 0x64
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	461a      	mov	r2, r3
 800a684:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a686:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a688:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a68a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a68c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a68e:	e841 2300 	strex	r3, r2, [r1]
 800a692:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a694:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a696:	2b00      	cmp	r3, #0
 800a698:	d1e6      	bne.n	800a668 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	3308      	adds	r3, #8
 800a6a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6a4:	e853 3f00 	ldrex	r3, [r3]
 800a6a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a6aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ac:	f023 0301 	bic.w	r3, r3, #1
 800a6b0:	663b      	str	r3, [r7, #96]	; 0x60
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	3308      	adds	r3, #8
 800a6b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a6ba:	64ba      	str	r2, [r7, #72]	; 0x48
 800a6bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a6c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a6c2:	e841 2300 	strex	r3, r2, [r1]
 800a6c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a6c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d1e5      	bne.n	800a69a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2220      	movs	r2, #32
 800a6d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2220      	movs	r2, #32
 800a6da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a6e6:	2303      	movs	r3, #3
 800a6e8:	e069      	b.n	800a7be <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f003 0304 	and.w	r3, r3, #4
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d051      	beq.n	800a79c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	69db      	ldr	r3, [r3, #28]
 800a6fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a702:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a706:	d149      	bne.n	800a79c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a710:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a71a:	e853 3f00 	ldrex	r3, [r3]
 800a71e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a722:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a726:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	461a      	mov	r2, r3
 800a72e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a730:	637b      	str	r3, [r7, #52]	; 0x34
 800a732:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a734:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a736:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a738:	e841 2300 	strex	r3, r2, [r1]
 800a73c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a73e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a740:	2b00      	cmp	r3, #0
 800a742:	d1e6      	bne.n	800a712 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	3308      	adds	r3, #8
 800a74a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	e853 3f00 	ldrex	r3, [r3]
 800a752:	613b      	str	r3, [r7, #16]
   return(result);
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	f023 0301 	bic.w	r3, r3, #1
 800a75a:	66bb      	str	r3, [r7, #104]	; 0x68
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	3308      	adds	r3, #8
 800a762:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a764:	623a      	str	r2, [r7, #32]
 800a766:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a768:	69f9      	ldr	r1, [r7, #28]
 800a76a:	6a3a      	ldr	r2, [r7, #32]
 800a76c:	e841 2300 	strex	r3, r2, [r1]
 800a770:	61bb      	str	r3, [r7, #24]
   return(result);
 800a772:	69bb      	ldr	r3, [r7, #24]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d1e5      	bne.n	800a744 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	2220      	movs	r2, #32
 800a77c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2220      	movs	r2, #32
 800a784:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2220      	movs	r2, #32
 800a78c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2200      	movs	r2, #0
 800a794:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a798:	2303      	movs	r3, #3
 800a79a:	e010      	b.n	800a7be <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	69da      	ldr	r2, [r3, #28]
 800a7a2:	68bb      	ldr	r3, [r7, #8]
 800a7a4:	4013      	ands	r3, r2
 800a7a6:	68ba      	ldr	r2, [r7, #8]
 800a7a8:	429a      	cmp	r2, r3
 800a7aa:	bf0c      	ite	eq
 800a7ac:	2301      	moveq	r3, #1
 800a7ae:	2300      	movne	r3, #0
 800a7b0:	b2db      	uxtb	r3, r3
 800a7b2:	461a      	mov	r2, r3
 800a7b4:	79fb      	ldrb	r3, [r7, #7]
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	f43f af46 	beq.w	800a648 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a7bc:	2300      	movs	r3, #0
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3770      	adds	r7, #112	; 0x70
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
	...

0800a7c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b095      	sub	sp, #84	; 0x54
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7d8:	e853 3f00 	ldrex	r3, [r3]
 800a7dc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a7e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	461a      	mov	r2, r3
 800a7ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7ee:	643b      	str	r3, [r7, #64]	; 0x40
 800a7f0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a7f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a7f6:	e841 2300 	strex	r3, r2, [r1]
 800a7fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d1e6      	bne.n	800a7d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	3308      	adds	r3, #8
 800a808:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a80a:	6a3b      	ldr	r3, [r7, #32]
 800a80c:	e853 3f00 	ldrex	r3, [r3]
 800a810:	61fb      	str	r3, [r7, #28]
   return(result);
 800a812:	69fa      	ldr	r2, [r7, #28]
 800a814:	4b1e      	ldr	r3, [pc, #120]	; (800a890 <UART_EndRxTransfer+0xc8>)
 800a816:	4013      	ands	r3, r2
 800a818:	64bb      	str	r3, [r7, #72]	; 0x48
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	3308      	adds	r3, #8
 800a820:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a822:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a824:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a826:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a828:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a82a:	e841 2300 	strex	r3, r2, [r1]
 800a82e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a832:	2b00      	cmp	r3, #0
 800a834:	d1e5      	bne.n	800a802 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a83a:	2b01      	cmp	r3, #1
 800a83c:	d118      	bne.n	800a870 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	e853 3f00 	ldrex	r3, [r3]
 800a84a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	f023 0310 	bic.w	r3, r3, #16
 800a852:	647b      	str	r3, [r7, #68]	; 0x44
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	461a      	mov	r2, r3
 800a85a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a85c:	61bb      	str	r3, [r7, #24]
 800a85e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a860:	6979      	ldr	r1, [r7, #20]
 800a862:	69ba      	ldr	r2, [r7, #24]
 800a864:	e841 2300 	strex	r3, r2, [r1]
 800a868:	613b      	str	r3, [r7, #16]
   return(result);
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d1e6      	bne.n	800a83e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2220      	movs	r2, #32
 800a874:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2200      	movs	r2, #0
 800a87c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2200      	movs	r2, #0
 800a882:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a884:	bf00      	nop
 800a886:	3754      	adds	r7, #84	; 0x54
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	4770      	bx	lr
 800a890:	effffffe 	.word	0xeffffffe

0800a894 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b084      	sub	sp, #16
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a8b2:	68f8      	ldr	r0, [r7, #12]
 800a8b4:	f7ff f854 	bl	8009960 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a8b8:	bf00      	nop
 800a8ba:	3710      	adds	r7, #16
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}

0800a8c0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b088      	sub	sp, #32
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	e853 3f00 	ldrex	r3, [r3]
 800a8d4:	60bb      	str	r3, [r7, #8]
   return(result);
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a8dc:	61fb      	str	r3, [r7, #28]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	461a      	mov	r2, r3
 800a8e4:	69fb      	ldr	r3, [r7, #28]
 800a8e6:	61bb      	str	r3, [r7, #24]
 800a8e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ea:	6979      	ldr	r1, [r7, #20]
 800a8ec:	69ba      	ldr	r2, [r7, #24]
 800a8ee:	e841 2300 	strex	r3, r2, [r1]
 800a8f2:	613b      	str	r3, [r7, #16]
   return(result);
 800a8f4:	693b      	ldr	r3, [r7, #16]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d1e6      	bne.n	800a8c8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2220      	movs	r2, #32
 800a8fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2200      	movs	r2, #0
 800a906:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f7ff f81f 	bl	800994c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a90e:	bf00      	nop
 800a910:	3720      	adds	r7, #32
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}

0800a916 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a916:	b480      	push	{r7}
 800a918:	b083      	sub	sp, #12
 800a91a:	af00      	add	r7, sp, #0
 800a91c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a91e:	bf00      	nop
 800a920:	370c      	adds	r7, #12
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr

0800a92a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a92a:	b480      	push	{r7}
 800a92c:	b083      	sub	sp, #12
 800a92e:	af00      	add	r7, sp, #0
 800a930:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a932:	bf00      	nop
 800a934:	370c      	adds	r7, #12
 800a936:	46bd      	mov	sp, r7
 800a938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93c:	4770      	bx	lr

0800a93e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a93e:	b480      	push	{r7}
 800a940:	b083      	sub	sp, #12
 800a942:	af00      	add	r7, sp, #0
 800a944:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a946:	bf00      	nop
 800a948:	370c      	adds	r7, #12
 800a94a:	46bd      	mov	sp, r7
 800a94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a950:	4770      	bx	lr

0800a952 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a952:	b480      	push	{r7}
 800a954:	b085      	sub	sp, #20
 800a956:	af00      	add	r7, sp, #0
 800a958:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a960:	2b01      	cmp	r3, #1
 800a962:	d101      	bne.n	800a968 <HAL_UARTEx_DisableFifoMode+0x16>
 800a964:	2302      	movs	r3, #2
 800a966:	e027      	b.n	800a9b8 <HAL_UARTEx_DisableFifoMode+0x66>
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2201      	movs	r2, #1
 800a96c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2224      	movs	r2, #36	; 0x24
 800a974:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	681a      	ldr	r2, [r3, #0]
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f022 0201 	bic.w	r2, r2, #1
 800a98e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a996:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2200      	movs	r2, #0
 800a99c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	68fa      	ldr	r2, [r7, #12]
 800a9a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2220      	movs	r2, #32
 800a9aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a9b6:	2300      	movs	r3, #0
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3714      	adds	r7, #20
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c2:	4770      	bx	lr

0800a9c4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b084      	sub	sp, #16
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
 800a9cc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	d101      	bne.n	800a9dc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a9d8:	2302      	movs	r3, #2
 800a9da:	e02d      	b.n	800aa38 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2201      	movs	r2, #1
 800a9e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2224      	movs	r2, #36	; 0x24
 800a9e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	681a      	ldr	r2, [r3, #0]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f022 0201 	bic.w	r2, r2, #1
 800aa02:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	689b      	ldr	r3, [r3, #8]
 800aa0a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	683a      	ldr	r2, [r7, #0]
 800aa14:	430a      	orrs	r2, r1
 800aa16:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f000 f84f 	bl	800aabc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	68fa      	ldr	r2, [r7, #12]
 800aa24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2220      	movs	r2, #32
 800aa2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2200      	movs	r2, #0
 800aa32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aa36:	2300      	movs	r3, #0
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3710      	adds	r7, #16
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}

0800aa40 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b084      	sub	sp, #16
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aa50:	2b01      	cmp	r3, #1
 800aa52:	d101      	bne.n	800aa58 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aa54:	2302      	movs	r3, #2
 800aa56:	e02d      	b.n	800aab4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2224      	movs	r2, #36	; 0x24
 800aa64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	681a      	ldr	r2, [r3, #0]
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f022 0201 	bic.w	r2, r2, #1
 800aa7e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	689b      	ldr	r3, [r3, #8]
 800aa86:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	683a      	ldr	r2, [r7, #0]
 800aa90:	430a      	orrs	r2, r1
 800aa92:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f000 f811 	bl	800aabc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	68fa      	ldr	r2, [r7, #12]
 800aaa0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2220      	movs	r2, #32
 800aaa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2200      	movs	r2, #0
 800aaae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aab2:	2300      	movs	r3, #0
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3710      	adds	r7, #16
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}

0800aabc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b085      	sub	sp, #20
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d108      	bne.n	800aade <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2201      	movs	r2, #1
 800aad0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2201      	movs	r2, #1
 800aad8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aadc:	e031      	b.n	800ab42 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aade:	2310      	movs	r3, #16
 800aae0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aae2:	2310      	movs	r3, #16
 800aae4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	689b      	ldr	r3, [r3, #8]
 800aaec:	0e5b      	lsrs	r3, r3, #25
 800aaee:	b2db      	uxtb	r3, r3
 800aaf0:	f003 0307 	and.w	r3, r3, #7
 800aaf4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	689b      	ldr	r3, [r3, #8]
 800aafc:	0f5b      	lsrs	r3, r3, #29
 800aafe:	b2db      	uxtb	r3, r3
 800ab00:	f003 0307 	and.w	r3, r3, #7
 800ab04:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ab06:	7bbb      	ldrb	r3, [r7, #14]
 800ab08:	7b3a      	ldrb	r2, [r7, #12]
 800ab0a:	4911      	ldr	r1, [pc, #68]	; (800ab50 <UARTEx_SetNbDataToProcess+0x94>)
 800ab0c:	5c8a      	ldrb	r2, [r1, r2]
 800ab0e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ab12:	7b3a      	ldrb	r2, [r7, #12]
 800ab14:	490f      	ldr	r1, [pc, #60]	; (800ab54 <UARTEx_SetNbDataToProcess+0x98>)
 800ab16:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ab18:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab1c:	b29a      	uxth	r2, r3
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ab24:	7bfb      	ldrb	r3, [r7, #15]
 800ab26:	7b7a      	ldrb	r2, [r7, #13]
 800ab28:	4909      	ldr	r1, [pc, #36]	; (800ab50 <UARTEx_SetNbDataToProcess+0x94>)
 800ab2a:	5c8a      	ldrb	r2, [r1, r2]
 800ab2c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ab30:	7b7a      	ldrb	r2, [r7, #13]
 800ab32:	4908      	ldr	r1, [pc, #32]	; (800ab54 <UARTEx_SetNbDataToProcess+0x98>)
 800ab34:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ab36:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab3a:	b29a      	uxth	r2, r3
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ab42:	bf00      	nop
 800ab44:	3714      	adds	r7, #20
 800ab46:	46bd      	mov	sp, r7
 800ab48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4c:	4770      	bx	lr
 800ab4e:	bf00      	nop
 800ab50:	0800b51c 	.word	0x0800b51c
 800ab54:	0800b524 	.word	0x0800b524

0800ab58 <__errno>:
 800ab58:	4b01      	ldr	r3, [pc, #4]	; (800ab60 <__errno+0x8>)
 800ab5a:	6818      	ldr	r0, [r3, #0]
 800ab5c:	4770      	bx	lr
 800ab5e:	bf00      	nop
 800ab60:	24000014 	.word	0x24000014

0800ab64 <__libc_init_array>:
 800ab64:	b570      	push	{r4, r5, r6, lr}
 800ab66:	4d0d      	ldr	r5, [pc, #52]	; (800ab9c <__libc_init_array+0x38>)
 800ab68:	4c0d      	ldr	r4, [pc, #52]	; (800aba0 <__libc_init_array+0x3c>)
 800ab6a:	1b64      	subs	r4, r4, r5
 800ab6c:	10a4      	asrs	r4, r4, #2
 800ab6e:	2600      	movs	r6, #0
 800ab70:	42a6      	cmp	r6, r4
 800ab72:	d109      	bne.n	800ab88 <__libc_init_array+0x24>
 800ab74:	4d0b      	ldr	r5, [pc, #44]	; (800aba4 <__libc_init_array+0x40>)
 800ab76:	4c0c      	ldr	r4, [pc, #48]	; (800aba8 <__libc_init_array+0x44>)
 800ab78:	f000 fc8e 	bl	800b498 <_init>
 800ab7c:	1b64      	subs	r4, r4, r5
 800ab7e:	10a4      	asrs	r4, r4, #2
 800ab80:	2600      	movs	r6, #0
 800ab82:	42a6      	cmp	r6, r4
 800ab84:	d105      	bne.n	800ab92 <__libc_init_array+0x2e>
 800ab86:	bd70      	pop	{r4, r5, r6, pc}
 800ab88:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab8c:	4798      	blx	r3
 800ab8e:	3601      	adds	r6, #1
 800ab90:	e7ee      	b.n	800ab70 <__libc_init_array+0xc>
 800ab92:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab96:	4798      	blx	r3
 800ab98:	3601      	adds	r6, #1
 800ab9a:	e7f2      	b.n	800ab82 <__libc_init_array+0x1e>
 800ab9c:	0800b568 	.word	0x0800b568
 800aba0:	0800b568 	.word	0x0800b568
 800aba4:	0800b568 	.word	0x0800b568
 800aba8:	0800b56c 	.word	0x0800b56c

0800abac <memset>:
 800abac:	4402      	add	r2, r0
 800abae:	4603      	mov	r3, r0
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d100      	bne.n	800abb6 <memset+0xa>
 800abb4:	4770      	bx	lr
 800abb6:	f803 1b01 	strb.w	r1, [r3], #1
 800abba:	e7f9      	b.n	800abb0 <memset+0x4>

0800abbc <siprintf>:
 800abbc:	b40e      	push	{r1, r2, r3}
 800abbe:	b500      	push	{lr}
 800abc0:	b09c      	sub	sp, #112	; 0x70
 800abc2:	ab1d      	add	r3, sp, #116	; 0x74
 800abc4:	9002      	str	r0, [sp, #8]
 800abc6:	9006      	str	r0, [sp, #24]
 800abc8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800abcc:	4809      	ldr	r0, [pc, #36]	; (800abf4 <siprintf+0x38>)
 800abce:	9107      	str	r1, [sp, #28]
 800abd0:	9104      	str	r1, [sp, #16]
 800abd2:	4909      	ldr	r1, [pc, #36]	; (800abf8 <siprintf+0x3c>)
 800abd4:	f853 2b04 	ldr.w	r2, [r3], #4
 800abd8:	9105      	str	r1, [sp, #20]
 800abda:	6800      	ldr	r0, [r0, #0]
 800abdc:	9301      	str	r3, [sp, #4]
 800abde:	a902      	add	r1, sp, #8
 800abe0:	f000 f868 	bl	800acb4 <_svfiprintf_r>
 800abe4:	9b02      	ldr	r3, [sp, #8]
 800abe6:	2200      	movs	r2, #0
 800abe8:	701a      	strb	r2, [r3, #0]
 800abea:	b01c      	add	sp, #112	; 0x70
 800abec:	f85d eb04 	ldr.w	lr, [sp], #4
 800abf0:	b003      	add	sp, #12
 800abf2:	4770      	bx	lr
 800abf4:	24000014 	.word	0x24000014
 800abf8:	ffff0208 	.word	0xffff0208

0800abfc <__ssputs_r>:
 800abfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac00:	688e      	ldr	r6, [r1, #8]
 800ac02:	429e      	cmp	r6, r3
 800ac04:	4682      	mov	sl, r0
 800ac06:	460c      	mov	r4, r1
 800ac08:	4690      	mov	r8, r2
 800ac0a:	461f      	mov	r7, r3
 800ac0c:	d838      	bhi.n	800ac80 <__ssputs_r+0x84>
 800ac0e:	898a      	ldrh	r2, [r1, #12]
 800ac10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ac14:	d032      	beq.n	800ac7c <__ssputs_r+0x80>
 800ac16:	6825      	ldr	r5, [r4, #0]
 800ac18:	6909      	ldr	r1, [r1, #16]
 800ac1a:	eba5 0901 	sub.w	r9, r5, r1
 800ac1e:	6965      	ldr	r5, [r4, #20]
 800ac20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ac28:	3301      	adds	r3, #1
 800ac2a:	444b      	add	r3, r9
 800ac2c:	106d      	asrs	r5, r5, #1
 800ac2e:	429d      	cmp	r5, r3
 800ac30:	bf38      	it	cc
 800ac32:	461d      	movcc	r5, r3
 800ac34:	0553      	lsls	r3, r2, #21
 800ac36:	d531      	bpl.n	800ac9c <__ssputs_r+0xa0>
 800ac38:	4629      	mov	r1, r5
 800ac3a:	f000 fb63 	bl	800b304 <_malloc_r>
 800ac3e:	4606      	mov	r6, r0
 800ac40:	b950      	cbnz	r0, 800ac58 <__ssputs_r+0x5c>
 800ac42:	230c      	movs	r3, #12
 800ac44:	f8ca 3000 	str.w	r3, [sl]
 800ac48:	89a3      	ldrh	r3, [r4, #12]
 800ac4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac4e:	81a3      	strh	r3, [r4, #12]
 800ac50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac58:	6921      	ldr	r1, [r4, #16]
 800ac5a:	464a      	mov	r2, r9
 800ac5c:	f000 fabe 	bl	800b1dc <memcpy>
 800ac60:	89a3      	ldrh	r3, [r4, #12]
 800ac62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ac66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac6a:	81a3      	strh	r3, [r4, #12]
 800ac6c:	6126      	str	r6, [r4, #16]
 800ac6e:	6165      	str	r5, [r4, #20]
 800ac70:	444e      	add	r6, r9
 800ac72:	eba5 0509 	sub.w	r5, r5, r9
 800ac76:	6026      	str	r6, [r4, #0]
 800ac78:	60a5      	str	r5, [r4, #8]
 800ac7a:	463e      	mov	r6, r7
 800ac7c:	42be      	cmp	r6, r7
 800ac7e:	d900      	bls.n	800ac82 <__ssputs_r+0x86>
 800ac80:	463e      	mov	r6, r7
 800ac82:	6820      	ldr	r0, [r4, #0]
 800ac84:	4632      	mov	r2, r6
 800ac86:	4641      	mov	r1, r8
 800ac88:	f000 fab6 	bl	800b1f8 <memmove>
 800ac8c:	68a3      	ldr	r3, [r4, #8]
 800ac8e:	1b9b      	subs	r3, r3, r6
 800ac90:	60a3      	str	r3, [r4, #8]
 800ac92:	6823      	ldr	r3, [r4, #0]
 800ac94:	4433      	add	r3, r6
 800ac96:	6023      	str	r3, [r4, #0]
 800ac98:	2000      	movs	r0, #0
 800ac9a:	e7db      	b.n	800ac54 <__ssputs_r+0x58>
 800ac9c:	462a      	mov	r2, r5
 800ac9e:	f000 fba5 	bl	800b3ec <_realloc_r>
 800aca2:	4606      	mov	r6, r0
 800aca4:	2800      	cmp	r0, #0
 800aca6:	d1e1      	bne.n	800ac6c <__ssputs_r+0x70>
 800aca8:	6921      	ldr	r1, [r4, #16]
 800acaa:	4650      	mov	r0, sl
 800acac:	f000 fabe 	bl	800b22c <_free_r>
 800acb0:	e7c7      	b.n	800ac42 <__ssputs_r+0x46>
	...

0800acb4 <_svfiprintf_r>:
 800acb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acb8:	4698      	mov	r8, r3
 800acba:	898b      	ldrh	r3, [r1, #12]
 800acbc:	061b      	lsls	r3, r3, #24
 800acbe:	b09d      	sub	sp, #116	; 0x74
 800acc0:	4607      	mov	r7, r0
 800acc2:	460d      	mov	r5, r1
 800acc4:	4614      	mov	r4, r2
 800acc6:	d50e      	bpl.n	800ace6 <_svfiprintf_r+0x32>
 800acc8:	690b      	ldr	r3, [r1, #16]
 800acca:	b963      	cbnz	r3, 800ace6 <_svfiprintf_r+0x32>
 800accc:	2140      	movs	r1, #64	; 0x40
 800acce:	f000 fb19 	bl	800b304 <_malloc_r>
 800acd2:	6028      	str	r0, [r5, #0]
 800acd4:	6128      	str	r0, [r5, #16]
 800acd6:	b920      	cbnz	r0, 800ace2 <_svfiprintf_r+0x2e>
 800acd8:	230c      	movs	r3, #12
 800acda:	603b      	str	r3, [r7, #0]
 800acdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ace0:	e0d1      	b.n	800ae86 <_svfiprintf_r+0x1d2>
 800ace2:	2340      	movs	r3, #64	; 0x40
 800ace4:	616b      	str	r3, [r5, #20]
 800ace6:	2300      	movs	r3, #0
 800ace8:	9309      	str	r3, [sp, #36]	; 0x24
 800acea:	2320      	movs	r3, #32
 800acec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800acf0:	f8cd 800c 	str.w	r8, [sp, #12]
 800acf4:	2330      	movs	r3, #48	; 0x30
 800acf6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800aea0 <_svfiprintf_r+0x1ec>
 800acfa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800acfe:	f04f 0901 	mov.w	r9, #1
 800ad02:	4623      	mov	r3, r4
 800ad04:	469a      	mov	sl, r3
 800ad06:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad0a:	b10a      	cbz	r2, 800ad10 <_svfiprintf_r+0x5c>
 800ad0c:	2a25      	cmp	r2, #37	; 0x25
 800ad0e:	d1f9      	bne.n	800ad04 <_svfiprintf_r+0x50>
 800ad10:	ebba 0b04 	subs.w	fp, sl, r4
 800ad14:	d00b      	beq.n	800ad2e <_svfiprintf_r+0x7a>
 800ad16:	465b      	mov	r3, fp
 800ad18:	4622      	mov	r2, r4
 800ad1a:	4629      	mov	r1, r5
 800ad1c:	4638      	mov	r0, r7
 800ad1e:	f7ff ff6d 	bl	800abfc <__ssputs_r>
 800ad22:	3001      	adds	r0, #1
 800ad24:	f000 80aa 	beq.w	800ae7c <_svfiprintf_r+0x1c8>
 800ad28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad2a:	445a      	add	r2, fp
 800ad2c:	9209      	str	r2, [sp, #36]	; 0x24
 800ad2e:	f89a 3000 	ldrb.w	r3, [sl]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	f000 80a2 	beq.w	800ae7c <_svfiprintf_r+0x1c8>
 800ad38:	2300      	movs	r3, #0
 800ad3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ad3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad42:	f10a 0a01 	add.w	sl, sl, #1
 800ad46:	9304      	str	r3, [sp, #16]
 800ad48:	9307      	str	r3, [sp, #28]
 800ad4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad4e:	931a      	str	r3, [sp, #104]	; 0x68
 800ad50:	4654      	mov	r4, sl
 800ad52:	2205      	movs	r2, #5
 800ad54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad58:	4851      	ldr	r0, [pc, #324]	; (800aea0 <_svfiprintf_r+0x1ec>)
 800ad5a:	f7f5 fac9 	bl	80002f0 <memchr>
 800ad5e:	9a04      	ldr	r2, [sp, #16]
 800ad60:	b9d8      	cbnz	r0, 800ad9a <_svfiprintf_r+0xe6>
 800ad62:	06d0      	lsls	r0, r2, #27
 800ad64:	bf44      	itt	mi
 800ad66:	2320      	movmi	r3, #32
 800ad68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad6c:	0711      	lsls	r1, r2, #28
 800ad6e:	bf44      	itt	mi
 800ad70:	232b      	movmi	r3, #43	; 0x2b
 800ad72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad76:	f89a 3000 	ldrb.w	r3, [sl]
 800ad7a:	2b2a      	cmp	r3, #42	; 0x2a
 800ad7c:	d015      	beq.n	800adaa <_svfiprintf_r+0xf6>
 800ad7e:	9a07      	ldr	r2, [sp, #28]
 800ad80:	4654      	mov	r4, sl
 800ad82:	2000      	movs	r0, #0
 800ad84:	f04f 0c0a 	mov.w	ip, #10
 800ad88:	4621      	mov	r1, r4
 800ad8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad8e:	3b30      	subs	r3, #48	; 0x30
 800ad90:	2b09      	cmp	r3, #9
 800ad92:	d94e      	bls.n	800ae32 <_svfiprintf_r+0x17e>
 800ad94:	b1b0      	cbz	r0, 800adc4 <_svfiprintf_r+0x110>
 800ad96:	9207      	str	r2, [sp, #28]
 800ad98:	e014      	b.n	800adc4 <_svfiprintf_r+0x110>
 800ad9a:	eba0 0308 	sub.w	r3, r0, r8
 800ad9e:	fa09 f303 	lsl.w	r3, r9, r3
 800ada2:	4313      	orrs	r3, r2
 800ada4:	9304      	str	r3, [sp, #16]
 800ada6:	46a2      	mov	sl, r4
 800ada8:	e7d2      	b.n	800ad50 <_svfiprintf_r+0x9c>
 800adaa:	9b03      	ldr	r3, [sp, #12]
 800adac:	1d19      	adds	r1, r3, #4
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	9103      	str	r1, [sp, #12]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	bfbb      	ittet	lt
 800adb6:	425b      	neglt	r3, r3
 800adb8:	f042 0202 	orrlt.w	r2, r2, #2
 800adbc:	9307      	strge	r3, [sp, #28]
 800adbe:	9307      	strlt	r3, [sp, #28]
 800adc0:	bfb8      	it	lt
 800adc2:	9204      	strlt	r2, [sp, #16]
 800adc4:	7823      	ldrb	r3, [r4, #0]
 800adc6:	2b2e      	cmp	r3, #46	; 0x2e
 800adc8:	d10c      	bne.n	800ade4 <_svfiprintf_r+0x130>
 800adca:	7863      	ldrb	r3, [r4, #1]
 800adcc:	2b2a      	cmp	r3, #42	; 0x2a
 800adce:	d135      	bne.n	800ae3c <_svfiprintf_r+0x188>
 800add0:	9b03      	ldr	r3, [sp, #12]
 800add2:	1d1a      	adds	r2, r3, #4
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	9203      	str	r2, [sp, #12]
 800add8:	2b00      	cmp	r3, #0
 800adda:	bfb8      	it	lt
 800addc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ade0:	3402      	adds	r4, #2
 800ade2:	9305      	str	r3, [sp, #20]
 800ade4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800aeb0 <_svfiprintf_r+0x1fc>
 800ade8:	7821      	ldrb	r1, [r4, #0]
 800adea:	2203      	movs	r2, #3
 800adec:	4650      	mov	r0, sl
 800adee:	f7f5 fa7f 	bl	80002f0 <memchr>
 800adf2:	b140      	cbz	r0, 800ae06 <_svfiprintf_r+0x152>
 800adf4:	2340      	movs	r3, #64	; 0x40
 800adf6:	eba0 000a 	sub.w	r0, r0, sl
 800adfa:	fa03 f000 	lsl.w	r0, r3, r0
 800adfe:	9b04      	ldr	r3, [sp, #16]
 800ae00:	4303      	orrs	r3, r0
 800ae02:	3401      	adds	r4, #1
 800ae04:	9304      	str	r3, [sp, #16]
 800ae06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae0a:	4826      	ldr	r0, [pc, #152]	; (800aea4 <_svfiprintf_r+0x1f0>)
 800ae0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae10:	2206      	movs	r2, #6
 800ae12:	f7f5 fa6d 	bl	80002f0 <memchr>
 800ae16:	2800      	cmp	r0, #0
 800ae18:	d038      	beq.n	800ae8c <_svfiprintf_r+0x1d8>
 800ae1a:	4b23      	ldr	r3, [pc, #140]	; (800aea8 <_svfiprintf_r+0x1f4>)
 800ae1c:	bb1b      	cbnz	r3, 800ae66 <_svfiprintf_r+0x1b2>
 800ae1e:	9b03      	ldr	r3, [sp, #12]
 800ae20:	3307      	adds	r3, #7
 800ae22:	f023 0307 	bic.w	r3, r3, #7
 800ae26:	3308      	adds	r3, #8
 800ae28:	9303      	str	r3, [sp, #12]
 800ae2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae2c:	4433      	add	r3, r6
 800ae2e:	9309      	str	r3, [sp, #36]	; 0x24
 800ae30:	e767      	b.n	800ad02 <_svfiprintf_r+0x4e>
 800ae32:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae36:	460c      	mov	r4, r1
 800ae38:	2001      	movs	r0, #1
 800ae3a:	e7a5      	b.n	800ad88 <_svfiprintf_r+0xd4>
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	3401      	adds	r4, #1
 800ae40:	9305      	str	r3, [sp, #20]
 800ae42:	4619      	mov	r1, r3
 800ae44:	f04f 0c0a 	mov.w	ip, #10
 800ae48:	4620      	mov	r0, r4
 800ae4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae4e:	3a30      	subs	r2, #48	; 0x30
 800ae50:	2a09      	cmp	r2, #9
 800ae52:	d903      	bls.n	800ae5c <_svfiprintf_r+0x1a8>
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d0c5      	beq.n	800ade4 <_svfiprintf_r+0x130>
 800ae58:	9105      	str	r1, [sp, #20]
 800ae5a:	e7c3      	b.n	800ade4 <_svfiprintf_r+0x130>
 800ae5c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae60:	4604      	mov	r4, r0
 800ae62:	2301      	movs	r3, #1
 800ae64:	e7f0      	b.n	800ae48 <_svfiprintf_r+0x194>
 800ae66:	ab03      	add	r3, sp, #12
 800ae68:	9300      	str	r3, [sp, #0]
 800ae6a:	462a      	mov	r2, r5
 800ae6c:	4b0f      	ldr	r3, [pc, #60]	; (800aeac <_svfiprintf_r+0x1f8>)
 800ae6e:	a904      	add	r1, sp, #16
 800ae70:	4638      	mov	r0, r7
 800ae72:	f3af 8000 	nop.w
 800ae76:	1c42      	adds	r2, r0, #1
 800ae78:	4606      	mov	r6, r0
 800ae7a:	d1d6      	bne.n	800ae2a <_svfiprintf_r+0x176>
 800ae7c:	89ab      	ldrh	r3, [r5, #12]
 800ae7e:	065b      	lsls	r3, r3, #25
 800ae80:	f53f af2c 	bmi.w	800acdc <_svfiprintf_r+0x28>
 800ae84:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae86:	b01d      	add	sp, #116	; 0x74
 800ae88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae8c:	ab03      	add	r3, sp, #12
 800ae8e:	9300      	str	r3, [sp, #0]
 800ae90:	462a      	mov	r2, r5
 800ae92:	4b06      	ldr	r3, [pc, #24]	; (800aeac <_svfiprintf_r+0x1f8>)
 800ae94:	a904      	add	r1, sp, #16
 800ae96:	4638      	mov	r0, r7
 800ae98:	f000 f87a 	bl	800af90 <_printf_i>
 800ae9c:	e7eb      	b.n	800ae76 <_svfiprintf_r+0x1c2>
 800ae9e:	bf00      	nop
 800aea0:	0800b52c 	.word	0x0800b52c
 800aea4:	0800b536 	.word	0x0800b536
 800aea8:	00000000 	.word	0x00000000
 800aeac:	0800abfd 	.word	0x0800abfd
 800aeb0:	0800b532 	.word	0x0800b532

0800aeb4 <_printf_common>:
 800aeb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aeb8:	4616      	mov	r6, r2
 800aeba:	4699      	mov	r9, r3
 800aebc:	688a      	ldr	r2, [r1, #8]
 800aebe:	690b      	ldr	r3, [r1, #16]
 800aec0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aec4:	4293      	cmp	r3, r2
 800aec6:	bfb8      	it	lt
 800aec8:	4613      	movlt	r3, r2
 800aeca:	6033      	str	r3, [r6, #0]
 800aecc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aed0:	4607      	mov	r7, r0
 800aed2:	460c      	mov	r4, r1
 800aed4:	b10a      	cbz	r2, 800aeda <_printf_common+0x26>
 800aed6:	3301      	adds	r3, #1
 800aed8:	6033      	str	r3, [r6, #0]
 800aeda:	6823      	ldr	r3, [r4, #0]
 800aedc:	0699      	lsls	r1, r3, #26
 800aede:	bf42      	ittt	mi
 800aee0:	6833      	ldrmi	r3, [r6, #0]
 800aee2:	3302      	addmi	r3, #2
 800aee4:	6033      	strmi	r3, [r6, #0]
 800aee6:	6825      	ldr	r5, [r4, #0]
 800aee8:	f015 0506 	ands.w	r5, r5, #6
 800aeec:	d106      	bne.n	800aefc <_printf_common+0x48>
 800aeee:	f104 0a19 	add.w	sl, r4, #25
 800aef2:	68e3      	ldr	r3, [r4, #12]
 800aef4:	6832      	ldr	r2, [r6, #0]
 800aef6:	1a9b      	subs	r3, r3, r2
 800aef8:	42ab      	cmp	r3, r5
 800aefa:	dc26      	bgt.n	800af4a <_printf_common+0x96>
 800aefc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800af00:	1e13      	subs	r3, r2, #0
 800af02:	6822      	ldr	r2, [r4, #0]
 800af04:	bf18      	it	ne
 800af06:	2301      	movne	r3, #1
 800af08:	0692      	lsls	r2, r2, #26
 800af0a:	d42b      	bmi.n	800af64 <_printf_common+0xb0>
 800af0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800af10:	4649      	mov	r1, r9
 800af12:	4638      	mov	r0, r7
 800af14:	47c0      	blx	r8
 800af16:	3001      	adds	r0, #1
 800af18:	d01e      	beq.n	800af58 <_printf_common+0xa4>
 800af1a:	6823      	ldr	r3, [r4, #0]
 800af1c:	68e5      	ldr	r5, [r4, #12]
 800af1e:	6832      	ldr	r2, [r6, #0]
 800af20:	f003 0306 	and.w	r3, r3, #6
 800af24:	2b04      	cmp	r3, #4
 800af26:	bf08      	it	eq
 800af28:	1aad      	subeq	r5, r5, r2
 800af2a:	68a3      	ldr	r3, [r4, #8]
 800af2c:	6922      	ldr	r2, [r4, #16]
 800af2e:	bf0c      	ite	eq
 800af30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800af34:	2500      	movne	r5, #0
 800af36:	4293      	cmp	r3, r2
 800af38:	bfc4      	itt	gt
 800af3a:	1a9b      	subgt	r3, r3, r2
 800af3c:	18ed      	addgt	r5, r5, r3
 800af3e:	2600      	movs	r6, #0
 800af40:	341a      	adds	r4, #26
 800af42:	42b5      	cmp	r5, r6
 800af44:	d11a      	bne.n	800af7c <_printf_common+0xc8>
 800af46:	2000      	movs	r0, #0
 800af48:	e008      	b.n	800af5c <_printf_common+0xa8>
 800af4a:	2301      	movs	r3, #1
 800af4c:	4652      	mov	r2, sl
 800af4e:	4649      	mov	r1, r9
 800af50:	4638      	mov	r0, r7
 800af52:	47c0      	blx	r8
 800af54:	3001      	adds	r0, #1
 800af56:	d103      	bne.n	800af60 <_printf_common+0xac>
 800af58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af60:	3501      	adds	r5, #1
 800af62:	e7c6      	b.n	800aef2 <_printf_common+0x3e>
 800af64:	18e1      	adds	r1, r4, r3
 800af66:	1c5a      	adds	r2, r3, #1
 800af68:	2030      	movs	r0, #48	; 0x30
 800af6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800af6e:	4422      	add	r2, r4
 800af70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800af74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800af78:	3302      	adds	r3, #2
 800af7a:	e7c7      	b.n	800af0c <_printf_common+0x58>
 800af7c:	2301      	movs	r3, #1
 800af7e:	4622      	mov	r2, r4
 800af80:	4649      	mov	r1, r9
 800af82:	4638      	mov	r0, r7
 800af84:	47c0      	blx	r8
 800af86:	3001      	adds	r0, #1
 800af88:	d0e6      	beq.n	800af58 <_printf_common+0xa4>
 800af8a:	3601      	adds	r6, #1
 800af8c:	e7d9      	b.n	800af42 <_printf_common+0x8e>
	...

0800af90 <_printf_i>:
 800af90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af94:	7e0f      	ldrb	r7, [r1, #24]
 800af96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800af98:	2f78      	cmp	r7, #120	; 0x78
 800af9a:	4691      	mov	r9, r2
 800af9c:	4680      	mov	r8, r0
 800af9e:	460c      	mov	r4, r1
 800afa0:	469a      	mov	sl, r3
 800afa2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800afa6:	d807      	bhi.n	800afb8 <_printf_i+0x28>
 800afa8:	2f62      	cmp	r7, #98	; 0x62
 800afaa:	d80a      	bhi.n	800afc2 <_printf_i+0x32>
 800afac:	2f00      	cmp	r7, #0
 800afae:	f000 80d8 	beq.w	800b162 <_printf_i+0x1d2>
 800afb2:	2f58      	cmp	r7, #88	; 0x58
 800afb4:	f000 80a3 	beq.w	800b0fe <_printf_i+0x16e>
 800afb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800afbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800afc0:	e03a      	b.n	800b038 <_printf_i+0xa8>
 800afc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800afc6:	2b15      	cmp	r3, #21
 800afc8:	d8f6      	bhi.n	800afb8 <_printf_i+0x28>
 800afca:	a101      	add	r1, pc, #4	; (adr r1, 800afd0 <_printf_i+0x40>)
 800afcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800afd0:	0800b029 	.word	0x0800b029
 800afd4:	0800b03d 	.word	0x0800b03d
 800afd8:	0800afb9 	.word	0x0800afb9
 800afdc:	0800afb9 	.word	0x0800afb9
 800afe0:	0800afb9 	.word	0x0800afb9
 800afe4:	0800afb9 	.word	0x0800afb9
 800afe8:	0800b03d 	.word	0x0800b03d
 800afec:	0800afb9 	.word	0x0800afb9
 800aff0:	0800afb9 	.word	0x0800afb9
 800aff4:	0800afb9 	.word	0x0800afb9
 800aff8:	0800afb9 	.word	0x0800afb9
 800affc:	0800b149 	.word	0x0800b149
 800b000:	0800b06d 	.word	0x0800b06d
 800b004:	0800b12b 	.word	0x0800b12b
 800b008:	0800afb9 	.word	0x0800afb9
 800b00c:	0800afb9 	.word	0x0800afb9
 800b010:	0800b16b 	.word	0x0800b16b
 800b014:	0800afb9 	.word	0x0800afb9
 800b018:	0800b06d 	.word	0x0800b06d
 800b01c:	0800afb9 	.word	0x0800afb9
 800b020:	0800afb9 	.word	0x0800afb9
 800b024:	0800b133 	.word	0x0800b133
 800b028:	682b      	ldr	r3, [r5, #0]
 800b02a:	1d1a      	adds	r2, r3, #4
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	602a      	str	r2, [r5, #0]
 800b030:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b034:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b038:	2301      	movs	r3, #1
 800b03a:	e0a3      	b.n	800b184 <_printf_i+0x1f4>
 800b03c:	6820      	ldr	r0, [r4, #0]
 800b03e:	6829      	ldr	r1, [r5, #0]
 800b040:	0606      	lsls	r6, r0, #24
 800b042:	f101 0304 	add.w	r3, r1, #4
 800b046:	d50a      	bpl.n	800b05e <_printf_i+0xce>
 800b048:	680e      	ldr	r6, [r1, #0]
 800b04a:	602b      	str	r3, [r5, #0]
 800b04c:	2e00      	cmp	r6, #0
 800b04e:	da03      	bge.n	800b058 <_printf_i+0xc8>
 800b050:	232d      	movs	r3, #45	; 0x2d
 800b052:	4276      	negs	r6, r6
 800b054:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b058:	485e      	ldr	r0, [pc, #376]	; (800b1d4 <_printf_i+0x244>)
 800b05a:	230a      	movs	r3, #10
 800b05c:	e019      	b.n	800b092 <_printf_i+0x102>
 800b05e:	680e      	ldr	r6, [r1, #0]
 800b060:	602b      	str	r3, [r5, #0]
 800b062:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b066:	bf18      	it	ne
 800b068:	b236      	sxthne	r6, r6
 800b06a:	e7ef      	b.n	800b04c <_printf_i+0xbc>
 800b06c:	682b      	ldr	r3, [r5, #0]
 800b06e:	6820      	ldr	r0, [r4, #0]
 800b070:	1d19      	adds	r1, r3, #4
 800b072:	6029      	str	r1, [r5, #0]
 800b074:	0601      	lsls	r1, r0, #24
 800b076:	d501      	bpl.n	800b07c <_printf_i+0xec>
 800b078:	681e      	ldr	r6, [r3, #0]
 800b07a:	e002      	b.n	800b082 <_printf_i+0xf2>
 800b07c:	0646      	lsls	r6, r0, #25
 800b07e:	d5fb      	bpl.n	800b078 <_printf_i+0xe8>
 800b080:	881e      	ldrh	r6, [r3, #0]
 800b082:	4854      	ldr	r0, [pc, #336]	; (800b1d4 <_printf_i+0x244>)
 800b084:	2f6f      	cmp	r7, #111	; 0x6f
 800b086:	bf0c      	ite	eq
 800b088:	2308      	moveq	r3, #8
 800b08a:	230a      	movne	r3, #10
 800b08c:	2100      	movs	r1, #0
 800b08e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b092:	6865      	ldr	r5, [r4, #4]
 800b094:	60a5      	str	r5, [r4, #8]
 800b096:	2d00      	cmp	r5, #0
 800b098:	bfa2      	ittt	ge
 800b09a:	6821      	ldrge	r1, [r4, #0]
 800b09c:	f021 0104 	bicge.w	r1, r1, #4
 800b0a0:	6021      	strge	r1, [r4, #0]
 800b0a2:	b90e      	cbnz	r6, 800b0a8 <_printf_i+0x118>
 800b0a4:	2d00      	cmp	r5, #0
 800b0a6:	d04d      	beq.n	800b144 <_printf_i+0x1b4>
 800b0a8:	4615      	mov	r5, r2
 800b0aa:	fbb6 f1f3 	udiv	r1, r6, r3
 800b0ae:	fb03 6711 	mls	r7, r3, r1, r6
 800b0b2:	5dc7      	ldrb	r7, [r0, r7]
 800b0b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b0b8:	4637      	mov	r7, r6
 800b0ba:	42bb      	cmp	r3, r7
 800b0bc:	460e      	mov	r6, r1
 800b0be:	d9f4      	bls.n	800b0aa <_printf_i+0x11a>
 800b0c0:	2b08      	cmp	r3, #8
 800b0c2:	d10b      	bne.n	800b0dc <_printf_i+0x14c>
 800b0c4:	6823      	ldr	r3, [r4, #0]
 800b0c6:	07de      	lsls	r6, r3, #31
 800b0c8:	d508      	bpl.n	800b0dc <_printf_i+0x14c>
 800b0ca:	6923      	ldr	r3, [r4, #16]
 800b0cc:	6861      	ldr	r1, [r4, #4]
 800b0ce:	4299      	cmp	r1, r3
 800b0d0:	bfde      	ittt	le
 800b0d2:	2330      	movle	r3, #48	; 0x30
 800b0d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b0d8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b0dc:	1b52      	subs	r2, r2, r5
 800b0de:	6122      	str	r2, [r4, #16]
 800b0e0:	f8cd a000 	str.w	sl, [sp]
 800b0e4:	464b      	mov	r3, r9
 800b0e6:	aa03      	add	r2, sp, #12
 800b0e8:	4621      	mov	r1, r4
 800b0ea:	4640      	mov	r0, r8
 800b0ec:	f7ff fee2 	bl	800aeb4 <_printf_common>
 800b0f0:	3001      	adds	r0, #1
 800b0f2:	d14c      	bne.n	800b18e <_printf_i+0x1fe>
 800b0f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b0f8:	b004      	add	sp, #16
 800b0fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0fe:	4835      	ldr	r0, [pc, #212]	; (800b1d4 <_printf_i+0x244>)
 800b100:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b104:	6829      	ldr	r1, [r5, #0]
 800b106:	6823      	ldr	r3, [r4, #0]
 800b108:	f851 6b04 	ldr.w	r6, [r1], #4
 800b10c:	6029      	str	r1, [r5, #0]
 800b10e:	061d      	lsls	r5, r3, #24
 800b110:	d514      	bpl.n	800b13c <_printf_i+0x1ac>
 800b112:	07df      	lsls	r7, r3, #31
 800b114:	bf44      	itt	mi
 800b116:	f043 0320 	orrmi.w	r3, r3, #32
 800b11a:	6023      	strmi	r3, [r4, #0]
 800b11c:	b91e      	cbnz	r6, 800b126 <_printf_i+0x196>
 800b11e:	6823      	ldr	r3, [r4, #0]
 800b120:	f023 0320 	bic.w	r3, r3, #32
 800b124:	6023      	str	r3, [r4, #0]
 800b126:	2310      	movs	r3, #16
 800b128:	e7b0      	b.n	800b08c <_printf_i+0xfc>
 800b12a:	6823      	ldr	r3, [r4, #0]
 800b12c:	f043 0320 	orr.w	r3, r3, #32
 800b130:	6023      	str	r3, [r4, #0]
 800b132:	2378      	movs	r3, #120	; 0x78
 800b134:	4828      	ldr	r0, [pc, #160]	; (800b1d8 <_printf_i+0x248>)
 800b136:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b13a:	e7e3      	b.n	800b104 <_printf_i+0x174>
 800b13c:	0659      	lsls	r1, r3, #25
 800b13e:	bf48      	it	mi
 800b140:	b2b6      	uxthmi	r6, r6
 800b142:	e7e6      	b.n	800b112 <_printf_i+0x182>
 800b144:	4615      	mov	r5, r2
 800b146:	e7bb      	b.n	800b0c0 <_printf_i+0x130>
 800b148:	682b      	ldr	r3, [r5, #0]
 800b14a:	6826      	ldr	r6, [r4, #0]
 800b14c:	6961      	ldr	r1, [r4, #20]
 800b14e:	1d18      	adds	r0, r3, #4
 800b150:	6028      	str	r0, [r5, #0]
 800b152:	0635      	lsls	r5, r6, #24
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	d501      	bpl.n	800b15c <_printf_i+0x1cc>
 800b158:	6019      	str	r1, [r3, #0]
 800b15a:	e002      	b.n	800b162 <_printf_i+0x1d2>
 800b15c:	0670      	lsls	r0, r6, #25
 800b15e:	d5fb      	bpl.n	800b158 <_printf_i+0x1c8>
 800b160:	8019      	strh	r1, [r3, #0]
 800b162:	2300      	movs	r3, #0
 800b164:	6123      	str	r3, [r4, #16]
 800b166:	4615      	mov	r5, r2
 800b168:	e7ba      	b.n	800b0e0 <_printf_i+0x150>
 800b16a:	682b      	ldr	r3, [r5, #0]
 800b16c:	1d1a      	adds	r2, r3, #4
 800b16e:	602a      	str	r2, [r5, #0]
 800b170:	681d      	ldr	r5, [r3, #0]
 800b172:	6862      	ldr	r2, [r4, #4]
 800b174:	2100      	movs	r1, #0
 800b176:	4628      	mov	r0, r5
 800b178:	f7f5 f8ba 	bl	80002f0 <memchr>
 800b17c:	b108      	cbz	r0, 800b182 <_printf_i+0x1f2>
 800b17e:	1b40      	subs	r0, r0, r5
 800b180:	6060      	str	r0, [r4, #4]
 800b182:	6863      	ldr	r3, [r4, #4]
 800b184:	6123      	str	r3, [r4, #16]
 800b186:	2300      	movs	r3, #0
 800b188:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b18c:	e7a8      	b.n	800b0e0 <_printf_i+0x150>
 800b18e:	6923      	ldr	r3, [r4, #16]
 800b190:	462a      	mov	r2, r5
 800b192:	4649      	mov	r1, r9
 800b194:	4640      	mov	r0, r8
 800b196:	47d0      	blx	sl
 800b198:	3001      	adds	r0, #1
 800b19a:	d0ab      	beq.n	800b0f4 <_printf_i+0x164>
 800b19c:	6823      	ldr	r3, [r4, #0]
 800b19e:	079b      	lsls	r3, r3, #30
 800b1a0:	d413      	bmi.n	800b1ca <_printf_i+0x23a>
 800b1a2:	68e0      	ldr	r0, [r4, #12]
 800b1a4:	9b03      	ldr	r3, [sp, #12]
 800b1a6:	4298      	cmp	r0, r3
 800b1a8:	bfb8      	it	lt
 800b1aa:	4618      	movlt	r0, r3
 800b1ac:	e7a4      	b.n	800b0f8 <_printf_i+0x168>
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	4632      	mov	r2, r6
 800b1b2:	4649      	mov	r1, r9
 800b1b4:	4640      	mov	r0, r8
 800b1b6:	47d0      	blx	sl
 800b1b8:	3001      	adds	r0, #1
 800b1ba:	d09b      	beq.n	800b0f4 <_printf_i+0x164>
 800b1bc:	3501      	adds	r5, #1
 800b1be:	68e3      	ldr	r3, [r4, #12]
 800b1c0:	9903      	ldr	r1, [sp, #12]
 800b1c2:	1a5b      	subs	r3, r3, r1
 800b1c4:	42ab      	cmp	r3, r5
 800b1c6:	dcf2      	bgt.n	800b1ae <_printf_i+0x21e>
 800b1c8:	e7eb      	b.n	800b1a2 <_printf_i+0x212>
 800b1ca:	2500      	movs	r5, #0
 800b1cc:	f104 0619 	add.w	r6, r4, #25
 800b1d0:	e7f5      	b.n	800b1be <_printf_i+0x22e>
 800b1d2:	bf00      	nop
 800b1d4:	0800b53d 	.word	0x0800b53d
 800b1d8:	0800b54e 	.word	0x0800b54e

0800b1dc <memcpy>:
 800b1dc:	440a      	add	r2, r1
 800b1de:	4291      	cmp	r1, r2
 800b1e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b1e4:	d100      	bne.n	800b1e8 <memcpy+0xc>
 800b1e6:	4770      	bx	lr
 800b1e8:	b510      	push	{r4, lr}
 800b1ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1f2:	4291      	cmp	r1, r2
 800b1f4:	d1f9      	bne.n	800b1ea <memcpy+0xe>
 800b1f6:	bd10      	pop	{r4, pc}

0800b1f8 <memmove>:
 800b1f8:	4288      	cmp	r0, r1
 800b1fa:	b510      	push	{r4, lr}
 800b1fc:	eb01 0402 	add.w	r4, r1, r2
 800b200:	d902      	bls.n	800b208 <memmove+0x10>
 800b202:	4284      	cmp	r4, r0
 800b204:	4623      	mov	r3, r4
 800b206:	d807      	bhi.n	800b218 <memmove+0x20>
 800b208:	1e43      	subs	r3, r0, #1
 800b20a:	42a1      	cmp	r1, r4
 800b20c:	d008      	beq.n	800b220 <memmove+0x28>
 800b20e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b212:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b216:	e7f8      	b.n	800b20a <memmove+0x12>
 800b218:	4402      	add	r2, r0
 800b21a:	4601      	mov	r1, r0
 800b21c:	428a      	cmp	r2, r1
 800b21e:	d100      	bne.n	800b222 <memmove+0x2a>
 800b220:	bd10      	pop	{r4, pc}
 800b222:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b226:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b22a:	e7f7      	b.n	800b21c <memmove+0x24>

0800b22c <_free_r>:
 800b22c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b22e:	2900      	cmp	r1, #0
 800b230:	d044      	beq.n	800b2bc <_free_r+0x90>
 800b232:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b236:	9001      	str	r0, [sp, #4]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	f1a1 0404 	sub.w	r4, r1, #4
 800b23e:	bfb8      	it	lt
 800b240:	18e4      	addlt	r4, r4, r3
 800b242:	f000 f913 	bl	800b46c <__malloc_lock>
 800b246:	4a1e      	ldr	r2, [pc, #120]	; (800b2c0 <_free_r+0x94>)
 800b248:	9801      	ldr	r0, [sp, #4]
 800b24a:	6813      	ldr	r3, [r2, #0]
 800b24c:	b933      	cbnz	r3, 800b25c <_free_r+0x30>
 800b24e:	6063      	str	r3, [r4, #4]
 800b250:	6014      	str	r4, [r2, #0]
 800b252:	b003      	add	sp, #12
 800b254:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b258:	f000 b90e 	b.w	800b478 <__malloc_unlock>
 800b25c:	42a3      	cmp	r3, r4
 800b25e:	d908      	bls.n	800b272 <_free_r+0x46>
 800b260:	6825      	ldr	r5, [r4, #0]
 800b262:	1961      	adds	r1, r4, r5
 800b264:	428b      	cmp	r3, r1
 800b266:	bf01      	itttt	eq
 800b268:	6819      	ldreq	r1, [r3, #0]
 800b26a:	685b      	ldreq	r3, [r3, #4]
 800b26c:	1949      	addeq	r1, r1, r5
 800b26e:	6021      	streq	r1, [r4, #0]
 800b270:	e7ed      	b.n	800b24e <_free_r+0x22>
 800b272:	461a      	mov	r2, r3
 800b274:	685b      	ldr	r3, [r3, #4]
 800b276:	b10b      	cbz	r3, 800b27c <_free_r+0x50>
 800b278:	42a3      	cmp	r3, r4
 800b27a:	d9fa      	bls.n	800b272 <_free_r+0x46>
 800b27c:	6811      	ldr	r1, [r2, #0]
 800b27e:	1855      	adds	r5, r2, r1
 800b280:	42a5      	cmp	r5, r4
 800b282:	d10b      	bne.n	800b29c <_free_r+0x70>
 800b284:	6824      	ldr	r4, [r4, #0]
 800b286:	4421      	add	r1, r4
 800b288:	1854      	adds	r4, r2, r1
 800b28a:	42a3      	cmp	r3, r4
 800b28c:	6011      	str	r1, [r2, #0]
 800b28e:	d1e0      	bne.n	800b252 <_free_r+0x26>
 800b290:	681c      	ldr	r4, [r3, #0]
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	6053      	str	r3, [r2, #4]
 800b296:	4421      	add	r1, r4
 800b298:	6011      	str	r1, [r2, #0]
 800b29a:	e7da      	b.n	800b252 <_free_r+0x26>
 800b29c:	d902      	bls.n	800b2a4 <_free_r+0x78>
 800b29e:	230c      	movs	r3, #12
 800b2a0:	6003      	str	r3, [r0, #0]
 800b2a2:	e7d6      	b.n	800b252 <_free_r+0x26>
 800b2a4:	6825      	ldr	r5, [r4, #0]
 800b2a6:	1961      	adds	r1, r4, r5
 800b2a8:	428b      	cmp	r3, r1
 800b2aa:	bf04      	itt	eq
 800b2ac:	6819      	ldreq	r1, [r3, #0]
 800b2ae:	685b      	ldreq	r3, [r3, #4]
 800b2b0:	6063      	str	r3, [r4, #4]
 800b2b2:	bf04      	itt	eq
 800b2b4:	1949      	addeq	r1, r1, r5
 800b2b6:	6021      	streq	r1, [r4, #0]
 800b2b8:	6054      	str	r4, [r2, #4]
 800b2ba:	e7ca      	b.n	800b252 <_free_r+0x26>
 800b2bc:	b003      	add	sp, #12
 800b2be:	bd30      	pop	{r4, r5, pc}
 800b2c0:	240003e8 	.word	0x240003e8

0800b2c4 <sbrk_aligned>:
 800b2c4:	b570      	push	{r4, r5, r6, lr}
 800b2c6:	4e0e      	ldr	r6, [pc, #56]	; (800b300 <sbrk_aligned+0x3c>)
 800b2c8:	460c      	mov	r4, r1
 800b2ca:	6831      	ldr	r1, [r6, #0]
 800b2cc:	4605      	mov	r5, r0
 800b2ce:	b911      	cbnz	r1, 800b2d6 <sbrk_aligned+0x12>
 800b2d0:	f000 f8bc 	bl	800b44c <_sbrk_r>
 800b2d4:	6030      	str	r0, [r6, #0]
 800b2d6:	4621      	mov	r1, r4
 800b2d8:	4628      	mov	r0, r5
 800b2da:	f000 f8b7 	bl	800b44c <_sbrk_r>
 800b2de:	1c43      	adds	r3, r0, #1
 800b2e0:	d00a      	beq.n	800b2f8 <sbrk_aligned+0x34>
 800b2e2:	1cc4      	adds	r4, r0, #3
 800b2e4:	f024 0403 	bic.w	r4, r4, #3
 800b2e8:	42a0      	cmp	r0, r4
 800b2ea:	d007      	beq.n	800b2fc <sbrk_aligned+0x38>
 800b2ec:	1a21      	subs	r1, r4, r0
 800b2ee:	4628      	mov	r0, r5
 800b2f0:	f000 f8ac 	bl	800b44c <_sbrk_r>
 800b2f4:	3001      	adds	r0, #1
 800b2f6:	d101      	bne.n	800b2fc <sbrk_aligned+0x38>
 800b2f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b2fc:	4620      	mov	r0, r4
 800b2fe:	bd70      	pop	{r4, r5, r6, pc}
 800b300:	240003ec 	.word	0x240003ec

0800b304 <_malloc_r>:
 800b304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b308:	1ccd      	adds	r5, r1, #3
 800b30a:	f025 0503 	bic.w	r5, r5, #3
 800b30e:	3508      	adds	r5, #8
 800b310:	2d0c      	cmp	r5, #12
 800b312:	bf38      	it	cc
 800b314:	250c      	movcc	r5, #12
 800b316:	2d00      	cmp	r5, #0
 800b318:	4607      	mov	r7, r0
 800b31a:	db01      	blt.n	800b320 <_malloc_r+0x1c>
 800b31c:	42a9      	cmp	r1, r5
 800b31e:	d905      	bls.n	800b32c <_malloc_r+0x28>
 800b320:	230c      	movs	r3, #12
 800b322:	603b      	str	r3, [r7, #0]
 800b324:	2600      	movs	r6, #0
 800b326:	4630      	mov	r0, r6
 800b328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b32c:	4e2e      	ldr	r6, [pc, #184]	; (800b3e8 <_malloc_r+0xe4>)
 800b32e:	f000 f89d 	bl	800b46c <__malloc_lock>
 800b332:	6833      	ldr	r3, [r6, #0]
 800b334:	461c      	mov	r4, r3
 800b336:	bb34      	cbnz	r4, 800b386 <_malloc_r+0x82>
 800b338:	4629      	mov	r1, r5
 800b33a:	4638      	mov	r0, r7
 800b33c:	f7ff ffc2 	bl	800b2c4 <sbrk_aligned>
 800b340:	1c43      	adds	r3, r0, #1
 800b342:	4604      	mov	r4, r0
 800b344:	d14d      	bne.n	800b3e2 <_malloc_r+0xde>
 800b346:	6834      	ldr	r4, [r6, #0]
 800b348:	4626      	mov	r6, r4
 800b34a:	2e00      	cmp	r6, #0
 800b34c:	d140      	bne.n	800b3d0 <_malloc_r+0xcc>
 800b34e:	6823      	ldr	r3, [r4, #0]
 800b350:	4631      	mov	r1, r6
 800b352:	4638      	mov	r0, r7
 800b354:	eb04 0803 	add.w	r8, r4, r3
 800b358:	f000 f878 	bl	800b44c <_sbrk_r>
 800b35c:	4580      	cmp	r8, r0
 800b35e:	d13a      	bne.n	800b3d6 <_malloc_r+0xd2>
 800b360:	6821      	ldr	r1, [r4, #0]
 800b362:	3503      	adds	r5, #3
 800b364:	1a6d      	subs	r5, r5, r1
 800b366:	f025 0503 	bic.w	r5, r5, #3
 800b36a:	3508      	adds	r5, #8
 800b36c:	2d0c      	cmp	r5, #12
 800b36e:	bf38      	it	cc
 800b370:	250c      	movcc	r5, #12
 800b372:	4629      	mov	r1, r5
 800b374:	4638      	mov	r0, r7
 800b376:	f7ff ffa5 	bl	800b2c4 <sbrk_aligned>
 800b37a:	3001      	adds	r0, #1
 800b37c:	d02b      	beq.n	800b3d6 <_malloc_r+0xd2>
 800b37e:	6823      	ldr	r3, [r4, #0]
 800b380:	442b      	add	r3, r5
 800b382:	6023      	str	r3, [r4, #0]
 800b384:	e00e      	b.n	800b3a4 <_malloc_r+0xa0>
 800b386:	6822      	ldr	r2, [r4, #0]
 800b388:	1b52      	subs	r2, r2, r5
 800b38a:	d41e      	bmi.n	800b3ca <_malloc_r+0xc6>
 800b38c:	2a0b      	cmp	r2, #11
 800b38e:	d916      	bls.n	800b3be <_malloc_r+0xba>
 800b390:	1961      	adds	r1, r4, r5
 800b392:	42a3      	cmp	r3, r4
 800b394:	6025      	str	r5, [r4, #0]
 800b396:	bf18      	it	ne
 800b398:	6059      	strne	r1, [r3, #4]
 800b39a:	6863      	ldr	r3, [r4, #4]
 800b39c:	bf08      	it	eq
 800b39e:	6031      	streq	r1, [r6, #0]
 800b3a0:	5162      	str	r2, [r4, r5]
 800b3a2:	604b      	str	r3, [r1, #4]
 800b3a4:	4638      	mov	r0, r7
 800b3a6:	f104 060b 	add.w	r6, r4, #11
 800b3aa:	f000 f865 	bl	800b478 <__malloc_unlock>
 800b3ae:	f026 0607 	bic.w	r6, r6, #7
 800b3b2:	1d23      	adds	r3, r4, #4
 800b3b4:	1af2      	subs	r2, r6, r3
 800b3b6:	d0b6      	beq.n	800b326 <_malloc_r+0x22>
 800b3b8:	1b9b      	subs	r3, r3, r6
 800b3ba:	50a3      	str	r3, [r4, r2]
 800b3bc:	e7b3      	b.n	800b326 <_malloc_r+0x22>
 800b3be:	6862      	ldr	r2, [r4, #4]
 800b3c0:	42a3      	cmp	r3, r4
 800b3c2:	bf0c      	ite	eq
 800b3c4:	6032      	streq	r2, [r6, #0]
 800b3c6:	605a      	strne	r2, [r3, #4]
 800b3c8:	e7ec      	b.n	800b3a4 <_malloc_r+0xa0>
 800b3ca:	4623      	mov	r3, r4
 800b3cc:	6864      	ldr	r4, [r4, #4]
 800b3ce:	e7b2      	b.n	800b336 <_malloc_r+0x32>
 800b3d0:	4634      	mov	r4, r6
 800b3d2:	6876      	ldr	r6, [r6, #4]
 800b3d4:	e7b9      	b.n	800b34a <_malloc_r+0x46>
 800b3d6:	230c      	movs	r3, #12
 800b3d8:	603b      	str	r3, [r7, #0]
 800b3da:	4638      	mov	r0, r7
 800b3dc:	f000 f84c 	bl	800b478 <__malloc_unlock>
 800b3e0:	e7a1      	b.n	800b326 <_malloc_r+0x22>
 800b3e2:	6025      	str	r5, [r4, #0]
 800b3e4:	e7de      	b.n	800b3a4 <_malloc_r+0xa0>
 800b3e6:	bf00      	nop
 800b3e8:	240003e8 	.word	0x240003e8

0800b3ec <_realloc_r>:
 800b3ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3f0:	4680      	mov	r8, r0
 800b3f2:	4614      	mov	r4, r2
 800b3f4:	460e      	mov	r6, r1
 800b3f6:	b921      	cbnz	r1, 800b402 <_realloc_r+0x16>
 800b3f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3fc:	4611      	mov	r1, r2
 800b3fe:	f7ff bf81 	b.w	800b304 <_malloc_r>
 800b402:	b92a      	cbnz	r2, 800b410 <_realloc_r+0x24>
 800b404:	f7ff ff12 	bl	800b22c <_free_r>
 800b408:	4625      	mov	r5, r4
 800b40a:	4628      	mov	r0, r5
 800b40c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b410:	f000 f838 	bl	800b484 <_malloc_usable_size_r>
 800b414:	4284      	cmp	r4, r0
 800b416:	4607      	mov	r7, r0
 800b418:	d802      	bhi.n	800b420 <_realloc_r+0x34>
 800b41a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b41e:	d812      	bhi.n	800b446 <_realloc_r+0x5a>
 800b420:	4621      	mov	r1, r4
 800b422:	4640      	mov	r0, r8
 800b424:	f7ff ff6e 	bl	800b304 <_malloc_r>
 800b428:	4605      	mov	r5, r0
 800b42a:	2800      	cmp	r0, #0
 800b42c:	d0ed      	beq.n	800b40a <_realloc_r+0x1e>
 800b42e:	42bc      	cmp	r4, r7
 800b430:	4622      	mov	r2, r4
 800b432:	4631      	mov	r1, r6
 800b434:	bf28      	it	cs
 800b436:	463a      	movcs	r2, r7
 800b438:	f7ff fed0 	bl	800b1dc <memcpy>
 800b43c:	4631      	mov	r1, r6
 800b43e:	4640      	mov	r0, r8
 800b440:	f7ff fef4 	bl	800b22c <_free_r>
 800b444:	e7e1      	b.n	800b40a <_realloc_r+0x1e>
 800b446:	4635      	mov	r5, r6
 800b448:	e7df      	b.n	800b40a <_realloc_r+0x1e>
	...

0800b44c <_sbrk_r>:
 800b44c:	b538      	push	{r3, r4, r5, lr}
 800b44e:	4d06      	ldr	r5, [pc, #24]	; (800b468 <_sbrk_r+0x1c>)
 800b450:	2300      	movs	r3, #0
 800b452:	4604      	mov	r4, r0
 800b454:	4608      	mov	r0, r1
 800b456:	602b      	str	r3, [r5, #0]
 800b458:	f7f6 f904 	bl	8001664 <_sbrk>
 800b45c:	1c43      	adds	r3, r0, #1
 800b45e:	d102      	bne.n	800b466 <_sbrk_r+0x1a>
 800b460:	682b      	ldr	r3, [r5, #0]
 800b462:	b103      	cbz	r3, 800b466 <_sbrk_r+0x1a>
 800b464:	6023      	str	r3, [r4, #0]
 800b466:	bd38      	pop	{r3, r4, r5, pc}
 800b468:	240003f0 	.word	0x240003f0

0800b46c <__malloc_lock>:
 800b46c:	4801      	ldr	r0, [pc, #4]	; (800b474 <__malloc_lock+0x8>)
 800b46e:	f000 b811 	b.w	800b494 <__retarget_lock_acquire_recursive>
 800b472:	bf00      	nop
 800b474:	240003f4 	.word	0x240003f4

0800b478 <__malloc_unlock>:
 800b478:	4801      	ldr	r0, [pc, #4]	; (800b480 <__malloc_unlock+0x8>)
 800b47a:	f000 b80c 	b.w	800b496 <__retarget_lock_release_recursive>
 800b47e:	bf00      	nop
 800b480:	240003f4 	.word	0x240003f4

0800b484 <_malloc_usable_size_r>:
 800b484:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b488:	1f18      	subs	r0, r3, #4
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	bfbc      	itt	lt
 800b48e:	580b      	ldrlt	r3, [r1, r0]
 800b490:	18c0      	addlt	r0, r0, r3
 800b492:	4770      	bx	lr

0800b494 <__retarget_lock_acquire_recursive>:
 800b494:	4770      	bx	lr

0800b496 <__retarget_lock_release_recursive>:
 800b496:	4770      	bx	lr

0800b498 <_init>:
 800b498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b49a:	bf00      	nop
 800b49c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b49e:	bc08      	pop	{r3}
 800b4a0:	469e      	mov	lr, r3
 800b4a2:	4770      	bx	lr

0800b4a4 <_fini>:
 800b4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4a6:	bf00      	nop
 800b4a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4aa:	bc08      	pop	{r3}
 800b4ac:	469e      	mov	lr, r3
 800b4ae:	4770      	bx	lr
